<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MDES completed flow: AS - DAC - NSA" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">30</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="correlationID" elementType="Argument">
              <stringProp name="Argument.name">correlationID</stringProp>
              <stringProp name="Argument.value">${__P(start_correlationID,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PostgreSQL Connection Configuration" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery"></stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">ft_al</stringProp>
            <stringProp name="dbUrl">jdbc:postgresql://192.168.1.115:5432/ft_al</stringProp>
            <stringProp name="driver">org.postgresql.Driver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">ft</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">ft</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="correlationID" elementType="Argument">
                <stringProp name="Argument.name">correlationID</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
            <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
          </CriticalSectionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (props.get(&quot;correlationID&quot;) == null){
props.put(&quot;correlationID&quot;, Long.parseLong(vars.get(&quot;correlationID&quot;))); 	
}
n = props.get(&quot;correlationID&quot;) + 1;
vars.put(&quot;correlationID&quot;,String.valueOf(n)); 
props.put(&quot;correlationID&quot;,n);

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Authorize Service" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
&quot;services&quot;:[&#xd;
&quot;DIGITIZATION&quot;&#xd;
],&#xd;
&quot;cardInfo&quot;:{&#xd;
&quot;encryptedData&quot; : &quotquot;,&#xd;
    &quot;publicKeyFingerprint&quot; : &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
    &quot;encryptedKey&quot; : &quotquot;,&#xd;
    &quot;iv&quot; : &quot;33CC701395B23592B48326F67984D618&quot;,&#xd;
    &quot;oaepHashingAlgorithm&quot; : &quot;SHA256&quot;&#xd;
},&#xd;
&quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
&quot;tokenRequestorId&quot;:&quot;50110030273&quot;,&#xd;
&quot;walletId&quot;:&quot;103&quot;,&#xd;
&quot;paymentAppInstanceId&quot;:&quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
&quot;deviceInfo&quot;:{&#xd;
&quot;isoDeviceType&quot;:&quot;21&quot;,&#xd;
&quot;formFactor&quot;:&quot;PHONE&quot;,&#xd;
&quot;storageTechnology&quot;:&quot;SE&quot;,&#xd;
&quot;paymentTypes&quot;:[&#xd;
&quot;NFC&quot;,&#xd;
&quot;DSRP&quot;&#xd;
],&#xd;
&quot;deviceName&quot;:&quot;iPhone&quot;&#xd;
},&#xd;
&quot;walletProviderDecisioningInfo&quot;:{&#xd;
&quot;recommendationStandardVersion&quot;:&quot;1.0&quot;,&#xd;
&quot;deviceScore&quot;:&quot;1&quot;,&#xd;
&quot;accountScore&quot;:&quot;1&quot;,&#xd;
&quot;recommendedDecision&quot;:&quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
&quot;recommendationReasons&quot;:[&#xd;
&quot;ACCOUNT_TOO_NEW&quot;,&#xd;
&quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
&quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
]&#xd;
},&#xd;
&quot;activeTokenCount&quot;:&quot;0&quot;,&#xd;
&quot;tokenType&quot;:&quot;CLOUD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.1.71</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-server-1.2.5-SNAPSHOT/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="authorizeService &lt; cardholder_verification_method" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM cardholder_verification_method WHERE token_ref_id=&apos;NotYetAssigned-D${correlationID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">cardholder_verification_method</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="authorizeService &lt; token_info" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;NotYetAssigned-D${correlationID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int cvmSize = vars.getObject(&quot;cardholder_verification_method&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || cvmSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows &apos;cardholder_verification_method&apos;: &quot; + cvmSize;
}

int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenRefId = token.get(&quot;token_ref_id&quot;);
boolean equalTokenRefId = tokenRefId.equals(&quot;NotYetAssigned-D${correlationID}&quot;);
if (!equalTokenRefId) {
	Failure = true;
	FailureMessage = &quot;&apos;token_ref_id&apos;: &quot; + tokenRefId;
}

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;I&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus + &quot;ms.&quot;;
}

String cvmPanInternalID = cvm.get(&quot;pan_internal_id&quot;);
String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
boolean equalTokenPanInternalID = tokenPanInternalID.equals(cvmPanInternalID);
if (!equalTokenPanInternalID) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: &quot; + cvmPanInternalID + &quot; = &quot; + tokenPanInternalID;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is not empty&quot;;
}

Date tokenDigitizeDate = token.get(&quot;digitize_date&quot;);
if (tokenDigitizeDate==null) {
	Failure = true;
	FailureMessage = &quot;&apos;digitize_date&apos;: is empty&quot;;
} else {
	long timeTokenDigitizeDate = tokenDigitizeDate.getTime();
	long timeNowDiff = new Date().getTime() - 1000;
	boolean equalTokenDigitizeDate = timeNowDiff &lt;= timeTokenDigitizeDate;
	if (!equalTokenDigitizeDate) {
		Failure = true;
		FailureMessage = &quot;&apos;digitize_date&apos;: &quot; + (new Date().getTime() - timeTokenDigitizeDate);
	}	
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Notify Service Activated" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notifyServiceActivated" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
&quot;services&quot;:[&#xd;
&quot;DIGITIZATION&quot;&#xd;
],&#xd;
&quot;cardAndToken&quot;:{&#xd;
      &quot;panUniqueReference&quot;:&quot;FTC1MC0000171740e6ad4d1863304ca383c2af840bc89b78&quot;,&#xd;
      &quot;tokenUniqueReference&quot;:&quot;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&quot;,&#xd;
      &quot;publicKeyFingerprint&quot;:&quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;:&quot;52d432625311c99571467f7d3b3bc9aae76e891bfa7e1a91b5bcb1e4926f66c7b8ff57cd19254dd3f7353d829892054a0a4bde550c19c9c893411519797cb05d28cdd24c4c76451e6c0c1f0b2933f0fafeea3119539a193b417cb37888cd404305f0cc137cb6ed5ff2813aa8fe1034fe2eb83d269551c848ede23183c5b577a7c531db418a7d1b5f9f39412553bf0501a51ee49ee10eb1d5ff03f4e755f3779c6d3aaaf3a82ccaeb2a87172a4311d0feed9a508ebe8ca57f83e01cbf468d0c7f6b2bc187cc018f2b2594fb893bb30933b9ed14c856ee0808101f2e492800adbbedcf06c78b42e58651c7a47a376c43088f566880122063be55859bcc4e41e481&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;:&quot;SHA256&quot;,&#xd;
      &quot;iv&quot;:&quot;1911c7142309f8a02ba6e055c2724f0d&quot;,&#xd;
      &quot;encryptedData&quot;:&quot;093a3764cb328a7f2552e78de6f2383563090e2c13442a826c20aeebc513aead223f066d1a7e4d83052ca5cadc90250257e7d2d35138dd952260ed680b8572631e48c1123c57b8146c079a7a81b8f56ed37d38643e7bbbc49538f9d1d2d3cf223609215a832a374a1b9d3fc445cf07764f470e2e80e3161fd87e1ebb46185a0560a17d2af2b5d91f5993d22fa4340c518be2f834beb37801507a9e37c6bf85b44f51d161c74a660e568e9dc65c051bbc6bfc89af4120216ab466df42b422bd86f1d51fd1df0a4cce7b8a80ac1c3faa22dc8b1f66daad7fb97c19f5b656a494d852150205ac6659a1d5f8bc4e00b159d4fa977b92deba9dfa9d9bae662fcf4645fc5148f5f69af4b3facd92a9ecb2a320&quot;&#xd;
   },&#xd;
&quot;deviceInfo&quot;:{&#xd;
&quot;isoDeviceType&quot;:&quot;21&quot;,&#xd;
&quot;formFactor&quot;:&quot;PHONE&quot;,&#xd;
&quot;storageTechnology&quot;:&quot;SE&quot;,&#xd;
&quot;paymentTypes&quot;:[&#xd;
&quot;NFC&quot;,&#xd;
&quot;DSRP&quot;&#xd;
],&#xd;
&quot;deviceName&quot;:&quot;iPhone&quot;&#xd;
},&#xd;
&quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
&quot;tokenRequestorId&quot;:&quot;50110030273&quot;,&#xd;
&quot;walletId&quot;:&quot;103&quot;,&#xd;
&quot;paymentAppInstanceId&quot;:&quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
&quot;tokenType&quot;:&quot;EMBEDDED_SE&quot;,&#xd;
&quot;secureElementId&quot;:&quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
&quot;accountPanSuffix&quot;:&quot;3579&quot;,&#xd;
&quot;serviceRequestDateTime&quot;:&quot;2018-11-20T16:57:04.000Z&quot;,&#xd;
&quot;termsAndConditionsAssetId&quot;:&quot;d781f02e-28a5-4ab1-b1de-2aa39896f725&quot;,&#xd;
&quot;termsAndConditionsAcceptedTimestamp&quot;:&quot;2018-11-20T16:57:13.000Z&quot;,&#xd;
&quot;productConfigurationId&quot;:&quot;AlfaMDH&quot;,&#xd;
&quot;consumerLanguage&quot;:&quot;ru&quot;,&#xd;
&quot;decision&quot;:&quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
&quot;decisionMadeBy&quot;:&quot;AUTHORIZATION_REQUEST&quot;,&#xd;
&quot;tokenActivatedDateTime&quot;:&quot;2018-11-20T16:57:51.000Z&quot;,&#xd;
&quot;numberOfActivationAttempts&quot;:1,&#xd;
&quot;numberOfActiveTokens&quot;:1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.1.71</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mdes-server-1.2.5-SNAPSHOT/notifyServiceActivated</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="notifyServiceActivated &lt; token_info (old)" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;NotYetAssigned-D${correlationID}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info.old</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info.old&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || 0 &lt; tokenSize) {
	Failure = true;
	FailureMessage = &quot;Old token not delete: &quot; + tokenSize;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="notifyServiceActivated &lt; token_info (new)" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info.new</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info.new&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info.new&quot;).get(0);

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;A&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

String tokenTokenType = token.get(&quot;token_type&quot;);
if (tokenTokenType==null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_type&apos;: is empty&quot;;
}

String tokenPanSource = token.get(&quot;pan_source&quot;);
if (tokenPanSource==null) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_source&apos;: is empty&quot;;
}

String tokenPanInternalGuid = token.get(&quot;pan_internal_guid&quot;);
if (tokenPanInternalGuid==null) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_guid&apos;: is empty&quot;;
}

boolean equalTokenPanInternalGuid = tokenPanInternalGuid.equals(&quot;CardID4&quot;);
if (!equalTokenPanInternalGuid) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_guid&apos;: &quot; + tokenPanInternalID;
}

String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
boolean equalTokenPanInternalID = tokenPanInternalID.equals(&quot;CardID00000000000004&quot;);
if (!equalTokenPanInternalID) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: &quot; + tokenPanInternalID;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate==null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is empty&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for  Notify Token Updated" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notifyTokenUpdated" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
&quot;tokens&quot;:[&#xd;
{&#xd;
&quot;tokenUniqueReference&quot;:&quot;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&quot;,&#xd;
&quot;status&quot;:&quot;INACTIVE&quot;,&#xd;
&quot;suspendedBy&quot;:[&#xd;
&quot;ISSUER&quot;&#xd;
]&#xd;
}&#xd;
],&#xd;
&quot;reasonCode&quot;:&quot;STATUS_UPDATE&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.1.71</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mdes-server-1.2.5-SNAPSHOT/notifyTokenUpdated</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="notifyTokenUpdated &lt; token_info" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;I&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
long timeTokenStatusUpdate = tokenStatusUpdate.getTime();
long timeNowDiff = new Date().getTime() - 1000;
boolean equalTokenStatusUpdate = timeNowDiff &lt;= timeTokenStatusUpdate;
if (!equalTokenStatusUpdate) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: &quot; + (new Date().getTime() - timeTokenStatusUpdate) + &quot;ms.&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
