<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan for VTS - GCVM - SPC - TCN - TN" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="serverUrl" elementType="Argument">
            <stringProp name="Argument.name">serverUrl</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logDir" elementType="Argument">
            <stringProp name="Argument.name">logDir</stringProp>
            <stringProp name="Argument.value">~/tools/wildfly-10.1.0/standalone/log/fasttack</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverVer" elementType="Argument">
            <stringProp name="Argument.name">serverVer</stringProp>
            <stringProp name="Argument.value">1.6.0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VTS completed flow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">10</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="correlationID" elementType="Argument">
              <stringProp name="Argument.name">correlationID</stringProp>
              <stringProp name="Argument.value">${__P(start_correlationID,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tokenReferenceID" elementType="Argument">
              <stringProp name="Argument.name">tokenReferenceID</stringProp>
              <stringProp name="Argument.value">${__P(start_tokenReferenceID,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PostgreSQL Connection Configuration" enabled="true">
            <stringProp name="dataSource">ft_al</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery"></stringProp>
            <stringProp name="dbUrl">jdbc:postgresql://192.168.1.115:5432/ft_al</stringProp>
            <stringProp name="driver">org.postgresql.Driver</stringProp>
            <stringProp name="username">ft</stringProp>
            <stringProp name="password">ft</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="correlationID" elementType="Argument">
                <stringProp name="Argument.name">correlationID</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
            <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
          </CriticalSectionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (props.get(&quot;tokenReferenceID&quot;) == null){
	props.put(&quot;tokenReferenceID&quot;, Long.parseLong(vars.get(&quot;tokenReferenceID&quot;))); 	
}
n = props.get(&quot;tokenReferenceID&quot;) + 1;
vars.put(&quot;tokenReferenceID&quot;,String.valueOf(n)); 
props.put(&quot;tokenReferenceID&quot;,n);

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="clear: token_info, cardholder_verification_method" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">DELETE FROM cardholder_verification_method WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;
DELETE FROM token_info WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Approve Provisioning" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (+cvv2  cvc-expairDate)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmxub3duISEhIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM01EQXlOakkyTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LlpiNnJfZS1ncWpGNFo3cEhjc0JsQ0lVdi1yMlh5Qzk2Szl0NFRfWER2VW5aMXVMT0F2ckd0cTBNVFpPTTAzczRfaGNFRGNHRDZyVEdLQXBkNEdPSmt6bDZVNWplVFotNFNQZURmWGpQZ3N2SENlWl9iQ1k1OEZwdVlKMVJaYmZiQjhxd3I1eGJvSHhJZDBjVVV4M29teFJYSE1RRFFScjM0MFZUaFpJSU80anJBa2ljV25sMk1sZzIwSG91TTZxVFBwb0JzTllKb0RaZkp6R1YyNTloWEVFa0dnOXNoZTdWMngwbHBjSGhYUVRwcWZpX0pYZjdTQ1BtbDZYLVlIN2h1enRxNmZxLWVlS1hRYmFGZjhOYkFQVWRmY1lSTEZyYXp1NnRQa2t5NTV0QndVNzlEbGFaRVJFUlcyWnZPSm01d1A5NGMzTUFEcF9uUU45ZU40Q1hDdy5kMmxwV3BfYVc1QXdlSVpQLjQwX3ZyQTFWQ0xnSW9qM2hNNnRldDhxazVQbVlZT2JjQ3Rfb3h2X1g4QzJQRFdJU1hDb3E4RktwZWhjaFI3d09lR0tPcGpzNmZIWDVrbndsbHJJYXBQVDFEZmg1SmEydy1zV2doWnlZSFhULVhkUFVmeXF1NTd1anBvaFR1cVlNWHktaTNFWWlqb09PdTdtUFFhbUtRUUp4a09NWmRkZm5raVN3NVY5bjhvQU5pbjhMc2VXZEZjZTg1RmVCV0dGRnB3MXNZby1PeVUtSnJmRkl6SEUtSEgtZExEbUxRTUtacHJYcEc2Y3g3WlpNbkIzMWx3SVJCeTJTZ2JPUHFISnhnNmg3S2NNOW5XMTc4TVJrajRRX2ZXVmdnbDVrUnZ0NDg5RVFoV2MtcElBeURoNWNMdzB0cGYxR3RJMzBGcWpDMGszLTZURXlPdXNKN2JaQ01TYW9ndVVSaENySWs4ZW5LdmpNWTZia0RaVkZCbjNpN2N4LXp5SmlabVN4Q2g0Nk5JdHowQ1dmcklSMlRIZGlxQU5TLVIzYXdobVpFeFRJa3BxVkZyeGk1VXBWcG1ZRkxYUHNMRGRpOW1HY0U2YzFCN1lXUmd3cDNKbjBIcjJBMUNYa2d4ckNjQ3NxLVUzLWhYQjRIekpWOHJ4U0pMZjhKTGpmZDRFMUF2RmVSWmJTZzRPQy1pbW9mY044Sk1Ob0FZWDFrTi1qQlZQYUpqNVVuemxnUkJWaGpRdk13M3YzQzZjRU5Rd0ItdnFlX0lSeEhDSU52MTVlSjhYX3I0c2sxeXVnWnlHR1VQMGtLT0VwWUFmdFRkcDdwMGVVU0hCODU3MHhxdFpyMGFmeDB6YWlTcFh4aWNEb3VJemN2cFpKWFhaYzRxVGNzTWszMGVFYjBMV0ZmQWtLcllpTUtkd2VhQnhtR2hBVFlJd21yZ3IybWxmS0tHcWV3eE14d3N6RDZ5MXpQM1g5ekRydkp1UDJZMjl3a0dTWG9vaG8tLUNsaXFXZmtrZjdieGlvN2x0UkNZczhUUm1lRjY3MWYwTmpNTzhLbUs5XzU1UU9IUHd4bnZSeXhqWFVYZFlVTFl6ZkVUdmRULXpkeDlzTkNLNTkyX2tRck9aSE9malBiZ01ld2tIT2ZDWHprNDAzbFBscU5JUm92aXdXbERDT0hQNTA1U3psV19NZVExOGxfemNrRWV1alJIVDA3YzlYRTdiVW5vUWhhZExpdGU4ODljZ3pBamZsbTZGbnRGNHoyWDViaW1TZTRYTWtXX0kyVmdHRmpyRVF4X1BYX01OWDhQTDNqcHZzMTNsdFU3RTVZYlpEZ25NdDczZWRVZGVHSTBfNmZRRmJHc2hhY0JVNWZDRElLWFlBR3lwMVdyTHFHZjFHZllpMWNhV211YXFVNG0tZWFqa3lzc3VsT0VkS2pVYzktQTEySF9EdWxaZ1I1Z1dRNUdwX1g3S2tVYlJLX2VXckU1ZVplSEljaWJSUktWMkc2VExKQUY3ekQ2M2xyUlI0QjRhaEI4VlRxUlFKWGs3dDB3OHRSWXdEbGExaFp3UHl0WFFmN2FhMl9WRjh2QXhKOTJqN1ltaFZYZm5sZm5ycjRJVFZ5R0JPSkpuTC0tMGE3VENZdk4yRVh1dWtNUlpKX3o1Y3Z3dGxzOG13blVkUm5oNFhnam1EYktCTzFnUGxBdzBHQ2pnNjQ4elI2V0NtZkQ0VFNNdlF2Mld1dENwSWozSlA4OGdtSHJ6M254QjY2ekxTQVhodGpHdXJ2OXFNZ1NOSWVnU2JBNjUwRVZoSFVaUmVBY1dSRmJZaXFycXRMdmdWUGJDX3NRZHE0OEZUU3hKSzBxS1lyMjJsLXM4eUxsTGhReUNiYjJZVXhfaC0wbWxqQ1Y2OU5HOVlZMk5ITDQ3Y0l2Xzc1b3lXLllIa0Z6QVNZQkNMaUlTTlFNNjZMU0E.VVD3ySH6B9YNIwU3r30-RQVAVBObzP93Ws8tufAf_zb-VPS_65oIpL6EsXdwrAE_g4Mf3JHPwqnC33L4HB7CrviTxOrfMiAAYLic0L_V64gN7SbCgvm7iuxcduLBk64hWpL5NHgl6kAu84_dP64yAyxVT_ONUctVlct_YI2AdCh-uLZ1mmOYaTgfLSnsSecp5z1pjNA-17Pp-CcfX4LvymjmQHrOO36Bse3LawDPvRjC1g-4dbqdwSgBJ0z3fCeQD5sW25uNDl0WRUQpaClprRL7UVO1-zUkGPOwAUcweTywS0sgHjlIWBY2CwgvG85hmCjQ0Ch6MabB_eRsp0vy9g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-REQUEST-ID</stringProp>
                    <stringProp name="Header.value">1545333611280_1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (-cvv2) ???" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNE5qYzROVFkxTWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5LkxfRlFRNUFPd05NS2VCemg4b3VvcmVmUHN3bzdoTTQwdTVEY1RTUDVXblowellsQUpmNUpzdFlEeWxRbmpSRHhzQUpQTHZJV3JnOWJPU2gtdzRZZ3E1N09JVktRNmkxc2tMSl96V1kzcHA3NjdSOE00SmgxcmotUlVQUGJqelh2UGJoZHg5SU9FWkZWWU51RjR3WWl4VTVJOGV3TG94NnBxUUNRSllaSUpLSUItbDhxeTFBM1dGZ1VobFFYWHVuNmJmT3REVG9hU04xR09zTHRfdmk3QmhNeXJHS3VHUC1kVHRhaFBzb2hOR3cwbmRXZGhZWlZoWUp3ZHRiWXZkUGstM3BaWURySGlrY1R5X2p0UHN2SVQta0N1djJjakRlc0tUZ0VWQnFXdkctR3luQU9qc1VwRWV6N2pvN3N2VkpxdHVkSnVIX05QUnI5eHZxWlZzazRGUS41d013djZPZVJkX1JiN1JxLms0d09xR2JBb201TGZIa3RQQU9kZHJndnM5QXFSX2xZd2NBLTVsLVRRODVYbXhDYmNvblNNYTFMbEs1VFNUbGJqYlZETWh4UHEtMnZ4VVVRNXNtalZWenRNcDBUTExhZDFVMUtacThfakw5WVU3OGQyUTY4SlAydHdveGo5eS1fbF9Lc1prMmo1SGJGeElwMUE0RGpCYWM0S2FRV05VQmZ0R0xjQl9kYnRUTncwelNmZExmMFlxcjgyeHR4ZjRFU2NPejY0TEtkMTUyWGZOQldGTE9sZ0JUMjBBZ3ZKSnR3UFEzRnlkeU1kUDF4MWZrbDJYSTZtN3M2LTFWbGpNdFIzLVlXbF9lMngtM3lYUVZndlVzM2hmZWQzamxqeWdTWVRZN0QyMVRZVHJjNERwaVl4LUlQeFZmR05aMWE4TzBHWjllLUlmanBIX005UXhRSVpZamwyMHE5SmdjbFNESlpLVWQ1Q1dTRjlOYkVtQjh4V2dRaWF4cTBweHRRQUR5aURiV3NaQ2gxLWdCQXpZa0xrV3BsZm50QmtFV1BRSXFDcFRhMjZ5SUFRSVdHUTdMcGk1UE90UkRiTDV2S0psYXhIdUlobGNKU0FYUVJUdnhvRnhfZ0o2OUR3cTdabk80NzZhWVVoOFRmTHpOeUxrRzJxZ0JSRXRweEloeXVYa3J6V0RKekUtcmpldFN5OTI5VDBLeExETnpqSW5TUnFLazM3UHJCaGVMQ1drbHg5Snp0VWpOaHNtdVBOeG1nVmZkaFYtQ01qMDA3MDNVd0ozR3JoLS05a2FBZ1lGV2RGdVo0Y0xOb2lqZ1ZHR19aOTY1UF8weDNpNk9ONmVnWmpqSFc1ZDg4SEVxZ1ZuT0NCM2ZLem4wVHo4LXQ0d3hGVXJZaTdYV1I3RGdSYkRHbXhPZC1yV01XZ0JHRTNVTFZQU3gzM05jTXpPUThLZ0FWTUFXamFvRmNlejh3NDR0bEdjN0RlR2Nhb0RIdV81VGpla3k2Y25IN3FSMl9mcE8zYTAzU1JVTUdlX1pLcFV3VnphQ0tGamRaLVlPM3pFRE1CU0dKRF9wejE5YXBoeC03MGhhLUs0Ym5DNzRtZV8zWjh5WUF1a3FJdEFaQ3M2eE56a0tMZWppNER2TmplMXNrTldHLXZjY2VZUmtxbTJyRnNmazVqSFRBTjJrTkFCVTFfeVRIbkdqMkdac3lNVVUxaGxNMXZybnpsQjRENTFYNjluT3lQVC1RQ0tmR29NdVRJUG90N1VJRUkxcG9KTU92ZlQtMDRLVmtFUEswQVF0RnRtaWF0OFo1TDIyX2FRc3ctMno1UVZOZmJYNmdfS01LcjE1ZV9OMkxKM0FKampNcklnRFF4bzVCS2otdkFudk1wNFhWcHJoTjJ2UlZMNVVzNmdOUUR0eXFNNmRXeXRDRlNyYmJ5YTFxRjdTSmJ2c1lFUWVkVXg0REQ4SElCRXZjbHVlREFGYzhSd3U1T295ajBMcWlra3lKQjZralpzdVViclNqODRzRlZfRXdyZ1VhWktMSUJROFl0MldsWjdDTjg1MHd6ZnJxWlQ0OHNsS2dqWXVTYnhFNm42QXN5Rm5kejBsTG96NFZpWHNvQnpnTUctSy1QWm4wZkRjbTl2dC12Z21HOWc4cS1JSlZ2dmYwMHZwdGtYbjNEMnEtM09ES2FENzByZUhsRjc2Vk5PSjFSNWhjTFo0aVc4ZU10eUlqOC1fZWphVWR5bjdpYXdpY0dNSGpoUzdCb1d3eXYtZVFWTFZUR0JmN3ducTNKczNCeHViRFBhWU1FSUdPR3ZMLWc5S3RBS3NtZGxPOHltS201NjNEcHdvXzR5SVdabjhBM3F3b29sMXNOamFlVEE5S0YtS1lBRzNRektEamVmRnR3dW9aY01CQ3hQZVNDNTY0VDB0RUo3eENBSHBkUk9SQlp0MU13cG9BdXBVVE9STnlscUJCVm1tOXdiamFSNldnMEVTTTAwMUJyaEpURXBtOUl5UG9rQzlSSlBtYmRXUlJHVDh6Z3ZaSndJQTM0VnJCVEoxalFvZmstWXZna1RSdmpKbTZLY3JnbEJoQUNEYTlTQzgyOUJpT2JkRXZfOGhzUFpCeHhqazRZYWNWa0RiTndWc2J2dEQ2SXR4dGlXdUQ1ZDdSaDFxSWc1Y2ZrcU1zVTV1emE1OURDU0Q2UHhKY1drVDhWZXlmZFktRDJPNU1PTXVxQk5YOXc4UmlSaXViRTJPOUQyM3BIcFlLNmM2bXpsdDhwRlpNb0gwQkxsU2J3Nlg4enVHQXlTTGtaMVJ0UzlkZkxXd19IdUxDTVhKaVpWRzdHeFVaalZ4N3IyQWFlT2g5RTg2dl9lQmk2UXVEU01scFc0Zkx1YlJLaUF2Z0Yxc0pGUTQ2cW5MOFJzQzF6X3Vic1Y3SDlWaTBLeHRhLTAyTXFHSXJSNUdtRFExMXBEWnJ0bUhzcXpUV1h4eEU1a09PR3diXzk4bDVlNk5kdUFfM0EtSXdxaDJGMTJYdjRWdDZpUHhsMVF3eV83enVpTkczSGREYU1Gdk1GckRWLTFHdFplMzJJUzZQVndOYVl3amZiSUc4bVpWN2I5bDRhaXVpckpEejFZQW1TYW5CNjVNSURsVU5JSWZpU2RvRkRCR04xd0pUSXR1TEw2amJ3a0ktZlFYMXUtTEhDWGhEazdpeDQ2MVhIUU1JamIyNFVqT3A0emc1U0dEaW9FMkVEcXZoNEk3ZVdYQWE2dk9ROVoyYXNuamRodmpiMDkwd0FhWmF0UVJzNUVSbGRKQUx3UE5NNjJYc0k2QXZZM0s2emFxdDFDWVlScW5BOWVCNWMyRlBVemlFckdjMmVfSFl2Y201NGxSQjJRVmFUM18yWUFHemJPSW9rQ1MzQm8xdXRFNVAwNy1idFltUmlacTVOdUpyQ1V2TFF2a1NnRVR5d0JjeUVianI5cTh2WlNxZ2dzYk1KbnM0enNIOWtOU1duQmhBY1QzT0lLRmlBRi14LXI1WkJCY2FnamlvTWFxM2xWdWx0VldTTS1qdTdwVmR6d1dINmRlV2J1Z01OYVRtQ3g3NHFsZVg4NXV1SFVjaWd2Q1d3VkoyNkJuLWJIckJLRFJjN0hJdzM1UmFPUXNSSXNUcmIxeU02T01iUWxmQWE4Q3dyN3ZlcXktMnBrSkdES0pjTnZOVE5UOHd5bjN4Y1VLVEJlbXRaaXBSZGo2NF9fNWx3Q3lZSEdYT184cWZ2WXhidFVuNnZZUFR1c253TWhMY3ktc2FOT1FSbGFhcjRPeW5mNzRWUXJWSEtRa3Y5M1lwWEJPVUlRSTFCZU9VZnU2Y0YtdFJ5UzY5WlVvYVlCZ3d6YjR3QjZHaVQzSVNEcGFmdDlMcmM5cVVHQXpseWZwQnZmUDBacGVXNGlRQUNRMGY3ckhaUEtFSkhYRlZRLVhNWFJLX2Z6NDMtMkFFbS1ZV1RRdG9XRnFQbXZ1MnFmNHBvSFktNnJhRkRHSnpzVndRejBQWFY5aWo3cmhjNm9USmRxdU9JM0NXNlJjdi1DMWRoOFJpY3V2ZHNPRlVqWl9ZRWpyVjVicWNRWHF5bjVmSWdEQVZiWnZ1cWVHeHUtY0lrdk5JUVd3Sk9IQlBRNGRyRWZGR1A4bU5pY2U5U1BkZ2s3alBxS3BvSGJDbTNENWlpN0lPV1VaMjNobkF2Q1AydmFiVXJOWTBoN0JzbmlUbTJKZHVrWWYxcEIyYVZEbWFyTms4bHZnczNJa0RKM3RrVDl5LUFIWmxZWlB6am41ZEJfbnJuaFIzY3dZb0pNbERzMDF3VVlGYXdab3ZYNS1qOEFvWXFSOGk0eVJvUnJjdHhoZVNjc1dleWhxYi0xTS5QUm9zOGhVUzZWVmJZQW5zVzQzT0t3.FZYAbstHMoeupWAbZtIJXMYe-F2bJmZeh7bOi2oPfDVCncc6e3zYb-GtKsIzKj6skCTw847hSlwDQ18JQduT_6wUD2BYOnilnnc2y6OndxmfUMY4FZYmF67SzLswBCMOoJz6ZlNbhK1RMnR6wC2ddEoCOI9PX5xRBfy5zdwzkjAlHgb1YMLkn7h3QNqwxfOwkx0BK1hh9YqNi46EZ1dTsWQFuGGh0SI6L_PsBuegZdfn70MsjXylpqeAfws1myQrUJjRrtFWTy6Xwx-G8SVTv6l5bIczW5XFWB07Fyk3vDbhhOZOpITa2J7hFbynAdEz67ByrZovpjT4BjYk3qOf4g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (-cvv2) ??? 40010030273" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNE5qYzROVFkxTWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5LkxfRlFRNUFPd05NS2VCemg4b3VvcmVmUHN3bzdoTTQwdTVEY1RTUDVXblowellsQUpmNUpzdFlEeWxRbmpSRHhzQUpQTHZJV3JnOWJPU2gtdzRZZ3E1N09JVktRNmkxc2tMSl96V1kzcHA3NjdSOE00SmgxcmotUlVQUGJqelh2UGJoZHg5SU9FWkZWWU51RjR3WWl4VTVJOGV3TG94NnBxUUNRSllaSUpLSUItbDhxeTFBM1dGZ1VobFFYWHVuNmJmT3REVG9hU04xR09zTHRfdmk3QmhNeXJHS3VHUC1kVHRhaFBzb2hOR3cwbmRXZGhZWlZoWUp3ZHRiWXZkUGstM3BaWURySGlrY1R5X2p0UHN2SVQta0N1djJjakRlc0tUZ0VWQnFXdkctR3luQU9qc1VwRWV6N2pvN3N2VkpxdHVkSnVIX05QUnI5eHZxWlZzazRGUS41d013djZPZVJkX1JiN1JxLms0d09xR2JBb201TGZIa3RQQU9kZHJndnM5QXFSX2xZd2NBLTVsLVRRODVYbXhDYmNvblNNYTFMbEs1VFNUbGJqYlZETWh4UHEtMnZ4VVVRNXNtalZWenRNcDBUTExhZDFVMUtacThfakw5WVU3OGQyUTY4SlAydHdveGo5eS1fbF9Lc1prMmo1SGJGeElwMUE0RGpCYWM0S2FRV05VQmZ0R0xjQl9kYnRUTncwelNmZExmMFlxcjgyeHR4ZjRFU2NPejY0TEtkMTUyWGZOQldGTE9sZ0JUMjBBZ3ZKSnR3UFEzRnlkeU1kUDF4MWZrbDJYSTZtN3M2LTFWbGpNdFIzLVlXbF9lMngtM3lYUVZndlVzM2hmZWQzamxqeWdTWVRZN0QyMVRZVHJjNERwaVl4LUlQeFZmR05aMWE4TzBHWjllLUlmanBIX005UXhRSVpZamwyMHE5SmdjbFNESlpLVWQ1Q1dTRjlOYkVtQjh4V2dRaWF4cTBweHRRQUR5aURiV3NaQ2gxLWdCQXpZa0xrV3BsZm50QmtFV1BRSXFDcFRhMjZ5SUFRSVdHUTdMcGk1UE90UkRiTDV2S0psYXhIdUlobGNKU0FYUVJUdnhvRnhfZ0o2OUR3cTdabk80NzZhWVVoOFRmTHpOeUxrRzJxZ0JSRXRweEloeXVYa3J6V0RKekUtcmpldFN5OTI5VDBLeExETnpqSW5TUnFLazM3UHJCaGVMQ1drbHg5Snp0VWpOaHNtdVBOeG1nVmZkaFYtQ01qMDA3MDNVd0ozR3JoLS05a2FBZ1lGV2RGdVo0Y0xOb2lqZ1ZHR19aOTY1UF8weDNpNk9ONmVnWmpqSFc1ZDg4SEVxZ1ZuT0NCM2ZLem4wVHo4LXQ0d3hGVXJZaTdYV1I3RGdSYkRHbXhPZC1yV01XZ0JHRTNVTFZQU3gzM05jTXpPUThLZ0FWTUFXamFvRmNlejh3NDR0bEdjN0RlR2Nhb0RIdV81VGpla3k2Y25IN3FSMl9mcE8zYTAzU1JVTUdlX1pLcFV3VnphQ0tGamRaLVlPM3pFRE1CU0dKRF9wejE5YXBoeC03MGhhLUs0Ym5DNzRtZV8zWjh5WUF1a3FJdEFaQ3M2eE56a0tMZWppNER2TmplMXNrTldHLXZjY2VZUmtxbTJyRnNmazVqSFRBTjJrTkFCVTFfeVRIbkdqMkdac3lNVVUxaGxNMXZybnpsQjRENTFYNjluT3lQVC1RQ0tmR29NdVRJUG90N1VJRUkxcG9KTU92ZlQtMDRLVmtFUEswQVF0RnRtaWF0OFo1TDIyX2FRc3ctMno1UVZOZmJYNmdfS01LcjE1ZV9OMkxKM0FKampNcklnRFF4bzVCS2otdkFudk1wNFhWcHJoTjJ2UlZMNVVzNmdOUUR0eXFNNmRXeXRDRlNyYmJ5YTFxRjdTSmJ2c1lFUWVkVXg0REQ4SElCRXZjbHVlREFGYzhSd3U1T295ajBMcWlra3lKQjZralpzdVViclNqODRzRlZfRXdyZ1VhWktMSUJROFl0MldsWjdDTjg1MHd6ZnJxWlQ0OHNsS2dqWXVTYnhFNm42QXN5Rm5kejBsTG96NFZpWHNvQnpnTUctSy1QWm4wZkRjbTl2dC12Z21HOWc4cS1JSlZ2dmYwMHZwdGtYbjNEMnEtM09ES2FENzByZUhsRjc2Vk5PSjFSNWhjTFo0aVc4ZU10eUlqOC1fZWphVWR5bjdpYXdpY0dNSGpoUzdCb1d3eXYtZVFWTFZUR0JmN3ducTNKczNCeHViRFBhWU1FSUdPR3ZMLWc5S3RBS3NtZGxPOHltS201NjNEcHdvXzR5SVdabjhBM3F3b29sMXNOamFlVEE5S0YtS1lBRzNRektEamVmRnR3dW9aY01CQ3hQZVNDNTY0VDB0RUo3eENBSHBkUk9SQlp0MU13cG9BdXBVVE9STnlscUJCVm1tOXdiamFSNldnMEVTTTAwMUJyaEpURXBtOUl5UG9rQzlSSlBtYmRXUlJHVDh6Z3ZaSndJQTM0VnJCVEoxalFvZmstWXZna1RSdmpKbTZLY3JnbEJoQUNEYTlTQzgyOUJpT2JkRXZfOGhzUFpCeHhqazRZYWNWa0RiTndWc2J2dEQ2SXR4dGlXdUQ1ZDdSaDFxSWc1Y2ZrcU1zVTV1emE1OURDU0Q2UHhKY1drVDhWZXlmZFktRDJPNU1PTXVxQk5YOXc4UmlSaXViRTJPOUQyM3BIcFlLNmM2bXpsdDhwRlpNb0gwQkxsU2J3Nlg4enVHQXlTTGtaMVJ0UzlkZkxXd19IdUxDTVhKaVpWRzdHeFVaalZ4N3IyQWFlT2g5RTg2dl9lQmk2UXVEU01scFc0Zkx1YlJLaUF2Z0Yxc0pGUTQ2cW5MOFJzQzF6X3Vic1Y3SDlWaTBLeHRhLTAyTXFHSXJSNUdtRFExMXBEWnJ0bUhzcXpUV1h4eEU1a09PR3diXzk4bDVlNk5kdUFfM0EtSXdxaDJGMTJYdjRWdDZpUHhsMVF3eV83enVpTkczSGREYU1Gdk1GckRWLTFHdFplMzJJUzZQVndOYVl3amZiSUc4bVpWN2I5bDRhaXVpckpEejFZQW1TYW5CNjVNSURsVU5JSWZpU2RvRkRCR04xd0pUSXR1TEw2amJ3a0ktZlFYMXUtTEhDWGhEazdpeDQ2MVhIUU1JamIyNFVqT3A0emc1U0dEaW9FMkVEcXZoNEk3ZVdYQWE2dk9ROVoyYXNuamRodmpiMDkwd0FhWmF0UVJzNUVSbGRKQUx3UE5NNjJYc0k2QXZZM0s2emFxdDFDWVlScW5BOWVCNWMyRlBVemlFckdjMmVfSFl2Y201NGxSQjJRVmFUM18yWUFHemJPSW9rQ1MzQm8xdXRFNVAwNy1idFltUmlacTVOdUpyQ1V2TFF2a1NnRVR5d0JjeUVianI5cTh2WlNxZ2dzYk1KbnM0enNIOWtOU1duQmhBY1QzT0lLRmlBRi14LXI1WkJCY2FnamlvTWFxM2xWdWx0VldTTS1qdTdwVmR6d1dINmRlV2J1Z01OYVRtQ3g3NHFsZVg4NXV1SFVjaWd2Q1d3VkoyNkJuLWJIckJLRFJjN0hJdzM1UmFPUXNSSXNUcmIxeU02T01iUWxmQWE4Q3dyN3ZlcXktMnBrSkdES0pjTnZOVE5UOHd5bjN4Y1VLVEJlbXRaaXBSZGo2NF9fNWx3Q3lZSEdYT184cWZ2WXhidFVuNnZZUFR1c253TWhMY3ktc2FOT1FSbGFhcjRPeW5mNzRWUXJWSEtRa3Y5M1lwWEJPVUlRSTFCZU9VZnU2Y0YtdFJ5UzY5WlVvYVlCZ3d6YjR3QjZHaVQzSVNEcGFmdDlMcmM5cVVHQXpseWZwQnZmUDBacGVXNGlRQUNRMGY3ckhaUEtFSkhYRlZRLVhNWFJLX2Z6NDMtMkFFbS1ZV1RRdG9XRnFQbXZ1MnFmNHBvSFktNnJhRkRHSnpzVndRejBQWFY5aWo3cmhjNm9USmRxdU9JM0NXNlJjdi1DMWRoOFJpY3V2ZHNPRlVqWl9ZRWpyVjVicWNRWHF5bjVmSWdEQVZiWnZ1cWVHeHUtY0lrdk5JUVd3Sk9IQlBRNGRyRWZGR1A4bU5pY2U5U1BkZ2s3alBxS3BvSGJDbTNENWlpN0lPV1VaMjNobkF2Q1AydmFiVXJOWTBoN0JzbmlUbTJKZHVrWWYxcEIyYVZEbWFyTms4bHZnczNJa0RKM3RrVDl5LUFIWmxZWlB6am41ZEJfbnJuaFIzY3dZb0pNbERzMDF3VVlGYXdab3ZYNS1qOEFvWXFSOGk0eVJvUnJjdHhoZVNjc1dleWhxYi0xTS5QUm9zOGhVUzZWVmJZQW5zVzQzT0t3.FZYAbstHMoeupWAbZtIJXMYe-F2bJmZeh7bOi2oPfDVCncc6e3zYb-GtKsIzKj6skCTw847hSlwDQ18JQduT_6wUD2BYOnilnnc2y6OndxmfUMY4FZYmF67SzLswBCMOoJz6ZlNbhK1RMnR6wC2ddEoCOI9PX5xRBfy5zdwzkjAlHgb1YMLkn7h3QNqwxfOwkx0BK1hh9YqNi46EZ1dTsWQFuGGh0SI6L_PsBuegZdfn70MsjXylpqeAfws1myQrUJjRrtFWTy6Xwx-G8SVTv6l5bIczW5XFWB07Fyk3vDbhhOZOpITa2J7hFbynAdEz67ByrZovpjT4BjYk3qOf4g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (-cvv2) ??? ABCDEFG123" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNE5qYzROVFkxTWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5LkxfRlFRNUFPd05NS2VCemg4b3VvcmVmUHN3bzdoTTQwdTVEY1RTUDVXblowellsQUpmNUpzdFlEeWxRbmpSRHhzQUpQTHZJV3JnOWJPU2gtdzRZZ3E1N09JVktRNmkxc2tMSl96V1kzcHA3NjdSOE00SmgxcmotUlVQUGJqelh2UGJoZHg5SU9FWkZWWU51RjR3WWl4VTVJOGV3TG94NnBxUUNRSllaSUpLSUItbDhxeTFBM1dGZ1VobFFYWHVuNmJmT3REVG9hU04xR09zTHRfdmk3QmhNeXJHS3VHUC1kVHRhaFBzb2hOR3cwbmRXZGhZWlZoWUp3ZHRiWXZkUGstM3BaWURySGlrY1R5X2p0UHN2SVQta0N1djJjakRlc0tUZ0VWQnFXdkctR3luQU9qc1VwRWV6N2pvN3N2VkpxdHVkSnVIX05QUnI5eHZxWlZzazRGUS41d013djZPZVJkX1JiN1JxLms0d09xR2JBb201TGZIa3RQQU9kZHJndnM5QXFSX2xZd2NBLTVsLVRRODVYbXhDYmNvblNNYTFMbEs1VFNUbGJqYlZETWh4UHEtMnZ4VVVRNXNtalZWenRNcDBUTExhZDFVMUtacThfakw5WVU3OGQyUTY4SlAydHdveGo5eS1fbF9Lc1prMmo1SGJGeElwMUE0RGpCYWM0S2FRV05VQmZ0R0xjQl9kYnRUTncwelNmZExmMFlxcjgyeHR4ZjRFU2NPejY0TEtkMTUyWGZOQldGTE9sZ0JUMjBBZ3ZKSnR3UFEzRnlkeU1kUDF4MWZrbDJYSTZtN3M2LTFWbGpNdFIzLVlXbF9lMngtM3lYUVZndlVzM2hmZWQzamxqeWdTWVRZN0QyMVRZVHJjNERwaVl4LUlQeFZmR05aMWE4TzBHWjllLUlmanBIX005UXhRSVpZamwyMHE5SmdjbFNESlpLVWQ1Q1dTRjlOYkVtQjh4V2dRaWF4cTBweHRRQUR5aURiV3NaQ2gxLWdCQXpZa0xrV3BsZm50QmtFV1BRSXFDcFRhMjZ5SUFRSVdHUTdMcGk1UE90UkRiTDV2S0psYXhIdUlobGNKU0FYUVJUdnhvRnhfZ0o2OUR3cTdabk80NzZhWVVoOFRmTHpOeUxrRzJxZ0JSRXRweEloeXVYa3J6V0RKekUtcmpldFN5OTI5VDBLeExETnpqSW5TUnFLazM3UHJCaGVMQ1drbHg5Snp0VWpOaHNtdVBOeG1nVmZkaFYtQ01qMDA3MDNVd0ozR3JoLS05a2FBZ1lGV2RGdVo0Y0xOb2lqZ1ZHR19aOTY1UF8weDNpNk9ONmVnWmpqSFc1ZDg4SEVxZ1ZuT0NCM2ZLem4wVHo4LXQ0d3hGVXJZaTdYV1I3RGdSYkRHbXhPZC1yV01XZ0JHRTNVTFZQU3gzM05jTXpPUThLZ0FWTUFXamFvRmNlejh3NDR0bEdjN0RlR2Nhb0RIdV81VGpla3k2Y25IN3FSMl9mcE8zYTAzU1JVTUdlX1pLcFV3VnphQ0tGamRaLVlPM3pFRE1CU0dKRF9wejE5YXBoeC03MGhhLUs0Ym5DNzRtZV8zWjh5WUF1a3FJdEFaQ3M2eE56a0tMZWppNER2TmplMXNrTldHLXZjY2VZUmtxbTJyRnNmazVqSFRBTjJrTkFCVTFfeVRIbkdqMkdac3lNVVUxaGxNMXZybnpsQjRENTFYNjluT3lQVC1RQ0tmR29NdVRJUG90N1VJRUkxcG9KTU92ZlQtMDRLVmtFUEswQVF0RnRtaWF0OFo1TDIyX2FRc3ctMno1UVZOZmJYNmdfS01LcjE1ZV9OMkxKM0FKampNcklnRFF4bzVCS2otdkFudk1wNFhWcHJoTjJ2UlZMNVVzNmdOUUR0eXFNNmRXeXRDRlNyYmJ5YTFxRjdTSmJ2c1lFUWVkVXg0REQ4SElCRXZjbHVlREFGYzhSd3U1T295ajBMcWlra3lKQjZralpzdVViclNqODRzRlZfRXdyZ1VhWktMSUJROFl0MldsWjdDTjg1MHd6ZnJxWlQ0OHNsS2dqWXVTYnhFNm42QXN5Rm5kejBsTG96NFZpWHNvQnpnTUctSy1QWm4wZkRjbTl2dC12Z21HOWc4cS1JSlZ2dmYwMHZwdGtYbjNEMnEtM09ES2FENzByZUhsRjc2Vk5PSjFSNWhjTFo0aVc4ZU10eUlqOC1fZWphVWR5bjdpYXdpY0dNSGpoUzdCb1d3eXYtZVFWTFZUR0JmN3ducTNKczNCeHViRFBhWU1FSUdPR3ZMLWc5S3RBS3NtZGxPOHltS201NjNEcHdvXzR5SVdabjhBM3F3b29sMXNOamFlVEE5S0YtS1lBRzNRektEamVmRnR3dW9aY01CQ3hQZVNDNTY0VDB0RUo3eENBSHBkUk9SQlp0MU13cG9BdXBVVE9STnlscUJCVm1tOXdiamFSNldnMEVTTTAwMUJyaEpURXBtOUl5UG9rQzlSSlBtYmRXUlJHVDh6Z3ZaSndJQTM0VnJCVEoxalFvZmstWXZna1RSdmpKbTZLY3JnbEJoQUNEYTlTQzgyOUJpT2JkRXZfOGhzUFpCeHhqazRZYWNWa0RiTndWc2J2dEQ2SXR4dGlXdUQ1ZDdSaDFxSWc1Y2ZrcU1zVTV1emE1OURDU0Q2UHhKY1drVDhWZXlmZFktRDJPNU1PTXVxQk5YOXc4UmlSaXViRTJPOUQyM3BIcFlLNmM2bXpsdDhwRlpNb0gwQkxsU2J3Nlg4enVHQXlTTGtaMVJ0UzlkZkxXd19IdUxDTVhKaVpWRzdHeFVaalZ4N3IyQWFlT2g5RTg2dl9lQmk2UXVEU01scFc0Zkx1YlJLaUF2Z0Yxc0pGUTQ2cW5MOFJzQzF6X3Vic1Y3SDlWaTBLeHRhLTAyTXFHSXJSNUdtRFExMXBEWnJ0bUhzcXpUV1h4eEU1a09PR3diXzk4bDVlNk5kdUFfM0EtSXdxaDJGMTJYdjRWdDZpUHhsMVF3eV83enVpTkczSGREYU1Gdk1GckRWLTFHdFplMzJJUzZQVndOYVl3amZiSUc4bVpWN2I5bDRhaXVpckpEejFZQW1TYW5CNjVNSURsVU5JSWZpU2RvRkRCR04xd0pUSXR1TEw2amJ3a0ktZlFYMXUtTEhDWGhEazdpeDQ2MVhIUU1JamIyNFVqT3A0emc1U0dEaW9FMkVEcXZoNEk3ZVdYQWE2dk9ROVoyYXNuamRodmpiMDkwd0FhWmF0UVJzNUVSbGRKQUx3UE5NNjJYc0k2QXZZM0s2emFxdDFDWVlScW5BOWVCNWMyRlBVemlFckdjMmVfSFl2Y201NGxSQjJRVmFUM18yWUFHemJPSW9rQ1MzQm8xdXRFNVAwNy1idFltUmlacTVOdUpyQ1V2TFF2a1NnRVR5d0JjeUVianI5cTh2WlNxZ2dzYk1KbnM0enNIOWtOU1duQmhBY1QzT0lLRmlBRi14LXI1WkJCY2FnamlvTWFxM2xWdWx0VldTTS1qdTdwVmR6d1dINmRlV2J1Z01OYVRtQ3g3NHFsZVg4NXV1SFVjaWd2Q1d3VkoyNkJuLWJIckJLRFJjN0hJdzM1UmFPUXNSSXNUcmIxeU02T01iUWxmQWE4Q3dyN3ZlcXktMnBrSkdES0pjTnZOVE5UOHd5bjN4Y1VLVEJlbXRaaXBSZGo2NF9fNWx3Q3lZSEdYT184cWZ2WXhidFVuNnZZUFR1c253TWhMY3ktc2FOT1FSbGFhcjRPeW5mNzRWUXJWSEtRa3Y5M1lwWEJPVUlRSTFCZU9VZnU2Y0YtdFJ5UzY5WlVvYVlCZ3d6YjR3QjZHaVQzSVNEcGFmdDlMcmM5cVVHQXpseWZwQnZmUDBacGVXNGlRQUNRMGY3ckhaUEtFSkhYRlZRLVhNWFJLX2Z6NDMtMkFFbS1ZV1RRdG9XRnFQbXZ1MnFmNHBvSFktNnJhRkRHSnpzVndRejBQWFY5aWo3cmhjNm9USmRxdU9JM0NXNlJjdi1DMWRoOFJpY3V2ZHNPRlVqWl9ZRWpyVjVicWNRWHF5bjVmSWdEQVZiWnZ1cWVHeHUtY0lrdk5JUVd3Sk9IQlBRNGRyRWZGR1A4bU5pY2U5U1BkZ2s3alBxS3BvSGJDbTNENWlpN0lPV1VaMjNobkF2Q1AydmFiVXJOWTBoN0JzbmlUbTJKZHVrWWYxcEIyYVZEbWFyTms4bHZnczNJa0RKM3RrVDl5LUFIWmxZWlB6am41ZEJfbnJuaFIzY3dZb0pNbERzMDF3VVlGYXdab3ZYNS1qOEFvWXFSOGk0eVJvUnJjdHhoZVNjc1dleWhxYi0xTS5QUm9zOGhVUzZWVmJZQW5zVzQzT0t3.FZYAbstHMoeupWAbZtIJXMYe-F2bJmZeh7bOi2oPfDVCncc6e3zYb-GtKsIzKj6skCTw847hSlwDQ18JQduT_6wUD2BYOnilnnc2y6OndxmfUMY4FZYmF67SzLswBCMOoJz6ZlNbhK1RMnR6wC2ddEoCOI9PX5xRBfy5zdwzkjAlHgb1YMLkn7h3QNqwxfOwkx0BK1hh9YqNi46EZ1dTsWQFuGGh0SI6L_PsBuegZdfn70MsjXylpqeAfws1myQrUJjRrtFWTy6Xwx-G8SVTv6l5bIczW5XFWB07Fyk3vDbhhOZOpITa2J7hFbynAdEz67ByrZovpjT4BjYk3qOf4g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/ABCDEFG123/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (-cvv2 +eventID) ???" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNE5qYzROVFkxTWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5LkxfRlFRNUFPd05NS2VCemg4b3VvcmVmUHN3bzdoTTQwdTVEY1RTUDVXblowellsQUpmNUpzdFlEeWxRbmpSRHhzQUpQTHZJV3JnOWJPU2gtdzRZZ3E1N09JVktRNmkxc2tMSl96V1kzcHA3NjdSOE00SmgxcmotUlVQUGJqelh2UGJoZHg5SU9FWkZWWU51RjR3WWl4VTVJOGV3TG94NnBxUUNRSllaSUpLSUItbDhxeTFBM1dGZ1VobFFYWHVuNmJmT3REVG9hU04xR09zTHRfdmk3QmhNeXJHS3VHUC1kVHRhaFBzb2hOR3cwbmRXZGhZWlZoWUp3ZHRiWXZkUGstM3BaWURySGlrY1R5X2p0UHN2SVQta0N1djJjakRlc0tUZ0VWQnFXdkctR3luQU9qc1VwRWV6N2pvN3N2VkpxdHVkSnVIX05QUnI5eHZxWlZzazRGUS41d013djZPZVJkX1JiN1JxLms0d09xR2JBb201TGZIa3RQQU9kZHJndnM5QXFSX2xZd2NBLTVsLVRRODVYbXhDYmNvblNNYTFMbEs1VFNUbGJqYlZETWh4UHEtMnZ4VVVRNXNtalZWenRNcDBUTExhZDFVMUtacThfakw5WVU3OGQyUTY4SlAydHdveGo5eS1fbF9Lc1prMmo1SGJGeElwMUE0RGpCYWM0S2FRV05VQmZ0R0xjQl9kYnRUTncwelNmZExmMFlxcjgyeHR4ZjRFU2NPejY0TEtkMTUyWGZOQldGTE9sZ0JUMjBBZ3ZKSnR3UFEzRnlkeU1kUDF4MWZrbDJYSTZtN3M2LTFWbGpNdFIzLVlXbF9lMngtM3lYUVZndlVzM2hmZWQzamxqeWdTWVRZN0QyMVRZVHJjNERwaVl4LUlQeFZmR05aMWE4TzBHWjllLUlmanBIX005UXhRSVpZamwyMHE5SmdjbFNESlpLVWQ1Q1dTRjlOYkVtQjh4V2dRaWF4cTBweHRRQUR5aURiV3NaQ2gxLWdCQXpZa0xrV3BsZm50QmtFV1BRSXFDcFRhMjZ5SUFRSVdHUTdMcGk1UE90UkRiTDV2S0psYXhIdUlobGNKU0FYUVJUdnhvRnhfZ0o2OUR3cTdabk80NzZhWVVoOFRmTHpOeUxrRzJxZ0JSRXRweEloeXVYa3J6V0RKekUtcmpldFN5OTI5VDBLeExETnpqSW5TUnFLazM3UHJCaGVMQ1drbHg5Snp0VWpOaHNtdVBOeG1nVmZkaFYtQ01qMDA3MDNVd0ozR3JoLS05a2FBZ1lGV2RGdVo0Y0xOb2lqZ1ZHR19aOTY1UF8weDNpNk9ONmVnWmpqSFc1ZDg4SEVxZ1ZuT0NCM2ZLem4wVHo4LXQ0d3hGVXJZaTdYV1I3RGdSYkRHbXhPZC1yV01XZ0JHRTNVTFZQU3gzM05jTXpPUThLZ0FWTUFXamFvRmNlejh3NDR0bEdjN0RlR2Nhb0RIdV81VGpla3k2Y25IN3FSMl9mcE8zYTAzU1JVTUdlX1pLcFV3VnphQ0tGamRaLVlPM3pFRE1CU0dKRF9wejE5YXBoeC03MGhhLUs0Ym5DNzRtZV8zWjh5WUF1a3FJdEFaQ3M2eE56a0tMZWppNER2TmplMXNrTldHLXZjY2VZUmtxbTJyRnNmazVqSFRBTjJrTkFCVTFfeVRIbkdqMkdac3lNVVUxaGxNMXZybnpsQjRENTFYNjluT3lQVC1RQ0tmR29NdVRJUG90N1VJRUkxcG9KTU92ZlQtMDRLVmtFUEswQVF0RnRtaWF0OFo1TDIyX2FRc3ctMno1UVZOZmJYNmdfS01LcjE1ZV9OMkxKM0FKampNcklnRFF4bzVCS2otdkFudk1wNFhWcHJoTjJ2UlZMNVVzNmdOUUR0eXFNNmRXeXRDRlNyYmJ5YTFxRjdTSmJ2c1lFUWVkVXg0REQ4SElCRXZjbHVlREFGYzhSd3U1T295ajBMcWlra3lKQjZralpzdVViclNqODRzRlZfRXdyZ1VhWktMSUJROFl0MldsWjdDTjg1MHd6ZnJxWlQ0OHNsS2dqWXVTYnhFNm42QXN5Rm5kejBsTG96NFZpWHNvQnpnTUctSy1QWm4wZkRjbTl2dC12Z21HOWc4cS1JSlZ2dmYwMHZwdGtYbjNEMnEtM09ES2FENzByZUhsRjc2Vk5PSjFSNWhjTFo0aVc4ZU10eUlqOC1fZWphVWR5bjdpYXdpY0dNSGpoUzdCb1d3eXYtZVFWTFZUR0JmN3ducTNKczNCeHViRFBhWU1FSUdPR3ZMLWc5S3RBS3NtZGxPOHltS201NjNEcHdvXzR5SVdabjhBM3F3b29sMXNOamFlVEE5S0YtS1lBRzNRektEamVmRnR3dW9aY01CQ3hQZVNDNTY0VDB0RUo3eENBSHBkUk9SQlp0MU13cG9BdXBVVE9STnlscUJCVm1tOXdiamFSNldnMEVTTTAwMUJyaEpURXBtOUl5UG9rQzlSSlBtYmRXUlJHVDh6Z3ZaSndJQTM0VnJCVEoxalFvZmstWXZna1RSdmpKbTZLY3JnbEJoQUNEYTlTQzgyOUJpT2JkRXZfOGhzUFpCeHhqazRZYWNWa0RiTndWc2J2dEQ2SXR4dGlXdUQ1ZDdSaDFxSWc1Y2ZrcU1zVTV1emE1OURDU0Q2UHhKY1drVDhWZXlmZFktRDJPNU1PTXVxQk5YOXc4UmlSaXViRTJPOUQyM3BIcFlLNmM2bXpsdDhwRlpNb0gwQkxsU2J3Nlg4enVHQXlTTGtaMVJ0UzlkZkxXd19IdUxDTVhKaVpWRzdHeFVaalZ4N3IyQWFlT2g5RTg2dl9lQmk2UXVEU01scFc0Zkx1YlJLaUF2Z0Yxc0pGUTQ2cW5MOFJzQzF6X3Vic1Y3SDlWaTBLeHRhLTAyTXFHSXJSNUdtRFExMXBEWnJ0bUhzcXpUV1h4eEU1a09PR3diXzk4bDVlNk5kdUFfM0EtSXdxaDJGMTJYdjRWdDZpUHhsMVF3eV83enVpTkczSGREYU1Gdk1GckRWLTFHdFplMzJJUzZQVndOYVl3amZiSUc4bVpWN2I5bDRhaXVpckpEejFZQW1TYW5CNjVNSURsVU5JSWZpU2RvRkRCR04xd0pUSXR1TEw2amJ3a0ktZlFYMXUtTEhDWGhEazdpeDQ2MVhIUU1JamIyNFVqT3A0emc1U0dEaW9FMkVEcXZoNEk3ZVdYQWE2dk9ROVoyYXNuamRodmpiMDkwd0FhWmF0UVJzNUVSbGRKQUx3UE5NNjJYc0k2QXZZM0s2emFxdDFDWVlScW5BOWVCNWMyRlBVemlFckdjMmVfSFl2Y201NGxSQjJRVmFUM18yWUFHemJPSW9rQ1MzQm8xdXRFNVAwNy1idFltUmlacTVOdUpyQ1V2TFF2a1NnRVR5d0JjeUVianI5cTh2WlNxZ2dzYk1KbnM0enNIOWtOU1duQmhBY1QzT0lLRmlBRi14LXI1WkJCY2FnamlvTWFxM2xWdWx0VldTTS1qdTdwVmR6d1dINmRlV2J1Z01OYVRtQ3g3NHFsZVg4NXV1SFVjaWd2Q1d3VkoyNkJuLWJIckJLRFJjN0hJdzM1UmFPUXNSSXNUcmIxeU02T01iUWxmQWE4Q3dyN3ZlcXktMnBrSkdES0pjTnZOVE5UOHd5bjN4Y1VLVEJlbXRaaXBSZGo2NF9fNWx3Q3lZSEdYT184cWZ2WXhidFVuNnZZUFR1c253TWhMY3ktc2FOT1FSbGFhcjRPeW5mNzRWUXJWSEtRa3Y5M1lwWEJPVUlRSTFCZU9VZnU2Y0YtdFJ5UzY5WlVvYVlCZ3d6YjR3QjZHaVQzSVNEcGFmdDlMcmM5cVVHQXpseWZwQnZmUDBacGVXNGlRQUNRMGY3ckhaUEtFSkhYRlZRLVhNWFJLX2Z6NDMtMkFFbS1ZV1RRdG9XRnFQbXZ1MnFmNHBvSFktNnJhRkRHSnpzVndRejBQWFY5aWo3cmhjNm9USmRxdU9JM0NXNlJjdi1DMWRoOFJpY3V2ZHNPRlVqWl9ZRWpyVjVicWNRWHF5bjVmSWdEQVZiWnZ1cWVHeHUtY0lrdk5JUVd3Sk9IQlBRNGRyRWZGR1A4bU5pY2U5U1BkZ2s3alBxS3BvSGJDbTNENWlpN0lPV1VaMjNobkF2Q1AydmFiVXJOWTBoN0JzbmlUbTJKZHVrWWYxcEIyYVZEbWFyTms4bHZnczNJa0RKM3RrVDl5LUFIWmxZWlB6am41ZEJfbnJuaFIzY3dZb0pNbERzMDF3VVlGYXdab3ZYNS1qOEFvWXFSOGk0eVJvUnJjdHhoZVNjc1dleWhxYi0xTS5QUm9zOGhVUzZWVmJZQW5zVzQzT0t3.FZYAbstHMoeupWAbZtIJXMYe-F2bJmZeh7bOi2oPfDVCncc6e3zYb-GtKsIzKj6skCTw847hSlwDQ18JQduT_6wUD2BYOnilnnc2y6OndxmfUMY4FZYmF67SzLswBCMOoJz6ZlNbhK1RMnR6wC2ddEoCOI9PX5xRBfy5zdwzkjAlHgb1YMLkn7h3QNqwxfOwkx0BK1hh9YqNi46EZ1dTsWQFuGGh0SI6L_PsBuegZdfn70MsjXylpqeAfws1myQrUJjRrtFWTy6Xwx-G8SVTv6l5bIczW5XFWB07Fyk3vDbhhOZOpITa2J7hFbynAdEz67ByrZovpjT4BjYk3qOf4g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning?eventID=ffffffff-ffff-ffff-ffff-ffffffffffff</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (-cvv2 +eventID) Forbidden" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNE5qYzROVFkxTWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5LkxfRlFRNUFPd05NS2VCemg4b3VvcmVmUHN3bzdoTTQwdTVEY1RTUDVXblowellsQUpmNUpzdFlEeWxRbmpSRHhzQUpQTHZJV3JnOWJPU2gtdzRZZ3E1N09JVktRNmkxc2tMSl96V1kzcHA3NjdSOE00SmgxcmotUlVQUGJqelh2UGJoZHg5SU9FWkZWWU51RjR3WWl4VTVJOGV3TG94NnBxUUNRSllaSUpLSUItbDhxeTFBM1dGZ1VobFFYWHVuNmJmT3REVG9hU04xR09zTHRfdmk3QmhNeXJHS3VHUC1kVHRhaFBzb2hOR3cwbmRXZGhZWlZoWUp3ZHRiWXZkUGstM3BaWURySGlrY1R5X2p0UHN2SVQta0N1djJjakRlc0tUZ0VWQnFXdkctR3luQU9qc1VwRWV6N2pvN3N2VkpxdHVkSnVIX05QUnI5eHZxWlZzazRGUS41d013djZPZVJkX1JiN1JxLms0d09xR2JBb201TGZIa3RQQU9kZHJndnM5QXFSX2xZd2NBLTVsLVRRODVYbXhDYmNvblNNYTFMbEs1VFNUbGJqYlZETWh4UHEtMnZ4VVVRNXNtalZWenRNcDBUTExhZDFVMUtacThfakw5WVU3OGQyUTY4SlAydHdveGo5eS1fbF9Lc1prMmo1SGJGeElwMUE0RGpCYWM0S2FRV05VQmZ0R0xjQl9kYnRUTncwelNmZExmMFlxcjgyeHR4ZjRFU2NPejY0TEtkMTUyWGZOQldGTE9sZ0JUMjBBZ3ZKSnR3UFEzRnlkeU1kUDF4MWZrbDJYSTZtN3M2LTFWbGpNdFIzLVlXbF9lMngtM3lYUVZndlVzM2hmZWQzamxqeWdTWVRZN0QyMVRZVHJjNERwaVl4LUlQeFZmR05aMWE4TzBHWjllLUlmanBIX005UXhRSVpZamwyMHE5SmdjbFNESlpLVWQ1Q1dTRjlOYkVtQjh4V2dRaWF4cTBweHRRQUR5aURiV3NaQ2gxLWdCQXpZa0xrV3BsZm50QmtFV1BRSXFDcFRhMjZ5SUFRSVdHUTdMcGk1UE90UkRiTDV2S0psYXhIdUlobGNKU0FYUVJUdnhvRnhfZ0o2OUR3cTdabk80NzZhWVVoOFRmTHpOeUxrRzJxZ0JSRXRweEloeXVYa3J6V0RKekUtcmpldFN5OTI5VDBLeExETnpqSW5TUnFLazM3UHJCaGVMQ1drbHg5Snp0VWpOaHNtdVBOeG1nVmZkaFYtQ01qMDA3MDNVd0ozR3JoLS05a2FBZ1lGV2RGdVo0Y0xOb2lqZ1ZHR19aOTY1UF8weDNpNk9ONmVnWmpqSFc1ZDg4SEVxZ1ZuT0NCM2ZLem4wVHo4LXQ0d3hGVXJZaTdYV1I3RGdSYkRHbXhPZC1yV01XZ0JHRTNVTFZQU3gzM05jTXpPUThLZ0FWTUFXamFvRmNlejh3NDR0bEdjN0RlR2Nhb0RIdV81VGpla3k2Y25IN3FSMl9mcE8zYTAzU1JVTUdlX1pLcFV3VnphQ0tGamRaLVlPM3pFRE1CU0dKRF9wejE5YXBoeC03MGhhLUs0Ym5DNzRtZV8zWjh5WUF1a3FJdEFaQ3M2eE56a0tMZWppNER2TmplMXNrTldHLXZjY2VZUmtxbTJyRnNmazVqSFRBTjJrTkFCVTFfeVRIbkdqMkdac3lNVVUxaGxNMXZybnpsQjRENTFYNjluT3lQVC1RQ0tmR29NdVRJUG90N1VJRUkxcG9KTU92ZlQtMDRLVmtFUEswQVF0RnRtaWF0OFo1TDIyX2FRc3ctMno1UVZOZmJYNmdfS01LcjE1ZV9OMkxKM0FKampNcklnRFF4bzVCS2otdkFudk1wNFhWcHJoTjJ2UlZMNVVzNmdOUUR0eXFNNmRXeXRDRlNyYmJ5YTFxRjdTSmJ2c1lFUWVkVXg0REQ4SElCRXZjbHVlREFGYzhSd3U1T295ajBMcWlra3lKQjZralpzdVViclNqODRzRlZfRXdyZ1VhWktMSUJROFl0MldsWjdDTjg1MHd6ZnJxWlQ0OHNsS2dqWXVTYnhFNm42QXN5Rm5kejBsTG96NFZpWHNvQnpnTUctSy1QWm4wZkRjbTl2dC12Z21HOWc4cS1JSlZ2dmYwMHZwdGtYbjNEMnEtM09ES2FENzByZUhsRjc2Vk5PSjFSNWhjTFo0aVc4ZU10eUlqOC1fZWphVWR5bjdpYXdpY0dNSGpoUzdCb1d3eXYtZVFWTFZUR0JmN3ducTNKczNCeHViRFBhWU1FSUdPR3ZMLWc5S3RBS3NtZGxPOHltS201NjNEcHdvXzR5SVdabjhBM3F3b29sMXNOamFlVEE5S0YtS1lBRzNRektEamVmRnR3dW9aY01CQ3hQZVNDNTY0VDB0RUo3eENBSHBkUk9SQlp0MU13cG9BdXBVVE9STnlscUJCVm1tOXdiamFSNldnMEVTTTAwMUJyaEpURXBtOUl5UG9rQzlSSlBtYmRXUlJHVDh6Z3ZaSndJQTM0VnJCVEoxalFvZmstWXZna1RSdmpKbTZLY3JnbEJoQUNEYTlTQzgyOUJpT2JkRXZfOGhzUFpCeHhqazRZYWNWa0RiTndWc2J2dEQ2SXR4dGlXdUQ1ZDdSaDFxSWc1Y2ZrcU1zVTV1emE1OURDU0Q2UHhKY1drVDhWZXlmZFktRDJPNU1PTXVxQk5YOXc4UmlSaXViRTJPOUQyM3BIcFlLNmM2bXpsdDhwRlpNb0gwQkxsU2J3Nlg4enVHQXlTTGtaMVJ0UzlkZkxXd19IdUxDTVhKaVpWRzdHeFVaalZ4N3IyQWFlT2g5RTg2dl9lQmk2UXVEU01scFc0Zkx1YlJLaUF2Z0Yxc0pGUTQ2cW5MOFJzQzF6X3Vic1Y3SDlWaTBLeHRhLTAyTXFHSXJSNUdtRFExMXBEWnJ0bUhzcXpUV1h4eEU1a09PR3diXzk4bDVlNk5kdUFfM0EtSXdxaDJGMTJYdjRWdDZpUHhsMVF3eV83enVpTkczSGREYU1Gdk1GckRWLTFHdFplMzJJUzZQVndOYVl3amZiSUc4bVpWN2I5bDRhaXVpckpEejFZQW1TYW5CNjVNSURsVU5JSWZpU2RvRkRCR04xd0pUSXR1TEw2amJ3a0ktZlFYMXUtTEhDWGhEazdpeDQ2MVhIUU1JamIyNFVqT3A0emc1U0dEaW9FMkVEcXZoNEk3ZVdYQWE2dk9ROVoyYXNuamRodmpiMDkwd0FhWmF0UVJzNUVSbGRKQUx3UE5NNjJYc0k2QXZZM0s2emFxdDFDWVlScW5BOWVCNWMyRlBVemlFckdjMmVfSFl2Y201NGxSQjJRVmFUM18yWUFHemJPSW9rQ1MzQm8xdXRFNVAwNy1idFltUmlacTVOdUpyQ1V2TFF2a1NnRVR5d0JjeUVianI5cTh2WlNxZ2dzYk1KbnM0enNIOWtOU1duQmhBY1QzT0lLRmlBRi14LXI1WkJCY2FnamlvTWFxM2xWdWx0VldTTS1qdTdwVmR6d1dINmRlV2J1Z01OYVRtQ3g3NHFsZVg4NXV1SFVjaWd2Q1d3VkoyNkJuLWJIckJLRFJjN0hJdzM1UmFPUXNSSXNUcmIxeU02T01iUWxmQWE4Q3dyN3ZlcXktMnBrSkdES0pjTnZOVE5UOHd5bjN4Y1VLVEJlbXRaaXBSZGo2NF9fNWx3Q3lZSEdYT184cWZ2WXhidFVuNnZZUFR1c253TWhMY3ktc2FOT1FSbGFhcjRPeW5mNzRWUXJWSEtRa3Y5M1lwWEJPVUlRSTFCZU9VZnU2Y0YtdFJ5UzY5WlVvYVlCZ3d6YjR3QjZHaVQzSVNEcGFmdDlMcmM5cVVHQXpseWZwQnZmUDBacGVXNGlRQUNRMGY3ckhaUEtFSkhYRlZRLVhNWFJLX2Z6NDMtMkFFbS1ZV1RRdG9XRnFQbXZ1MnFmNHBvSFktNnJhRkRHSnpzVndRejBQWFY5aWo3cmhjNm9USmRxdU9JM0NXNlJjdi1DMWRoOFJpY3V2ZHNPRlVqWl9ZRWpyVjVicWNRWHF5bjVmSWdEQVZiWnZ1cWVHeHUtY0lrdk5JUVd3Sk9IQlBRNGRyRWZGR1A4bU5pY2U5U1BkZ2s3alBxS3BvSGJDbTNENWlpN0lPV1VaMjNobkF2Q1AydmFiVXJOWTBoN0JzbmlUbTJKZHVrWWYxcEIyYVZEbWFyTms4bHZnczNJa0RKM3RrVDl5LUFIWmxZWlB6am41ZEJfbnJuaFIzY3dZb0pNbERzMDF3VVlGYXdab3ZYNS1qOEFvWXFSOGk0eVJvUnJjdHhoZVNjc1dleWhxYi0xTS5QUm9zOGhVUzZWVmJZQW5zVzQzT0t3.FZYAbstHMoeupWAbZtIJXMYe-F2bJmZeh7bOi2oPfDVCncc6e3zYb-GtKsIzKj6skCTw847hSlwDQ18JQduT_6wUD2BYOnilnnc2y6OndxmfUMY4FZYmF67SzLswBCMOoJz6ZlNbhK1RMnR6wC2ddEoCOI9PX5xRBfy5zdwzkjAlHgb1YMLkn7h3QNqwxfOwkx0BK1hh9YqNi46EZ1dTsWQFuGGh0SI6L_PsBuegZdfn70MsjXylpqeAfws1myQrUJjRrtFWTy6Xwx-G8SVTv6l5bIczW5XFWB07Fyk3vDbhhOZOpITa2J7hFbynAdEz67ByrZovpjT4BjYk3qOf4g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010077056/tokens/DNITHE000302000000000001/approveProvisioning?eventID=ffffffff-ffff-ffff-ffff-ffffffffffff</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (+cvv2  -tokenInfo.token)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;token&quot;: &quot;&quot;,&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmxub3duISEhIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM01EQXlOakkyTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LlpiNnJfZS1ncWpGNFo3cEhjc0JsQ0lVdi1yMlh5Qzk2Szl0NFRfWER2VW5aMXVMT0F2ckd0cTBNVFpPTTAzczRfaGNFRGNHRDZyVEdLQXBkNEdPSmt6bDZVNWplVFotNFNQZURmWGpQZ3N2SENlWl9iQ1k1OEZwdVlKMVJaYmZiQjhxd3I1eGJvSHhJZDBjVVV4M29teFJYSE1RRFFScjM0MFZUaFpJSU80anJBa2ljV25sMk1sZzIwSG91TTZxVFBwb0JzTllKb0RaZkp6R1YyNTloWEVFa0dnOXNoZTdWMngwbHBjSGhYUVRwcWZpX0pYZjdTQ1BtbDZYLVlIN2h1enRxNmZxLWVlS1hRYmFGZjhOYkFQVWRmY1lSTEZyYXp1NnRQa2t5NTV0QndVNzlEbGFaRVJFUlcyWnZPSm01d1A5NGMzTUFEcF9uUU45ZU40Q1hDdy5kMmxwV3BfYVc1QXdlSVpQLjQwX3ZyQTFWQ0xnSW9qM2hNNnRldDhxazVQbVlZT2JjQ3Rfb3h2X1g4QzJQRFdJU1hDb3E4RktwZWhjaFI3d09lR0tPcGpzNmZIWDVrbndsbHJJYXBQVDFEZmg1SmEydy1zV2doWnlZSFhULVhkUFVmeXF1NTd1anBvaFR1cVlNWHktaTNFWWlqb09PdTdtUFFhbUtRUUp4a09NWmRkZm5raVN3NVY5bjhvQU5pbjhMc2VXZEZjZTg1RmVCV0dGRnB3MXNZby1PeVUtSnJmRkl6SEUtSEgtZExEbUxRTUtacHJYcEc2Y3g3WlpNbkIzMWx3SVJCeTJTZ2JPUHFISnhnNmg3S2NNOW5XMTc4TVJrajRRX2ZXVmdnbDVrUnZ0NDg5RVFoV2MtcElBeURoNWNMdzB0cGYxR3RJMzBGcWpDMGszLTZURXlPdXNKN2JaQ01TYW9ndVVSaENySWs4ZW5LdmpNWTZia0RaVkZCbjNpN2N4LXp5SmlabVN4Q2g0Nk5JdHowQ1dmcklSMlRIZGlxQU5TLVIzYXdobVpFeFRJa3BxVkZyeGk1VXBWcG1ZRkxYUHNMRGRpOW1HY0U2YzFCN1lXUmd3cDNKbjBIcjJBMUNYa2d4ckNjQ3NxLVUzLWhYQjRIekpWOHJ4U0pMZjhKTGpmZDRFMUF2RmVSWmJTZzRPQy1pbW9mY044Sk1Ob0FZWDFrTi1qQlZQYUpqNVVuemxnUkJWaGpRdk13M3YzQzZjRU5Rd0ItdnFlX0lSeEhDSU52MTVlSjhYX3I0c2sxeXVnWnlHR1VQMGtLT0VwWUFmdFRkcDdwMGVVU0hCODU3MHhxdFpyMGFmeDB6YWlTcFh4aWNEb3VJemN2cFpKWFhaYzRxVGNzTWszMGVFYjBMV0ZmQWtLcllpTUtkd2VhQnhtR2hBVFlJd21yZ3IybWxmS0tHcWV3eE14d3N6RDZ5MXpQM1g5ekRydkp1UDJZMjl3a0dTWG9vaG8tLUNsaXFXZmtrZjdieGlvN2x0UkNZczhUUm1lRjY3MWYwTmpNTzhLbUs5XzU1UU9IUHd4bnZSeXhqWFVYZFlVTFl6ZkVUdmRULXpkeDlzTkNLNTkyX2tRck9aSE9malBiZ01ld2tIT2ZDWHprNDAzbFBscU5JUm92aXdXbERDT0hQNTA1U3psV19NZVExOGxfemNrRWV1alJIVDA3YzlYRTdiVW5vUWhhZExpdGU4ODljZ3pBamZsbTZGbnRGNHoyWDViaW1TZTRYTWtXX0kyVmdHRmpyRVF4X1BYX01OWDhQTDNqcHZzMTNsdFU3RTVZYlpEZ25NdDczZWRVZGVHSTBfNmZRRmJHc2hhY0JVNWZDRElLWFlBR3lwMVdyTHFHZjFHZllpMWNhV211YXFVNG0tZWFqa3lzc3VsT0VkS2pVYzktQTEySF9EdWxaZ1I1Z1dRNUdwX1g3S2tVYlJLX2VXckU1ZVplSEljaWJSUktWMkc2VExKQUY3ekQ2M2xyUlI0QjRhaEI4VlRxUlFKWGs3dDB3OHRSWXdEbGExaFp3UHl0WFFmN2FhMl9WRjh2QXhKOTJqN1ltaFZYZm5sZm5ycjRJVFZ5R0JPSkpuTC0tMGE3VENZdk4yRVh1dWtNUlpKX3o1Y3Z3dGxzOG13blVkUm5oNFhnam1EYktCTzFnUGxBdzBHQ2pnNjQ4elI2V0NtZkQ0VFNNdlF2Mld1dENwSWozSlA4OGdtSHJ6M254QjY2ekxTQVhodGpHdXJ2OXFNZ1NOSWVnU2JBNjUwRVZoSFVaUmVBY1dSRmJZaXFycXRMdmdWUGJDX3NRZHE0OEZUU3hKSzBxS1lyMjJsLXM4eUxsTGhReUNiYjJZVXhfaC0wbWxqQ1Y2OU5HOVlZMk5ITDQ3Y0l2Xzc1b3lXLllIa0Z6QVNZQkNMaUlTTlFNNjZMU0E.VVD3ySH6B9YNIwU3r30-RQVAVBObzP93Ws8tufAf_zb-VPS_65oIpL6EsXdwrAE_g4Mf3JHPwqnC33L4HB7CrviTxOrfMiAAYLic0L_V64gN7SbCgvm7iuxcduLBk64hWpL5NHgl6kAu84_dP64yAyxVT_ONUctVlct_YI2AdCh-uLZ1mmOYaTgfLSnsSecp5z1pjNA-17Pp-CcfX4LvymjmQHrOO36Bse3LawDPvRjC1g-4dbqdwSgBJ0z3fCeQD5sW25uNDl0WRUQpaClprRL7UVO1-zUkGPOwAUcweTywS0sgHjlIWBY2CwgvG85hmCjQ0Ch6MabB_eRsp0vy9g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = YELLOW )   RiskInformation ??" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTFOREUxTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5DMnRMSG9zN3Vfdm1WNmJzN2VCU0lRRjNjbExoWjFzT2k5RFdkaC1HbWFYRFFNT1VHOGo1SFBNbmEyTnROT1BnMENwNm5MakRKVWJ5cWJZZkdJLVhEUG1MRGhRQ2NocUZTQ1hlS1gwRnJuSENLYzY3MS1xc0Rqb3NWZUp1M3NaNXRXM1dHZy16MEpxOEotb3Y5SG51X2p2ZkQyMmM2QXZUXzlMS251NkhZZ2hIS3lLNmhfOVVwYWtkMllReEhyZy1aYTFwWUt4VmVIRy1SOTgwRVhYd0NhVFlwa0QtS1BLX3RwRUFib0hCWGhkcl9JUjVaSXk5TzNEcFpMYVN4ZWowVkppSTFvTEE5NEVVQ0oyYllta2JiYUliVnB0WHk2ZU9rYWdfakFab0N0MGlsNW4tM2ZUV3JDQVQyd1Y4eExGRElFZ3VGR1RmN1QyT1JpeU5oaFlhdncudElrOUlSWmFUVmFMR3JsWi5ZeHhRZlpIcUo2RmJDZ2ZQdzN4bVlNSmg5bDYya1RDWnpOeUtjb1VtRm82S0NncEVOZXozZVFBX3ppd0NtaVBlUWVwc1dLVkZCSnBfQXQxdkZBLXY1U1J0X3U4VldfUldEX3Fta2FydUlROTZoSmFXSEJ0c2xJRk9jTDRSVVM0UXNia0pMNUhyX3hoUzhNeVJjMDhPX1hNM3VkU3RPMkIxVkw0dk54cFpIZjBseFB3eFBLV3B2ZlZSdTFNa0psY1J3QWdlRnlTQzdKRkEtWFdtbk5oSDJWajFYMlVSR3dTaXBpckRTZkdObERsYW52QmtpMUQwUWxQbFVqNXNQTDRoaDVNX3hOSGcydUhTdkhmdXgzVjhFTDFSWlZsQWhCWlJMaHd2ZFFMVzNfYmNIOU9BN1Zvc3pDd205WDhXNkZuUXh3ZkE4aC1lVU5TRXFHODRBLUE4RUE3akEyMEpCaUFWVzNKUnZvR19wajd2RUN3WWNfNTVCWTdlNDNlMVU0NE5BdW11bUNiTm4weDd3WEJIMFMxRlR6SV9Rd09veTdKQm1BandsX2NaMC1BSWh4Y21SbEctYmRra3VVcGVtSi1ocVRPU0RGQkpuVlpQSHUyalpERDEwOUZCd3hDdFR4dmpXUHhoTDhHbGlJLXBvbjJCZDZ0YTFIU1p1akdXaDRSbjF4MW83X2JlVUd3dmRoRUJpdUVQN29EcWRRYktab1BuUDVpd2h0djNOalYtT25DMVE4eHhUTWZ2dnBGVU1CbjVoU2RGb0JyOGN6VXpwWmFKMTRGWWZDMW5OWFNrUGtwaTFWaTF4MFdaR3M1RU1GbnBfdHlWZzRDVmlFMHdvUFFzYVQwUU5paHBucUhqT2xRRUFUSkdTYWoyejZsc0R3LUhGbElGcVJzWXEzaU1kV3dmY3ZUY0JYWDFIbzRwTmVfVFN6ekxUTFFoZVZOZ2d0WU8xZ3NLaERxZ0x4dGZGQTVzTDZWeWc2bDZaT1lLbk1Ga3U1cUtTeF82STF6SXpWWjBUOEc3Y1hlR3RhVEQ2LUFfOEVtTkVseWlkNmRtVEVMc2h3c2ZvT3JvU1ZPN1hDVXFfWXUxVEtYWURESndOSjlPLWhaNjhCWVYyckZhM2xHRE82SjlqNWNwbm9tOUtDMl9YYU9mMGlDdGg4M3lIR2V1M1NVdmZ6M1ZWZ2d4NllUcTBMdUNwbFRiNjZiQjVVZGNUdDMtWF9XMk1Ed2R6OWVLTE1QUUJWd3A5V2E0WmppU2FUNFhjOEtoNExURkxESTlPMUVyY3daZTNVUm1UcEZkbUxkYmljaUpfN0lMVmhVMkdZTDRBUGM4UWF0SmVGSWcyVl8tN1pVZ0ZBRlBsc29icGw4Wnd4dG9VajR6NXBENkNhY0x0VEVITlZrTHVXeHVKdkEyR3NCbGVPQXN4UmxPcE5WMHNyX0NRaEljX3JXMFVvbHpCSU53ZW9WRl93TVMzb1F0b1BseVN3THBaY1NiQWR5aWlibW5hUGlWRW11NXVid05TX2h3U1NfSExIeEN5MWVfbC1FRWNUdDhqZ19pbk03TGo3M2Rsd3U4MWRWV0xvX1JVTzYxQTZNMk9WUnQ0RHV5cnlPRVhwa2tYMW5iakNzT3lLUE1TMklIVk5KcEoxMXlKVjlBVlVQTWtWY2tGUnpzZURkRTVoSHMyWkNKMXBRRHZJaW9DbFVHRFRnUUdrNmw3VTA1VlVHZnRFU3d3U25DWVFNRFZ4Y3UySlg5Mi0wRkJKc3ExckttU0ZnbzR1aGk4bC0tUG41STZvaXVMUFpoNFpET0ZkVld6Sm4zSEhJMTVVN19Xd0hIMExBR1VmdDN6SHBFOEJDY3RmSENJQXVLWng0cTZFcVpPUmQzNHExYTNNdFQ4ZVpXSWF5c3psLXhWLUl1VldDS1VvcThpMHlJXzVjS1VMcmNWakJwcmFZeU5keFdlUUw5cVZjWmpWY29ZYUVrVGN6bVp2ZFJqUS5MbnMwX2Z3UW1KdXBCSnJKWVhvOU1n.qPZuB-zYE6sHGN6yiWzAHA50ur2z8KCcXkgrvGDpmc5FsarxL28ThyOeKCZgvNCHu4TzHbT8iygUfr9rCcVINl-kNC2tc6lQK5ZiTfvOQlU9rf7hQ2mPguwg1nDd5mcP4QAAUUctpi98n8PBkqTl4gID6GTOS9PKpl4qWiETxNgEwHcaZ0xPTgvt7WDEtHAjQ4BvYAo674uX0FCszt93LNU63EBrxpuG0qzuZeDJMaItKQX75T_LLfpK7No82AC6-sCNc4Gub3dTf92EHPyvwBHbQhStMnsiTeUxXLMvtrq6sD0DKP-N6KAWI9a0v4PnjQA1DEvQuSb1-XolCflkJw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = YELLOW )   RiskInformation --" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTFORE01TlN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS51QV9rNkd5OF9kQU1yTXNZcEVRdWlIRWtoclJTbWJkSDFVN2dubVE1S1pTQzFWd182OGltRTZmNmFvUldSZVJnQnlVVkR3Qi1KMDlYSHZPT2FUZ0Q3b2dCalFseFhDLXhhNHFTR2V4bnd0S0MwRmc2TG1MOE1NY2VaSjZreWFlQmtTMHFlR19jdjRlcWFLcGVXY1N2bTJYNzV1MXRUUmRmSlBjVWNadk8tdnVUS2NHNWtQVjJrRWZrMFVBQzU0Y0Z6cWtRTjNhc1dGaXhBQ2o0LW5JdFFqS1E1NHRfaExqX2hsWm1kSG1sMHhjNmIwV3RLazNTTzc4UjZEdlFlOHJPQVgxdjdicWJ4LVpYd2RqSHNOb3J3Z0o2U3d5YWx4b3RzMkZPZEhtZmlxYW1lRU9xV3k3OG5iaDY5UklDakxLS2FsaWEtTUhORHJHQlF2ajQwamJSSHcueS1LbTVabzJZalpyZktkWC40R1N3aFpReEgtanE5d1FTTG1LdWF5em1Zc1RzVGxBVWVLTnJDQUNRTjRTV3hGX3NyVkRVVEltenRFbnNpbm05ZXNmNWxxXzRaU0F2N3BtZFQ3U3Vaa29NTkp2anp3V043dW85MVl2ZW1tNUllSnlNSFVnV1ZFb0NlRS1oVUZJZFBpSVJWaXcwZ1R2RG1RWWF4LU1lWkNMM242a0lSS1pHdUJGSjRSZDkwWWQzTWpLWDY4ZDVZajhVMFp5QUhxc01jcDgyMDgtRVZzOXlCWWREeWk2MzI0bUZrLW1fZkFiOW02aENOSlNGZHFpMWY5UEhCSllzYWxBTHBsVi0wMmdYVzRmOW1vN1EwcHlkLU1xZ3FFVmZMYjZCNGRnUFl0V3R5bUNRNzVhc0tFZWxPWFZldUZob0RsbDV5d1RjNjU0amNOLTBSRG9vdDdURzdYdVJPbEFoLXgxT0hjUW1vZDFjaEpfTDVCTVdJenJ6SlRPWjFzaGxrRkN1QkRjTXZzQThJQVByVGtwMUtRQU9CME80UnB1Zy00YW5uY2NTY0hVa3pOUGFGTUxHeWFQSnlteEtCTHhSdWtqV19fMFQzaEJUM0hHa0lIOUh0TFpJZ0R4YTBsUXJJWGYwZld4cm83eVMtMS01ZkZ1TWtlVUdoLTZtd0E1a0RjYjgwaDJPVFNneW9tZjVkZXpqTnc3NmY0MFpFN0NhbFJmdkhabnFRODRQeGE0d0dOcVhacEVnd0VpczdXVUtHbktTV05VemtNc0ZjdVRnMUJ0UHVnNGJIUlFSQWFLM1lNWFRIcmlXMzFjOHRlQ2p6OTktMzdfWTczbEJwenFHNEUwTDNuRGlMa0djdTlmZTg3S2t0VUJQTy03dkhydGRJcGlTM19OejFjZ2FHOEVJc2tYRE5lTXJyNjlhSGJDeWQtR3FraVoyN0tFbnJSMVpFbV9FSTBNVFFxWkR4bE4zem5oWXE5cnhrT1lxVDkwazMtMVdnRG43bGpteXlxRjVwakZaNXhOUms3eUpfR0ZXQ1pMZEoyZENnUVJJaTZnWmZLZHh1b3FwTkYtNW1FdVVkcVFBMWRDVU9wRTVQcVh6VWdmY3JFTFhYX25VajhBMVNEWjlianRMSW9vRllCLU1GdjdXRXp2dVp5WU1zeDA2MjJlUDdJaWp3XzduRnMzQ004RFZ4YXE0YmpZblZYTXFZM29IQWcyeUY2bzFoclk0ekJ3Xy1xRjA2UnJPWHZ4WlgyWkUwd2twT194TkxhR0FLRmZNcXdTanNEaGo3U0tNUHEzVXcwS1ItVEhuemNTNHJWMlZVMTVUZXdqNzR1dU1XWnhHUVdaSGxJNG5INVR0TGJiNXU0dXlrYmloNG5oc0dJNHN0eUxRWklPWVFwYlFJeVlNTFhqaXI3TENVOHN5cEM0a25nLWRKT3BWWmlxaENDM0pNZGdyOFNtUVNaTkphZE9pN0lMNUx3M1U4UnBnWnRGQ09lcFRRbkpkOWI2bFgxVWtrWnVicXVqV3JJT0hrdm5lbmFMdklpblJibXZTejI4RjZrN19WelJFNkw1cld0c25USWV0a29OZGFILU1xdGRSNFAxb1VjMDM2SmdNXzB3TzA2VXBBR3piLUY0WXhybU5NenNiLUJGWHFqUkpoYjdhYkhBQjdRSVctaGJuczFjdWkwbmRHdVpMQ3loQ2dRYXI3djQ3b2pLM2hHTFlWb2NPVlR5bWFYZl82MGZjLTkwM3RKckVfcm1SYUdnTXVvSTBxbUdORHB1V1JkY2xRRDhqRm00bDRaUmtGZTFpUm5SN08ybnVDZnREbTNNQlAycnpwbGxnOEJZdDFEbHFZOWFkTFZSMGFDXzBmS19NZ1VvbkhhZ2hmYVhieDhxRVA4NGpzZkJ3X1NuanVwdmRDZWgyX2FuejBZekw0MEJ5bHBLbTJBZy1YbnBWSEk3bnpkVzQ3Zm9ISWt6eXhqT0hCeGItc29waDNYUjNuQ3ZSZC1XaG4zMjNkWjhqZWYtVTRIWlVUTmpaSURIbXh1ODY0Sm8uRV9YdEtHQkhRa0hieXpCVWgzNzVBQQ.rPyygMqp1h1b__9cm1y78DrAP1QPXMv7nvdPFlOtx422p7jjurBCnbgYODFb0L18eHRiFxeRR9cBbKiNT3HlujBQsvSvPk_39CkNKph12DOpMO6z35wjShf_7Zue1pwsp_5ql8TDLnypA5TYeWfPcO3KTJ7RKipGwfjm7lrcAy8tEj_GQSqiKx5378bQZY9R2hEhX0GRR7YzWL8b-8FV2iJwa4ey89hWzKAozFAhozX6Z-ic0Lgu_0PhZLNj6A4CRWOnnXTu8EV1VU1f8OMYzoAAb1e44Fc4rnzTzXHUDHa-tPiSuLJPi86fW_-uqiftKFhcSZH12DOCqLTAKpAo5w&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = RED )   walletProviderRiskAssessment == 2 &amp; walletProviderReasonCodes не содержит 0G &amp; walletProviderDeviceScore != 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTFPVGsyTWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5odVFDNVFjV0FVSDJlRmt4UDJ3U0RJZUMydmhzcVhyeS1adnBGMEpDTFBvUm5OVGJzSkg2Z0JmMjlTWjQxZDQ5d2M3N2dEZ21KUnc1d2NiNnVTUlU4M2JKNHhIR29VQndDVjRnaXBQbnhWT1pYTUhzV1dxSFgxdVBlbDdDRGliWUh4bDNGOHdhdGZPUGRlTlJWel83S0dEa2pRWVJCVFlJVXROdkdFVVlkdFdzT0pHaVZqTHBjRE14QzFkTURiRHp0NXdocHNac2J6NnBWdkJwQUVUdlo3ZWlMS1VZdEFWZVg5aWxoOTgzOEpaU1AyMTJpQlJxM0gzSW1XNnYtbDF6d1JrSG9YYmdOV1E4TmI3bmlaTlNZS2tSNC1mbEVMUkg2Vk4tTzBqbnNGcUVJenZ2UGFUOUZiN0pFc21EQ1hMVm9NanFCQlYwMkZUY2FUQTZ3d1dhTncuOG9jWlF2b3Q1RURqbDVBTy5nNWtTX0ppalBWZHZEOE5kUDlSLW9NRzZZMHYtcDVIel84TjZFT3Z1STk3T3VObWR5QmwxS3VRQW9fVC1YN0psN2tNZ2VlOTBKdDVva2FqNzdGQ1Jlb0ZYUkdsOU9uZlpPLXdEUTFhOFZzVDNFaXZ0Y01Za2lmNjVRVjJ5TjF2dW5OR19OYzZ2aHhac2lZeWlvT19VOG1RcUp5UFExbUZrNTcydklONzZoVmNOeVQtVDl4c09qeTNtWklDeFZFUDlfYlJUdnVKd0RucG9ZVDEtRjRkbWxLUFRBMmJlMTZjcHZnb3NNbjU0a3RmSktmWFNpdEpwczVZSVV6dFdiaXJSR0FYQXlfUU5lYl8tMDNtT0FIM1pfMnN2ZUduTVNOemZLMGlKaXpkOFhkaF9RZUJ4SFNLWUlQdWh5YnoyUlVpcFFTUTVBNzBWazA2OVlBRDlxQWVzYk1oQm1nMnFrYzlUMlpLX3YteG1Hekl3QlVQMWtlZG9qVy02SUlqcVlDM3RBQWVVWGtOa215UzZ0NXVkazRXU0NNejY1eDlfVE1TNTVvTng3THltQlZKaXRaQUxaQVZ4M2NJYzlfS0lYV28zMUMtYnZlQWVhLTlWcEhqaEM5ZjNlWG9xODd0WlVaVGdCM3NpUmcxNFRFejR6Tnl3OXl0VjhhOXBGYWpVNzFJRTh1a2tmS1ktM1dCdUo2UFlXQXlIeXBGcXd4ZUdxUUlyYVM4VDJYUVpFQWE0bFhmT2NEcTdha0U1NGJGR09xQ1N0Z2pfZUZ1Nl9xX2tLT0FDR2x2QWdXNzFlbURGeWpCdmpKa2pmeEwwNUczYk50bHZjR3hLaUt3cmNRMHRIbG13RGdvRDlnR0pVcTlnZkJIQmRGRWctSERZMGNraEJGekZGZmMzLWRoOFJlZUxvd1FSd1oyZHNQeEI5OU5NRHBQeGpuSnZhYS1udTEtTGhidkNxNzlEdXlDNXIwd3lkVm9VZHdQMjRrMVUzUkZpZzJYclg2UnhLcmhXamVBVzZqQ0JZYVVSZnBWeVpod1c1Mzh0Z05SQ3U1S1hscXJOWDZtR2I2bFJ0RHMyQXRhcE5mRU9EM3FWRE9TWm5QWGx2UUd5ZW1pQk5EbGw0VUFaemRObVFmNEJ3YkxyUlo4dEpxc3NJUlVFMTNzQklscG5Cc3JLUlVCRUNuNUVLejc4MG41TmxlREpwZ3YyVmVrNU5lVHRISzlXcW4xSGYtRUN2VDVEMnNra2w1WTFEWkw3YUgtYkdjSGMxSGNHQmFLOTRVN0MtSFAwN1JIWG9uVzVNR2pjRjNtbnktZ2p4cDZkN2FkbjRHbmx4S1h1VjJqSnJMSjM0bDJJdFBmM3VEak1hQUhZVkdMNGZrQzRYNXFtcThJWjNlVEdvU19md0xlVlp1SFh2SnJpR2tIODQyT05ma3pWUkhEZDZfSUl1UVd6bElGV21vdlhkRU1aZkxYYUpsbDZBMVZpeW9nRHZWeVlFWG9LM1Jkamh3S3d5Y0VpZFE4NzhyV3ZfX0NHUHV4bmVXYnBEVFMzbWpXd0pzcmllMTM5THdnSXZhdmtMWTI5bFFiTWh5R29BQnNLN3FPRVBULXRGSjZyR3NTcmNIR1JRbXpsd2FRYkZYN2l1Q1I0bmRJVFhVNVBiV1JkZDE1UWxlTzVQZUtPVHBYdDdfTmRsVHkxcTRUemRFd1hwbllKT2lJMlhMX0IyeUlJVFl0MTFPbUUxYy1ZSDBHMkFYUFRXLV9ja0lqb0V3M0ZaVUE0SjJEcWh6cE40N08zRmlvWHV2NkpDN0ZIS2VIdTJENXpVb2lCREZDbnYzelg2Tm9EWnJVbW5MLVh5WmRkV1lYMDhqcWVsZFNqTGJFcXh2SWVlNUlaRTFoNDBFTl9PY0c4MnlhWExENnJDbXlDdlZCNkF3VXJpNWZnVU14QzB5bVZvY25iMmlzX2VFdUFBWjY2RTlLdnE0Wmd2by1IU2ZvVnV4cHR5amcxMm9VZlBfRi1Pbk5JcTdBaFlQQUpVTU1HZXNpTHpyQkpkY1Z6c2NGdC1mS2VCWHZxeDBSSmFyaElYenFuUEhlQnpEb0lIOWJ4OXRhYTZ4dmFmNVBiU1I0TmROQlc2TTBMYmZfVGxPbl9QQ0ZDaF95SGxmTENRV2pGVzRUXzUxQVVwTnlzVTdjMXloR2w2WTNxWVRSU1hYZXJILWc1Rk9JZV9CZ3ZhdXBQUVpVYlh6QmlkOGhNaW8tVzBPczFNZFJ3RjdGVFFBRzNZWTlDOHI0QVh2LU1xd2VtczlDSlFJcXZJV3h0eU9lS0xucEZERWxQakcteVF5M0JPZkNKd2FDNkttM1pyYzMyakZTeVd6X1psazRxa1Vpbm5pYjE0OEo5T05Sd0pNTVJUS0F4OF9vZU1IY2g5a1hLR3hudTF1WndxS0tpcmpnYllWOV9RX0xRMm42TmxJcEpxd2ZjYTh5LTBIT0lZSHNLS1JfN1B2QThubkw3WVZVMTItRExXX2wwV3Mwb0RaMzJZSndLcFE5TW5sV0M1ZDJrOEpMN0tlQlpoMzFDLWl1T09WazF5SGJJZE9vSWE2R19YSjZNbnpmRjZvRm1kbE5RTU4tckNjNloxQWMzbi1xb0FjbjF2akNFOEF2aXI1VEFDbTR3cEJMNEhBUnRhMFFUd2FFQ0RFT2FOVlg5dXZkOGFKZ3JsZzdHWldza2t1aHpVM0pIYjk5aXBGYXR4WkhmMXp2WEtSYk1VLTFFYmdHSS01TE14dnRpazByQm01WHVLV3FLMGt3emtZVlFrZV81bG1JUjM5dnVWZXNGa0oxRVV6UUxHRUJjLV81MkVRRl9YWlVPdXZNWmstUnJxLU41dEY1RUQ3Q3Z4c0w2RHoxb1p0aTEzT3h4V1FjU20zTXZ5Rmd3czZjTTFuaTZMUXRFVHVSZjhOT1BqWW9zV29yOHJCcC14Z3liS0RRd1h6WEhvbGM3M3BmZHpmV3dtcWhCbG94NVdaS2lkcTk4cUVlREFOWTEwNE5QbXpKSTlfbjRFY2lUWFQ1NF9lcnBYbEowWWE5aDRGVlpsS1liQnA2OVhQTlhBLUVQVU11SjhmVk1HejdFdWZxc0FhRlNNQXRDc2RtY0JRbWFRbmZYdUlXYXBOVXRKNTcwN2lSZjkzTGdKOVJpdWxsZzVuWDhnWVF6aVVMZ3l6cnRMX0VfUXV3WXdsWUk5Z1BMQzNoeXVkXzMtSGVQT2gzcklXQU1saklmVVFwWWl2dlV2d0ZUQ2dOQ2pBcHdKRFk3d3NIcTJCTTVzMkcxWGtyeURNVDI1ZzNucjIwVW9LZ1FqNHBCT3NDd1FSSy0zemNWcVN3Tk0tcjdEbGZwWG5IUmY3UEZIQ0E5czlBXzRMWkZtTFpfSWg5VW10dFJPcWdndV83ZnRPWEFlUkFucVRvRFFDOC1Xc2FucWZPZHRWYmdKMVFJdXRfYnQ3UmtyeGxpLXJNQU1jSGtURVZpUjVLdUpUZG1kTHdaMUs4VGJDZ1paR3ZublZlNS1VNWtIdVlhb0ZCQUQ3MHhCMDlnVlZKb29KTjQwcld4RThOcU41TVhRR09ycXB2RnF5RmdGSFJPWkZNTlo4MVU1OWtSUnA1OExSbzZnemdPX0wtVE1rVlZfY3VxVlNoU2hQbS1ZajBWWkNWa1ZFZFY0U3RHUEFNc1puaWVXTHhlcjhoa2NmTXVVd2M4S3R5T3JtSjBGcmFZNmtqallHRzgtSWNEb0k0cS1JVjI3UWhZN19SUU9lMFE0dlVjdlhYUjBQT2FzbU5GZDhoeTZCTVdVMm1WU2YwX1NnZ3B3NFpnTVNYT1NiVkM0XzFNV1JIUWVjejk5bzQuRnhZOU1ubWl1SWQ4cm5iN19aelFZZw.H7q8JVfdr1rcs4vAdJIvx0be8mX6xfWspAj24e8zOYtpQkicHDapKr6zLDzy2ZOoWmGlRni8ixtqdUKqj9e1s18QG6sHis6fC43wjlseAvrWVmvHDMSR8NuZtYV4taIMGImD9gwAabO0kKGgEaH39lBUQTOhs3DgF1sufxUa86dU0enu59aUeUs4uxgmBM9t8x6Aod2zIHYEZO0_BvZ1G-WWaBoMQ8LH6UsdMtfC8gikClFzOVolPjpOZ3UIjXcuXoSOobUf4ADfG7DaqW-Q0GY8IU6d7L_OXP14Uy6d2Uq-CSiLapfkBrQ8hEbcmenJ9IUhYOqjQzGCreoIX6lpcg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = RED )   walletProviderRiskAssessment == 2 &amp; walletProviderReasonCodes  содержит 0G &amp; walletProviderDeviceScore != 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTJNRFV6Tnl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5sdklOU3I5TU1maHh5RENFbm5HY29oS0pDbmZRZU8wTnhaQ3ZDV2VvWjJTdl9ZMVVWTWZhTkZiYmh0ZEFtaEpJckV1cExrX1pfaGc5Tm5ZZkdzenNzeWhLN0gwQnNyckxWSWJmN3o3bnNGOGdpMXp5YUVFbG1ZUVJzc0R0aGlYWlNOdDIzLVRpR2hpRzllaDBZd0M0ZTQ0aVJ2OEZZeU45Mm1qVmVYemQxWmtxUHYtTXhoV1AwQ1FCbHpsU09lS0dORmhvU2d0T2dsNGwxaUttMEMtVUxtdF84X1BMT3Nnc0pPM3doU1lRaFFHUzJiQWNfYWE4RnIta1pkU2pzQWdYUUN1b1hQZi1Uc0lma01iT1hTU2lfZ1dERlZTWDA4YzFqZ2FiWVcxTlBfYWR0SWQ4aVhGbFJVR05ra3JvajEyZmlYVTZxeXNkOHVLR2hIbmdrYllRdmcuTWdVQXdLZy1pV2x5MUhaMS5scWJTc1pBOXN5a2toZVo3aTZaV3Q4bWdvV2hBQTF6VS1Ub1Vfek9ZcV9wQ192SUFkbERJTVlJN1MwZW9ScFRwV0RiY3VLNXdZTXVDYXBGSXlRZXVCUmFVWmFCR2Q2QkRYUWo2OHBLTHozbjMxd3RzWUM2N1BWaU9DQzVPYk5qcUlJVDVVRGJMTUVFdmhtOHhaR2J5WGRqUzc0QXI4WE5RbzRJTFBxYVZmNmtZZFBmU21UdEVoZ3JDUDNhZktVckNRb2NDVzAxNGxDLXM0VHRlX0x0UVRMaWZTeE1KM3NOQVFIQlREOVNNSENfLUd6OWUxWWR1T2NHWlJ4T01PRy11dTJHYlY0bV9maldoRUw3OFZ3NVI3R3p3TkxQRVJXMjFFV0NhUGtiSTRJZmhDLWI0OTJON29NNG5CM0VDX2wtWDJuNkNERU5VV00xRllGNTFaYm9OTWpjZGdBVi1jUWVaVzFlNE0zNm5MWm9od2d6VVdUZzE2X2JBY1JvUFZVQXNFeDRDSTFOQll6RzEySXNKQ05CQ0RGSl9MenQ1c2JDLUpiZ1R2TV9WQ1BnUlM1TnZQNE1FMzl5SjlKc0U5R0ZFSHVUekVKMTA3RkJ1NjZZZTN4d0pxY2g2TVNUcUxUZWQ1SE5BSjVVMGcyTHlIX2h1ZlFhYnFfUDJ1TG1oSU1obHBEYmREWGZQTlJKQjFMWThLa0lwVEowYjJqamJCeHNDOVo0Y2s2OWt3UXFIaVVzanFZdHRMd0lGNktiY2lScDExTWE1ZXRvRUZESFpRZ3lvWEI4UGVZVXR6NTlNaGJSMEM0ZUxwWVVpTnc1Qk5ZanFPSmxDVHhyQk9TTjdIWk9Db1hlZmNTUENTd0ZKMmdFcmJYc1U2RHlmQWVLcVg5ajIwRUFRM0lZbmwwWDNMV0NoRG52RFBWTzNneGlxX1lOeGV0NkRPZHpNTkZrMTBjck1hcU5aNzBPN0xoWmtmSFlEaHd2amZMUWxKdXJRWHVETExIajRoNjNHclFnWHZYQWxudWFNR1hSU2lyejI1RzdGSXRWX2F2U0RtcV9jNXJ4cU9wNVd2WFJJOXRMLVF0LVNtQ1htUENfdDVJWWxkVEdiMW5FdG5rcDdzMXEzQXdXYWttV1FuUG1nOGw4UFV0ZG50Q252U1BlUVBDLTNVZzUyT0ZVLXZWVldGeDRjcUo1V0w4SS1ucWZRd1NMNDdBTGM0SzI0ZHlTbUd4MEhFbm10V1czWl8xbFZUMlR4Sm90ZFV6RTBPVmR0Vjk2d0gyYWtRelk4aWNLSnczNE9hVVZNTmlLajRLTUlLWVFMV1JXSW9fY3h2S3FNQVpPU0xEYTJkNjZ6UzlKWWYtdm01bFM5SXh2R2QwVEFPdnE0bUdiNUZrdEQ1dVV2eUxlWXU2T3BrQnh0bVpQZEhwdVRDTElhZ0xFRXB1bW9jQ0N3UngwZWswMWxLM3ZLZ21La3dLSW9wMTRxOFBNWExQRHB4a1pVZ2pVVFFUcVk2UzIzMWhzajVYdUhreW9EWDFDMDJCVkZLYTZFVXhwa1JDOHlueGpBUi1Zc2YtenJUMkVTTW9XMWhZTFN0MDVkTE1KS2NBWjZKY3RDdEVVVU9WSElJODJxaVItZ1lFOFBGWFpNRkd6bXZCdUo2Z09nazB3ekRYWHBYWERTQ2dqMWpqaFFZMWIxdUdTWVp1RzYyV0xBRFFWa0sxUmFIWjNlV2Z3Q0loaFB0VTVKWXRlTDZ2NkU2bC1uLVNueDE1ODJOSHlSMUhSWHlSTTR2b1lhczdoYlkxRFZkUUFMTTdydjBnWklQbU1LU1lQLXQ5Ukw1OEZYc3ZaczZubnVlWEF5VlZSX1gwbFJQRTNjUy1oM0hZbjlnYmdzUDlzODVXSW5wa2JDYWYwWjlTUWNpV3pqVU5IckhTUGNDUUxFVTBBNklnWUE2ODlub1NsRzBnUGJrUC05Sjd6VmtWS00tX2NwSjFDVENiVFlKbkRQbXdrQUxVWkttRkQ3Wmp2NmI3Z0dwekphMmRhbHJCVzdXMXR6ZjhJWVpkODRIQzdWcHVqMElDWTNIbHNYV1ZaY3lySWJwcjRJSm5CUzl5bzRvSm5MZVVDYnNaQml0MjJjSDNKeDhJUXMxS3Q1dFpLX1V4RTRTNEI4TG9BVXdZQzhfMDJLR2Q4c0ZwakRiWjJ1VTZMdE4wLXRicmE4YVlwY3A5a3liR0M1aDF2RnhDSElaRTEwNEpFQVpfVWVFTlNHbF9scURhNElibktOdWM1V0Y4UHU3anl0LWcxZ2gyeWwzRFNHRU5vVm5oV295eUh2cXBCLVpQM3dGMTdmVWNiVlBXcmZ1aDZ1aDBkZDlyVlV4cUdmYlo5bUxrdWZzNl9mWURvblVFNlFNVVFEYXIzZXRNbnNEeW53Q3hIYTc2Y1M3R1NKd09QNU5PSDlVSEhYMUwxamwzYlRETmVYdlVXT3oyVm1vdThXT1JjaE1DVld0Y2FmTW80T0Z0cWNsdkI0TEZVVVp6YzlJdUMwSjgtbFNveC15UnV6MEZISWdOYVpZV3VMZGt3aTBUY2Y1aVF2VWw2VjFBWGZ4VjVfcXhkWUxJWm5BOFhTV0FzOWxxallLekNxZmZxbDJoUjBkZmhSSmtoTTh2clgtQmZ2RVJtS2RSLXN1QTk3WUduRjNiWkRyYVB2R3Atajg1TW5YWEMxOC1Db204MlgyT19jNVdCSGVuQVdINER1LVoyRXRsamVoSDJPbTlsTzF0cnJrTkxiYlNwNjFHSkl2LWNjeUs5TFhZX3FjOWNiUWwycnRhbUY4aG5pb2VWX0pDMkJRY1gxRXVIVmZ6Q2UxSkc1QThKVU5IUnBKZ0piaU1kcmZ1T3VwSWJ6SWdZVEZ6SjRWTkRZcjJXb1UteTZVbFQ3b2NWOTE2RVF3QTJUd2dUekQ2ZnZIZTlabk16Q05KNHowbmtEN05SUDZBdTlKNXVyOUVRODV5eVY0Tk9TQ3prS08zTUhFM3hrY0toaVFobV9fRmZJTGdlTTg3Z2JtMDFCbmtEbklsUmhVWERreVdXdFRUNTFqV1pRczBfN2xneDgzNThVMy1IVnFURkstd2czZ3JlSmxIRVotbmhORng2OGJkdEhaclQ5OGRXdVRzVnhYV3VtZ01FazZUS1RWc3h0R295ZXpOUXh0TGdjMTJYeEc5LWIwQ1F4bUowNlkxa2RZQmJ3aUhmcHYxeGI1VWdVSDVWbnhsZGZac3hCVGpHZGJZTzMybnFWWFZIb3dQaVMwVkNfLVpFSjFkblk2UWRJX1dxcjlUSF9rUmp0ZEFYa0Y2dENmLXNGeExDSE40OVN4dVVtdlZfenMyZE5QRTZSRHc3cFFFMTFZX1hLMkpFakExWEZUZk5oZDVlSUs0V1UzWmM2N3hZMU0tcm96WDZROVZKRk9KaWNCWVdMODd0b0NJWkNua2J6WWpkTlkyb2g2dVozUWdkdUJDVHNYYnRSQWJWZGZkN1A5YlktU1VqaFp4ZVdQWmlHR2RJMWFaR0ZLNENBdDBOS1hOQXRjWEViQkFQTGQ2YnBUN0VuY200YnBnYmdhWTZVUUdlNTFYLWgyYUl6THRyM2FvOWxtX2RGbnh5ZEs4czVYb01nZ2xSNktWS092R25ERkE4bUZtYzdwOEFxdzFMbzV3dmdpUDZ6VmV2UWhRVmkyUlFSNzYyT3JrMUJTeGV0VkNUMXRYUURCeDI2VkhDUTVmQnAxbHlia21jcFdwQ0lLVTc4WnpaSDAtNEQ4Rk1VTjNUTXZROXRYZzBYVHM0X0dJYU1DWGtaQTljNkNzcGxoMWI5STdEWWhCY2R1S3l4RnNlYUpkUVhrX3psUlJrLktGUFFGcTRSSU9PMXpvWDlSVHBIMlE.nWHjmMPm1nxfaCNiW4HDo27ktfq1ZdQYsyjzF-s2t6dbJF-VdSQtJoLwg4sAER_Q3c-9N8lYZFVW7kZKUPrXV1-QvSDy-x74FZYrIkyWz43HxLgREtyjHbq6Ei5Gl1RpHjv966sQc34wCNL9WatBYMI_5BMXnA1m4delThCRoGI7BNwtc3upKWgRjUf2QdnSRMJNP3uFIaid0fBMCpJVbsMUpLz8UZVGrPQMgo0D5hZ_CyhEZ4O-G9QcQgvjb_9x5rpGtBkfyVqFv6fd9xjFGUfyr0dAkm9DBcM0mFr1qODr608bO5lDipsuvzrfy1Vb7rnZsXKmxlG4-k1KXwg5iQ&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = ORANGE )   walletProviderRiskAssessment != 2 &amp; walletProviderReasonCodes содержит 0G &amp; walletProviderDeviceScore != 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTJNRGd4Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5NWXNQRzUzQXFXWHZ6RFRBSzN0dGJ3cXZFaUxJQ24zYVRseFduby1KOEE4bFo2ZXBvaldnR3VWdUgyd0RkbmdHcm80OXdFSklvTWFRYkVPcUdoWGpJcGRvWmdsSkdORk9kUjNyR2JUcG5ZTWx3WFZ3Zkg3V2kwZ0JPNzZMaUh2Q2NoZWRBUGJ5Z1dmcXdXQXRlYVJQMzZsaVVtcDJ2dG9tZkw3dDdvNktSN0plUnBkMnlzcEgtZXJ5dlFXQjQyRmNFb0ZPeURPbHFtaEFmZ2RPWnZZaWs2ZVhTcGVFMVhrVHZaQjB5N0UzRmFUSENnZXFlZmhPVDZDQms2V0tBLXJLQmx1Wlp3YXNBMENsZHZCNEFLaWZkZmQ2SDBtZ2lyWGVGNnVQZ1BXaEpIQTZNdGtlZzBCYnlXblVYb052WFk0Zmw3ZEJ3VFJGTHZFdFlLN2t3RWVrZGcueU5qN09HYV9qSWh2U0Y1VC55aXRyRG9xSHhpeDRETllTTjc0ZWJIcVhnTk5jTmF5TUpIM1VSM093bkszRUU4YmxkTmtKOVRENlA1ZmJ1aGo0cjdld2lFelhtVXh4Rm9ERzNyblVwN3RKZUhkVkNpbzA5VmZFdEFNMEVWR2VVV2dUZzJTenZLRVBRZzFhQ29Ob0phNEx3NGh2ejNSdXhXd3ZfZi1VYng2VG8ySDdraTdISVh1aUg2SGlBSmlFXzlXak1ONU8xRkdJdmVzTjdiemJKSlFXTlh3Z0F2eXNweXFmMDRMQVhROWQyMFZQQ3Y3a1pSUW5WLUw3aHNZTWM0WkhDQ0FyT1g3STBVeGtEM2hWcUJhTXVUMXRUNFZ6UzJxOU1KWEZyMGRkUUpTZm5vSWdHd2RXV1FIWUdmNUJaQmE0bjVuMFFmdk41dnR4WkFTbEhFRjNEYkh2LWZYUVc0ejdDNnlCRGlUbG9TTmtoS0h3R2tWeWdiUHlaUHRlLXJFbDRVODJSdUlIUnZPVzNCM3U0blJndHhUMXIwcWNFc29pMmxZQ3ZrVHJ2Q1lzVjFqakhHcVVZTEtDelNpV2lwTmVzTVU3ejVweHhuTXdpQlFza19NZzFrVS15TWljcFlGQm5yQkh2dnpueVdvdWxxUFhqcTFXTHk3TWRVMVFybkRzeVduam90bU0zMVNXRkFnbTJSNVZ5d0VMR0pNOS1GYlBCMUlfTTZLVGN1WUJiU3FuVWZFSXdhbEVxdGZyNTAyeFJkU0dIN09DMmY4bWI1WE43Q0ptOVZEWTJqc1lHX1Bxb2tNZ1dzNHdTLWpxYTd6TW4taVlMYXNLd2NJMlVFTnAtZk51Y1BKSEtDQXlJYVZCSzNfV2c5dG9IZUExS0VLLTdncnNKb1MyZVRxSWJJby1RZjBoMno5LWZOcFhCSEoxSzhMdU9ENHpFdUhFNHdJN1prd3VrM1VVc1MxRG9PMjU0QnRzRkJMWDRPWXRlUG9Sdk1nSXlWdjA1TVVIdmV1WldqSk9KQVJfQ0V5WHo3RFlOdE9LZmJHejUyVXlJTVVpWWptUzR5QlNPaDZtTHBMaHpWa3dYLTl3Y3U4MEJvQkRJbU5JcHNsOTlQVHhyQkh4MFBIekk5RWtXUmF3d00wMFFyY0ItOGMySlA5bWpIYklBSkNMXzZLUXluMWMyb19qNzBPV1N2TEJVTEZtel9TY0JZZjJ0d0RxN0daa1pzNjd6d0VFQlpQZnNsMjlyNU0zNkJkRU9NeG1nNnZSYXZYbGV5WVZLRGlQNkdzc2dkZHBGUC1GNmd0akhLeDhEY2tvOWZiNFVGNW1WcElyUFU1eGg2S2d4bGZPcVVWSkdNbHZWdC1qT0JseV92bkV6U3pZeGIyeW9PajYzY2FnejFERnhsaEJFN185TDE2dldNX3NraXZGSmc5OHM4OHAzekY0LTZSZ3dCcFdLZVFmSWdXWXVMUzFsYXVRb3hkemZRc1dDWE1IV1U5b1NWd0Z1eVBvMFJVYnVwdjctTHJ2cEowcWd4SXJtWGxVQVF2UTduWHVybkh1VDdWUzYtUTFCNWR1VkQ5djhoelFrRm0taVlMZS1uUDZhUnhVaTR0Vk82Tm9jRXpkOUZTTEI1YTZHUEpfcERvY1lIbTFQQkRXUlhPa1Zsakg2TVgtbWlqR2NwVlVySjJ1MWZXSGlielBFNVRLYUdtY0FxU3NsdkZMOVp0T3BZUVF4QzhNX3Myc1J2ZXQzSGhmbFd6YkVUdC1yd2NiWjRzWHJwZ1czTHpoSVJ2cVFXVzZkU0RiRGJGS3habmczQktJbjVyd2p2R2x3OFJvSnhHWGlTeDFzeUh1bzhkLTB0RGJqWFhEN2t2bmV6SkI5d1hVamV1QzJ3ZGZfa1JsdXlLM1F3cjFGejJLMFlONUkzZVhaQmVMOTdkb1l4MlBWeWJmU3g5b2xVV3pvYnM2Y2ZhTURyck91ZFpwc25Dc2p6anMwQ2dReEhkXzZYLW9meDhmeUtRV1ZGTzFaZlZmYXhkb0RSeGd3a3ZPWG5wVy1uM2JfeDlmdXNiMmVYMVF3dU9yU1ZGTF9nLVJNc05zQ2RHYmVFQjhCal85UFVHejEzbjdxcnpjZVZxNTRSX3ZwNEN6UlBZS2xqZmNIUE5uSS1ST1ctbGwyOEZJV1dFWDU4Y1pKcWF6c25tWElfOXNlVkd2akxxWTgxZFNyelN5QkF4S2RkY3EwOTVWcXpOSkZzT3NKak5JMnJuYy1LYUk2RUFYNkdseGNyLUhwTF9pX3Q0Y3JoajRSS1psNVJWSVRDX29xMlZUY1pncXRsb3pDak5DVDZOR0RGcVpubGdIS012VXFXdUhIRmViS3pCV0VMSEFPWXNtUWcySDBGajhDV3VCRXRET3U0TXhYY05rckEwUHcxaUVkQ2U0VE9uQmNEWnBwN21wampyTWxSckt0SmhQZ3l1bjRjX3hGQldYZ0FFaHNzek01eHprNTFDWVZWY0YtUWNORGI4TkhqU3RFWmVUSWh6Z0NfcEhBWkFvUE5uRF9UVGN0N0Q2TEJleEJDaVdjZ0tnU1hneFRSS1hxakFXRWJMRmd1MW5Ea3QzVEswWEtseWFLdTFvLUlwaElUY21JYTVxZ2pYQUJWN1ItMlNZRGs5cDBKTUlTMmRrcUpTaldYMDZIaU15aGJNSjBueXJjVHNidHBqbG02U2pmVDBjVkh2SUkwaFlrbUFtSXJmRUFvdUZrcHNLV1A5V1Buck9xS3FLa05Vb1g1LXFDMGRMSWxmenhxTDlzeTFYVVdGM0lWdnpVeVNDUlA0QjZNdHdVaUlMVlpEc08wQ3ZSMTZqQ1VSaV8ydHA3WWxieWg1LWhRTzJpbzhoSHBVUGNrNHg3VU5BZGk1U0hyejMtQ2J2NGtjQVlKNG5TV2IxQVFKOFotTWs3YWVZMi1NUlNkV0ZtTFhjZE11N0RaQUlCODg0Yy13ZDFRcmp6UDJBb290Wi1kT2wydkVEcG9ERHNLYkQ0WWpMcmdlVzVydmQ4b2tOX0tEZXk4eTZxOW0zZjMxVWEwYVk4WjdLZlVJb0pXUE9WWnVWMy1BTDloZ1BSSG5YZ0V1VUZwaXRlU3czRDMxYkd2em51VTZaby16MXVjS3R1ckhtUDJzLUpPVWNNWjFaSG1zODg0OFR6TkNkMTdUazJOLXBJWnIxajJHU2ZQR2toNGkwY1NGRzFmeVlPX3NQZEVMUGN3ODl5c0k0cWFyczZ4Y29USkd0UWptclBTR2JlNFpQdzVqVUJnNDlKSTRrMmo2MEVnZDdmb0xoR1JWYmo0dUpxZ3BoQkVfVDFQMUl2OE1SbW1lQ0tfdjFVc1JLRTBtb0d2ZU5tMkd6R1pmRVh6a09XMktnQlpGeEFEOGtVZ291MTZqTkRKWWpqLXdjbU01UkF0LVlpbnNhNEtna3NWUnRWVndORjVDZnlxU3hLMExvSnlWR3ZrWkZhRHBYS0kwX1QzaWM2M0VDWl8xM1hKYkJsY1dVNEx2R2dab195SUwwb3lkdmxIMDFRQWUwQUdPaHdOb3lqUk9VZlZOb1VQaDVvR0lYYWk5cy1XWGJ3UllickRPOW1kMGJ6a01IdWRVTUVrOHVrRUxjUDB4THhQQ25LZlpYYmhsZXdvY2dhQ2JSTkpfSlZmeDFtZlpnTUsyMHMtTUNlODdzbjZwX1NBRUN0RnVETTJNVlZWZ2JVYWlGZUZWODdzUzl1YlpvZmU2MUJNTjNhUUdZeEtnNG83TUlJdWZuX2VUcUVZNV9FTkh5T215Ym9IZlMxXzYybmk5QldLb3Z2bVp2Y2hocXNyWUpoQktSOHlKT0h6bXhYUjF4TURPZlg5YVpSSUY5RjNrLkxOakZoTmZXeUlfMnRFVll1VU4tSXc.udAgDfkd5JA7vg1IiprC5qgWHLT8lKZQS759UDgK2twhf7pILl8DtwVhMXMx7W5ueIKLgUBxcjT5A_mudWs4rjAS2CkiOF3JH40bkjQQQA1-JeGB9bsEXf86v58ewxtlpkIl5DaG33TzdZ9SsVK0_gaBi1oFd_RFNvxIvnZAcaHZxFe8S7b88VaJ1atP6CNSRElYloCaSGLKtYVR68IArXKuHnaGDXzPGkKcfjpwYF9PXYBumDeKrThI9p0BTqyKi8picwmd7lzRADEnhEv7x2FR1TotpKtKEypYjSA0kBxM7JffesDh-lqEd4KngLogqzFhUv-ivk5Hj_txXmx-6w&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = ORANGE )   walletProviderRiskAssessment != 2 &amp; walletProviderReasonCodes содержит 0G &amp; walletProviderDeviceScore != 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTJNRGt4TVN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5ROW1vTEg1bzlHS0dKb2Jqbk01QS1TbTZ0WnRFcXRmcjAwVkZFUi1UaFJCMVZsR2VLUWZFMGYtUE9wbGF4SDFQbnN0OFJMSlpyeU9OVThNbDhQVDl1UWVlODE5WFYtMmZWVTVSTGxaYzQ4NTJuUDRTdXUyR0VnOGNEbmdlS1RCWndpVjBtWFNCOVBoaHFLV0RfVUxEUEZWY2czZFNGbnEwRXlXR1hVclJVMUNNNzVlYjIxTXRhLVlMU3JodWRNRXkzZkxpQlpfRFNBZ3QzTWFUUy1pSmttYWhteHBGSVRRLVdORWVBdkp0RmRZVDcxLVVLTnoxZ0lsYV9CZ0xyUXMySWlhcjJlNVFxak1ONEdWMlZVLVk5aXJMLVJ3NjZlNmM4RV9ObGJGQ1FNbEFPU2JVbGlpOWNHUUZYbFVwZGFtTDZ6WHJUbzRKNnFCWUJOWDRnR0ZrRHcuMnFjdTFGWE9YUkxZVjMzTi5wemZHRVlXeUkyc1dMOTBNQ1EtU2ZLaXh5eV9qazJ1c2tRQ0Q1a3V5TF90dlJxWDR1X3BTNS14VjQ0SG9qT3UyVTA2ZTBRY290QTdHTWJKc3lpX3RUeWNoLTVfOUJpVVhXRUhzbE1RMllvSk5TWGdyZWlWWkxIX3ZSZGRwQ1Z3bE03aHg2M2F0Smpmc2RGdW9lVXlsNk53ZndYV3ZoclVjOGxQNEtEb05ubFdKYmsza1piYlFYek9Fc0owWVlIZGVYZ181WG1JZHl5REtQa01neVNBNm56c1JHRWpaaEFCTVNSMHpuT3F4TmtjZXZHTFNONkFkcEp6WnBJVDlVQkdZcmJpb00zOXlwbkY2aG4tZXdJQkhzQmw4LWpYSGdjcEx0MVIzMExDdlYwNjY5ZDg2Qmc2UWc2WEtScGRISjB5bFhiZi0wUUpwUFctV2JEdDVLeVFwM2lFbllGWjA5VjU5N3UyMEgzOWFTMEtMdXRyQXd6VGs0ekxla3ZLZ0lkMHhvWjhaNFdOSnpfQ1VNQ216RXVOUHMyMWJ5alVMVTFiV1dKQUswNTZlR3pzLU00cWxpXzlaRDZIQ3B5QTVXaGNhaDFQS19uYWNVdnR4R1ZscEZ4RUdYUW1wUUc1ek8zajdrazBjRHNNRDdhUlZNOTRaRE5ocUtvODE0dVZyaGdJT2Y1dXBMVWcyajVzalpEUTJyQU1lZHdBWExvMFo4djhWVjZCcXozSTY0LVBSYjlCRzc0V0FWX1FONXdFbkhicmtfUzBjSDlFQm95dmRDTnAxZW1nZ00xRGZreFhRcmFMTW1oSnR2WWFDcjFZM2ZEb3N6anBJOXNlbTlQMUZsVzZrQ0dYNHU0OFh1bUFma2g1S3pidnZUZVNfQk1GaWRPOFdLSEFkVXZBZUtHWUYtbEF3RmJrd0UxT1gxdGJrRTRvVWtHSlVUaHhpd0pKLXdYUFlIblYtbWt5Y3dHTzU2cjBwcFF0OGdqWnpTZ1l2dW1UNkpBcE96aThSOHc5TWVDYlJYTEdnRjFZRjlvaHptd2lWazdCdW8xUDRFTEZMM3Y2Ym9wTVhyMGJCYW54aFJ5MVpPMzEzY3E3ZHZ0SDZaM0RYZHJQSHZpQjQ3bURWU1gzSzZEYjZGckZnbFpaS3dMNjhBcWhGR1NQS1U2STcyM2dxZ3gwU0dBcV96dnZGdXBaanBoZVFiRHhhR09XODA2UFQ0MExZeDRIVW1vX0I3OGwyaVZPZkRqZ2l2al9ySjJDZ3NpV2FiY0dxaTEtVXBkSDZBem5PdVVBSW41VllQX0ZRMVZ1VFE2RUI1V1hhU3FPS0t3b09MT1JxM2NoVmxMNFlFV3h5N0hMazBhZXZaNHJCdDZNZ1VId0F3MExrbXlBejRjdVlXZHNVdDZhM2drLVNNQXM3QjBCbk5Ocjl6Ym5zRjR4UU9yMmpvMlpJUzNaUnFRRFJYeUVqRE4tX2x1OVZwLUtKLWZjLVR0UFAxQU9yc0hxT2RNSXE1NG5jYTBtYWo3elFsX0hseVl6Zk4zaGRzUklSVXlyaHhXVmxjYkM2QWFiaTdJUmtyREczdmVCMV9WMEtvR2dZemNpVi1pNXQ0U0ZPVGxjUm9PcVhqVnJiMlUtVXBaZ1l1VDA0MFRCdkdwRGlTQzVRcGFsa2hrdlFjbjNkWEdxckZQZDBXZDUyM1hrRGEwX2xPU2NfaFgtS1J0dUlucldKQU9OTUFZMi1qRWhSaXdCc1lCZTdRSzFiNXl3WDRzTHoycDgxVXpWcWpJVWNVNllfSkdWM2h3U0JSQy1XTV9IWTFQVWVLcWw1ZTBLNXkwbmlWU2ZYeTBRVGxsc1Y1TS0zeVhpRGtXQlN2d3pjZGtKQTBLY2tnUVJjeG44cFZ4Y1RIM0psa2xscG1yaTJGSWFGZnRPZERIRWNta2hrWk1SMWRXMkRDZHhjUWV4Z0QydnhMNjdlcW9XVkZUZHcxemxrbF80LUVBbUZCVG54ZDBNenFkRlgyekJuTThscm1OMUFUWGhVa1NuZk1IZnNWVFpqWTRRWHo0c3g0ZXI1dGV4MDhZaFpWeWhKQTkwMWVhcERmYUdFSG9PREllU3BGNUcxblRUa3l1cHBxZjVjM3gtNVdwenE4M3JWU0tzRGhiQldOa3o0SDEwSDdlQkxoRnJiRnRmWW55VXhGQU5SMDQyZjFQT3BjdC1RZjhlcUNjNndlM2x6WHRZczlDR0k3cmpzUlpqeVJkMnM3cjNkeDNqcWkteTdEU2poUE1LOGxvZHVGNXFuMDRCS0ZnalFIZVJKd0RNN0tsUm4tWFhOdzZDb3ZERWtIZjZwbDM1ZHhiWEJnVldLSXp2eDJXT25KQ0FoVDYxZ3F2bE51ZFlLbTZSX1NjQmYxakwxZ1BkYk9Oc0twMm96c0dQbGJjNFhUbEg5MXJ1YmEwdGgtVmhiOExDd0k3RS1xRmtQdFU2U1JsTU9xSllVR1ZKWFRjWEtBdG1wWERIUkJOM2hSRDh2ZGhCUEpTMXhwbkxrRTh3S0J1T1JKelhwTnlheXREODZiYXVWdTg5aEJyREprc0VGdnNWekFWRm9GdFc4X3dmNXphbFE5TkNscE1meWNlcDJfRTNieWNNYllaV1ZDT2tzNzBnd3h4M3hPMWdGeEg0VGFSZ1JsaDdSU1plLUN2YmhlSWRoRWtWZ3ZsSjg0Rm5INXI4Q1g2S2c0N3ZvYmtRQkFjS3h2YzY4SHJ3VG81djdXZUl1QVU0OGRYM1RaaTl5OWpYWEcwNjY3Y0FTY2V4dlBNdldjMGluNV8xRTF1cUtiLUllSGpyNXJEbFgzUlFMaFNSTC0wNU9YVG5rZk9LRFlIWU5YMFlyekd5c1FHeHhJOGFGemU1Q0VZd1ZnbGF3S0pvdlJvM0hndWRVYTQ5QkgyUmRZbC0zRFdOSHFsZzVLQndrbnhxRW8xRm5QQXhoVm9RVFpUYTlSRFkyd3RnNlVLOWRyZmpvX3pSRllZSm5iVDduaWU3cmVfM1VIRHJpTDhXX0pMT2Y1LVZreFJWUENrcnNEb2cyVVUzeWhwZUVPSXg1TGdPZUhhN3NuMmlweWN6LXpEdmN3ZWVvb2NWUlp1U3FtVy1GOUF5LUN2Wi1KX1hmQ2t3eFY3Tmx5MzFXdlJwcGdRTEhiZzN2VktGWHZnSC1JUjlUcWFUeVhnZFpMb2xIOWlFcmhKTExfNDdZRTZxUURsdlBoNFdXREUyaktVbXByUmZYTHRaaG5kcTVRZ2tIWWlXNTdVcW42VmphM2FsRGxfalZKYk1pTnZiWnhuTVRnekgwRUFmWHlnbUoxaE5yVU5jMEZGbVdnb0NIUkJnQnZ2STFhU0NsUlF3dWZvbDRzek1uNm1SWDg1YWJZWkFXQTcwVEFwWWFKaWFJOTIxYWFuakEwcVJ5eEZfdDdLVlhzdFBjd21PM0VVMXpSNEYtRUhpR3NkZ0s2VkloaEE1aTdNRGh5cHp5a2ZFakp5UUtmOGVxb09kdnRVLUlSN2NGOWpJUjNBT3huY2JXcWwxZGViMG1Ud2Y3LXF6VzhXYVlOcXROUEp1azloc1BJd1VrZ0ozbmlwaE9YTV9jMmI0eWR5bmpxUTBZcUZHX0xCRVdsQ3BCclM0cG9rcmRlb1ZBV0V2VnItcmdMdm90bmJ2SE43c3VPQ0o1cU9GbHN1TjBCaGJCX3U4NkhtQ0FselJCVGQ2VHRnWDBuR0RCWGpvdzVGTlBOb1JFdDc1eGlHZjZfSkRNSW1sUzFSN0pqbmE5TEJ0c0g5MWU4OE9OUFdNcGFFSkdVZWVGSmNHOFc5eGtaaWlUSGg3MFRyYW5hRnFjODlMZElFLUYtU2l5Y1EueHQxYktOU0FoY0tSbTNtRzZ1aVdCUQ.O9YU-MIc9i8Me8Rh3km2gBm96aHH9X4gc72LEJKkRIJBXMbpABcsEWBtICFaIklAw20TRwyG0s2IesFA3VDY5h1i6XPnOZeAzhWi2re2OS0k7DY05wDFZAQRxXVjAjeMs0bk5a4q4XF502p6uewunGjiV89-fO7RPwGspcsKNtsGtoGxQti1qpGKHw3pwIjO1bCY-kkIJi1K2JT1nUcLR2V_poPloEwc-mG2i3b_uXTjT06ltqe0eIFm0JIujM7ugm4qeA7oTs4pX3DrR212fv22wYZmlom0VqO3cmvuKHSf_aQYeye5w4pxPdw2ENNh5lASStTeVqbBPzPUvQHHWA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = RED )   walletProviderRiskAssessment != 2 &amp; walletProviderReasonCodes не содержит 0G &amp; walletProviderDeviceScore == 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTJNVEV4TWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5BZFpYUENEX05Wa1B2bUZOcFdGQnNWRUkzMDdpeE43dV9Fc3g3NWdBVVFhYk00Nm82Snc4blNMMDhoTHJWTFBIaDU0Y3Fiek8tMmFYdnR5aGNkenZZcmNsMnR5ak0wbENfT2lDYjlPWk1lVTVpWEJCWm9HQ3U4Nm1KaVZVY1Y5NWl6ck1pX08tbnlOV1I5SmkxMzVPVkFQN1NWdXhXRmtIUE4zOEdRUHp4bTg5REpKQlhzaEtXeDgtUmk3YW9qQV95V0NLNzNhNVVFcmJBWEF4dmhLZ2dwTHpoY1BXaFhOR2hWMUFpaXRGanBuMzItam5MVmwySERiNHJsUzg4YVhTSU9XNzUtVVV4SjRad19STlVmdzk2VzYweHVJY1pfMFRtLXhiUUF1VEtZRVZNZ1I0MUVqSDRHbEkyT0hjdWRBOHhQdVVlSGJ6YVh0b0Q2d0pJOVNKencuVUV5Y3o0SmdzSktGY0dFRS5aSWdDckM3OU9waHpNYWZCMDBXdFhRMHpJdXhNaWFJdlhaby1TYzVlUXpjYjhLUUxCZkZmcy1BLWppaTd6dW4tWlVmbzl0SjZtN0lmLUhsLWZPWEJ6M3pwcjRxS3c2b2Y0SGJhcHR5VjEyakQzdThVUmZuYlZWUTJzYThmbXdldnNObE1kYzZmYktMdVJLSHd6bjF3dDU0YkFValJuakE4U1NmaEJvZjEteUd1cm91aW5HUlpzX3QwNW9fc0RrMklEaUR6bEp6MGpSMzU3Q2c1RUd6YnY5ZDRPQnQ3YXlrQ3pLcVhKOG9UWlVxY2lsNlJrcktjQ0loRGI4RXF2dGFTM3VKdTY2VFpLVzdWZV9keVAyWkJJZlJTM2pvSlhKWkNZaGFuMHY2ZjlwVEU3eDh1Z085dnVScGhyUVdNVlRWaGN3YmZPTUVYYTlacHJOSkZLcjh5STNnaUU4MHltdGo2dldVY2VEZDVsdVhacG1zRG5xRi1MbzktMXVzRy11THNLNUpmenF5dkwyVUcxOTh4NFcxeHg0cjl0UGVHZmhEb2h1NnBpU1ZEeG90QTVIeHVxNXJ5OU5ocnNZeXdTQVNvVjZLQUhtS3Vsb182VWxVVGlvOHlZd1V4Rm1vV3NsWmp1SWRUS1E4NkZlSVlLdDVpemM5N2lPRWVuSzBhdG9iTEdDMm1CcGRURlVzUXpINmhfLXJvZnkydlRxYWJrNVNYdmY5QkNHNzh6OUpwbmR2WFB1cHZwZjJWRFZkczhMQTFxanBGeV9Ua2ZVX2pscXhpRkRRTXFBWUZleEtTMkp4TFQ2SDBVMTRhQURwaTRyRzJ1NkNrcjlJWFFJME9xSE1YTjR2RXBPZ3dkWXVMY3U4RjVZRnpLMGl2dG0yQ3Jmb1JJbUMzZ2RaVzcweUpNbjBVbXVzeC1JRmgxSlRZXzhsNG9YX3pnUzRjWGhtUTJzaHo0Yi1YeHV4OUZKUmZPcGdkRnotU2x3all3TEdaUmlZVVZqUVNyY0hLbTBtR0dZV3ZBWHh6Z0tYTzFIMEZDOWEyUk53dG1qNVdrLTY3RWlxd21NQnNXUHVfX25CTE45WFN6dGdCUzF1ay1HVjcxRnFDdjdQOHo0S050Zks4UFg5bENlZWhtaFhtTlh4X2dkQ1pOakh0Q3RaT05wdzdJVUd1eVlJejdrd1ljVVE3Ujd6ODdYQXZscm52NHVpSTA0enlOcWhCdFpnRk1hUFBCbmdfNEM1bzlXYmZUY0EzLWxhN3NvUnJ5WjIyNVBnblRXcEtsX2VEZ1phQTRfRnZiZkltQWk3N1diR1ItODR6WHM3MURTY3pMTFNBM2xDS0lyMTRXajJzUVVua1ljMDFDNEcxbUNMV1ZpT3FDTVBiVjc2MGZKSzdDZzJ3MndKdUFDTERfeUVKaGZOdlFEODkyeWFXOFNmaHo4UzYza3RfUEpXY21tSFpqZVRRcUVVYnpTcXNIZ0hDdnFXMVI5b2ZyTkkxbGo2MDlITkVKa2JmNjdmYy1HTkp3U0lKSGhDVmJaN0dpZW5wd3ZZQ3JNNENIQWg0THpVeEh0aFVuSEIyVjVqVnRpS3JVNWdHTzlXVUFhWXF5SnI0QlJUTjRRYjBKb19uLTJrMktMTzdBVnRlNnE5aTBCWUhyanBqVzVUMXowM2FsYU5Xal9UdkVCMXBBdDJjbV9ibEJVZVpnTlMyMWs3ZzBRUktfcDJ0QTBpdlAtUlR6TTVzY3VuXzZLRFkyWU1OUVBXOUpHTjQwaEpmaVozdFJtSVlXaW03Ym5SQWp6SkVmeXhIaHBwcElBUExseGU0clphS1ZZWXVkeC1zUnl0QVhFU2Jxc2dRUFRkRGNZME9EY1NjUVhNeGNVV015cG52MHM1eDFzbldPTVEwRzQzM1A1YmdsWXNDSWRiNE5MUVhoVlBmMVhMTVJuNE1aYzBaa2tTYTFOMzVRS0QySTZVeWUyNFc0NEFJcERrSlRCdVRlZzVJMFJDRVh5SjlxMmRfM1dqS05ZSUV2clpUOTNlM1E3ODZPS2R5SWJiLUI2UERvNVZsOVZSa1ZFakhfMVVFUXpkbkNvS1VSZ3phZmc4ZUoyMVN6aDlRakprRlBXLUVDUldSZUNmTEJLOERpQXkxcEJyZFV0d2FmOWVVWWY4U3RfQm9hbEFuR3pKSzNBLUF3WXhpeWtFN0F3WHJRcy1mdDBVZjBsMENfenk5ZjZaVXdnOG54QTVfQ2tySW03VVppZUxNTklUa3Z5QkY0a29NTWdFU3FxYzhsMl9GanZNRHFzN3ZzSU50WmVscEVKTWNlYXpWZzU1NEhpRi03WGdKaHE0Rl80dHNvNXhRdEJrdTZjYVZzeUJVUHNpS3RzbDVoRjlvNjMzaXJjSDE4alR0X0o4NnNVcVFlcEt2OE5GbUNSY2dUWUhRdkZZWXBtYW9PeEdjZm52bzR1NWpPZ0xYamFSYS1hWVNZejRNSVZIU2N4T001YmM1b19DOXVfaDVRa1FKUzExR0IwSUlJdzJBZ0plRE1pQWN2RURWRkhwTXBzTDlMb3RJU2xzNUNnUXVsUDBiU3BFMENsS211Um0xTU53YWxGQVF3WGctSDNVQndfMnpiT2dMSGV3QUdoY2d1MmlxcHBIWDJVc2djcnAyU2Zic05qVTBxOTFaWDNJMFBuTHprUGdUdnJWNkxKQUVhSUxBM3BiZ081OTdFV2FRSzFjbmFnbnVBdWwxUnNCMGJZRmlZcmZHTGZOQWpfRVk1eEZTWktqRXIxem5ncnA2Vkt3RG1OWGI0eldld0pUWWtQS0J2T1VCd2ItWGpEMlRqWHF2WFFwV2NQY3pHSEZ1cDJlNVNsQ1lBZG1FdXhoRjliU3RkMS1mWWZzOFRveVJxSEw1R2s5eTFzekNUTlc0ZWJRd0NKSHZ2a1pvVDJtalkyV1FXRlBVWVZEdFNlQXJUSXdoUHZlNTVDbm5BVm9MV1hKMUdUb3pGVXJFOGNFRGxDS2hONU12WFJDbXVmbWd0aXBodTdIcU9rQ1JHOEdWcXJ5VHFjdURSMTA4Um11NURKS2t2Y2VuMGhhNUZoajhVU3hYMlNWMll1YURkY29zdkN1bTBNVklreUF2Z1JjUVJQWmRMeHllaGVIa3dsSWo4dHBvWG1WQWlHaFVZM19DLXAtVmFTeWVBVHQxelpvRm5YQklxbklBaG1MaV9SRlRtaGYxaXNBWVRqelhOZzJNNUMzM2JVSm5zUVJ3MkRwTmc4aUh0b1JDOFRiOHJ5VDJLa1kzVUJsUkJ2TFBUcmowUzRrRHVSeVVNcXgwYm14Z0ZRcUtiM2ozaVFTZ1RwakRSX1V0YjRYeDdkLU9jQkJENGJ1RXBtekV5UllQUktoQmt6c0o5WldkRzEwczNiMWFIVjI4U0I2b3RzSVctYWctemJvS3FYMDVJWVJFSzh5d29yNEllbjFQWlpKd0h6a1RRNi1NbWxXVFZDY214bzNNLWhacEh4UDdIMjdVeU5ONkxWX3EyNmg0aHBJYTBiT2RZaFdqakZRbWRtejczNDlqcnBYZy1lZmd4LVhLT2lCVkFJZENkQUlHd24xMy1hV3pUVzJqeDlmdlJkLV9ZdjBoTnNmcElfTUN0X0puQkR1aTN3aGpPdVpRS0p2MWJVOWFRakZPYzF3UG1qYVBaVGhmUHM4QU1vcXZ1MUdtY1R3T2RIM0NlTW1tUkVGOHhLRGpsenFJYVJUcFRwMUh6MnR1NllVelJjV1M4QWxQOUhlWUh5cmFHUnNnQjhNbC0yZ3VEb3hQQ1JidFZnb21meTlPLUxOTHhlS3FkVTRwaFl1OHhNRTNHYlVEN1ZJc29TSXVWaWcud1dBcTJmcXJNTTQ0Sy12MTBVS3Jzdw.a7DUTkUJoOgAj6wVeN8J4xIF5mlhzjc_pQL8BMc1Q1x2g9UbiQOQqI88Y_CfLdLFufc9jI0MWSxOvY8UOKJLfx0KTantV-3EpwVAINepwbmgpTezFP4liRRnUjuX9XwJ5MIPDvpJyDPTsd8Z-nG7zN_7bf8LPgWc8AasrsGlRg3kA5nO7nyuum9tKb1b7123_TK6nsJ6y3CAnFw5lhWO1GyHJvE5WF--zKfE3qFUS_lHleFazfk5L3bfPGfNtgFh-DNasxyEZqjEpDYvpMNVSzHnGic5q9abkM2QKljEEM0CYBXTerhkrcy3FnLRfUiTGn4SoNwtleGmQVL8wv0Z-g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = RED )   walletProviderRiskAssessment != 2 &amp; walletProviderReasonCodes содержит 0G &amp; walletProviderDeviceScore == 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTJNVEk1TWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5lcjZSQkVBR1FQSE5NOUdIS1VoX1JIcWcxTTFNQlhsa1dUUTR5cFJ6bW1vZnNoS1JnZ3FZWEl5S0h5Z19PalhPemZVaDlFNUZNZDZObXZoSEJzZ2FzVkxkdDV2YlQ4Zjh3RUI0V2hfU09tT0lrZXRZSDNXc0YxUW42X0FscUFTMWQzMDFjMGRRMF9CendnTzNxaWRqVUt6aTU4RGdrZzZwQ0FrYzloRlM0VEJiQ1h6a1lKWFBLbXpIanZFNkFNUks3Q2xnU0dJMGdxbER0YjAyRDBKN3ZpR3lZNkI5Vk5tS2NmSU9LOHdiZmlkUTlvMjZPb0NKMVRFSzV0eWRpakZ2bW12MF83OWphVFhYUkJIYzJxVllYeWNDcy1zOHZLOENQOEU4VkpRZ2hVM0RfcHFteUFkT1hzWnlDc0VYZWd5clM1MFZnSW9MdHFlaHVxRjlkTTZrLUEuU3FKSGgyRVJoSEV6TFlVWS5iNmg4djR6dks4VnNyZ0VSd1BWS3dzZWlKSlZrZmdZRUVhRlFyWm94MFhrWXNhaU1MdmF5TTNnTE90MDh1dDJ1TG5qLWJMdzhKZ0JQLXhqRS03cGJzd0ZDZW80QWRmRFpZNWt3dFBZZnNIYTJlMElDMGZvVnhlQTZvWW9aby1pVDZ4TGtiUzh4N1oxaGMtbWItYTRkVU1XWmJTeWxURGx4bjhCZVpudDloUE90eF9yaVR4OHpfNW9MRFNxM1EtQ2lrNDhKcXhDc3FRUTdYTjBhRU5ka1ZxS2IyTkRuR29QczUwSXB4dmVVSXNqMHN3cmlIWlR2Z1J1NlhkUjB4S0VyNzdwVGVrVkl0SW0zbWlOb1RaUmJ4eVA1T21uQ2UyX0Y3N0ZqcXBOQUJ4ek52NVVqUmZocXBydlpDVlVSS1lqYWRrNEl3ZG5mMjUyMHdaUlFmXy1xSlJxaUE2aGlScnpxbW4zY3lIcXlrd0htdllJeUNSY21ET3p5RXhPbnJPbi1UYUhTT1IyNzQ5clB3S3lUZ1FfRGNFXy1ENEhKQjNxV2dlOXc0SUluQkZSWU0zeWR5YlltR3QyM09BWHE1U0xkcmM2LVBUZnFIUENfTExrekozbXNKaUVhS2JsTzNlR1pXMnJJcThUeGRBNEh1c09ueWY3b2pzd3lyVGNHU2RVeEZMSHFzMEIza25UNXVDRUxNUzFjQzFsbmdQNWI4N1Y4T3BJNnpqcDN4TVRMNTZnNWhTQ1hSeERyajdINUVXOERiakM0Rm5jNVpNZmxEZ3ptVEh4LVNrTzFqSE5hQlBVRDd4bERQVGRaTlNuOHNQdWxIVUtQZnVyMzFNdzNTMlF5TFAwNlRvMVhCSlZoamdXNGZ2MENTWkJvdjlOd2U4Y0JzYVdoM3ZzTUxRTGJadXRJZEIxa1M5Tk1ZUTV2X211ZzgxTm1yaUpGWDlsMnFZRHkzZkk0Smc4YW5SNFNud1Vmc1BVMEx5YVFtMXF5SW5WNVZZV3c4WjZKcWd3Y3FGeVg0UmhTUW5OR0NEM0ZJZ1RPQzNORktKeWRZa2FMMzFRQ2hVWjlXdXZ1bTdzOU1lTDU5OHBocGhzNURiN0F3bXNaaGxVaUV1V0VkZS10NVdjbktuRGhLai0tOGFhVTgzM1VRZnRPVjFmbDRLNjZZalpmbU4xaG54MDVMSjF1My1uNHQ5VVcxMHh2UEh4Um5fbFd5Q0lzX1ViOU1KZ3huZ0tvenVNSk1xeW9aS0kyQTJyNHhDa0tzOFJ2bHZWTl9mMHBZWVYxWW1wSmJ5RXFYUVR5S0t3N1FrWmdrNlhoSkJRVEVkNEZybk5RcWs3V0xYV2tkRTdxR2VXQ01EVjdyVzJfSHd4Um8zVDBmWGFDc094T2NFNVNNTW1ZWlBJR21QaXVGOE5IYXBWN0RiUlJzV2JLM3RQVkF2dGhKb2RPY1h5XzVSR2lsRm15SWhBOUJoRk1Da3FjZzk3TTlPdXpxRXhZR2FhZE03cVVfLV9kQUdxMnBMQkJDMEFXb2hEamZsaWZBd09OcWVFOVdWb1VyUnJqbjhaaDNMbXI2VUZmNmJwMG80X21uUWdsck5JT0lmZVA4SjAxeGVSVnhqXzdEOTdwTWx4OHZGaVhaMjFzZzZmajFGZVlfV0ozX2RNcVRfSE9IZ2dOWS1RTWNyZmlUMWZOOWVFd1ZBV1ZzNUU5YXMteDBoOWVVSGZRVTFqRm45QWFCbF95LU5TZkxRTUcxZmFNaEFjQV81M0Vnem5LRHBxdjNuTEhUamVxaUY0WjR4d2l3cUxBSXQyN3V1eG8wbFlNeUlHQmZ3TUo5LWN1d3FTaWtoT2FHcUlacldmaUhzeTh3YjdGLUpaY2VocW1WVG5wXzBGcUZPdTAwbXJkd1c2aXRhSnRVc050b0EyWEFlaDI0cmlKdVdLaEk2VnE1X2NqamRlLVZRVktIb2d0NXZ2WnlOc2RXeFpiNlBKMUprWTU2a29RY3NvMlNNUVpSOUkyS19lLUJLMWo0bWVHQzh6eG1oX2xmVDJxR2habUZPeDJRaWVtcWJNYnJwLWE0UWdDY1hjcGQ5YmFwTFhwaG40VnZoc0xiU0FnQ05UQUxqNlBabFVvUlc1T3dZODBNVndDRmxtdW1STWdUbUhGTkkxQWtEclRpSEJJd3FGVl8ycDNESmxCZnljYThveHU5Z3FxVmFZSjZtYmJka2VJbjd3SG8zOWlWbmhnRGxsUFBuQkZSN3ZtcThHTHdOU2FCeUpvMXRJaVB3eGFTbjRLLVRPQ0ZDUU5reXBCd24yRGpoRm9EOGJUUzdkbjY5NElDelE3c1U2cFRZSmdpRnpSMUlVMlRobFRmeVJyMi1BS192WnBueTE4eHlGMWJaelZCMkttMXFxM2FSVFJzZFg2Rmlsd2QzdHZCWG5UUUJWSUFNYjRPYlR2RVRnOE96MjB6eXRRSTlUTUZYaldQaHE5a0NjckNLX3dQYzJjQXdzUm9hT0NwbXlMUlZIZ0FnQmJBODMydDRoazd4TzFjMV9QU3poSmpiLVQxcURVckotZ29CNUlpeFltdXFSMDZYWkZyVzNoMDZaLVRCNEt3LTdxMUtuOXpBWkJNOG5WdmFkcEJwemg5czVTVl8wNFRfQi1nR2ZZWHlQZ2MyM1lidDNqd0FfX3E1NHdiYUJ5ZnozRF9KSERBQktLb1dNMTBKMFV5UGFmbjZqdm9jVHNpek51WmQ0Z0U0VjBvd3FEaXppa0oyYnotMmZjaUNaZW9NalFnQzVoQ1pZcmJWQ2xYZFJIdXVEU2xHZ1pFZ0VCaU82eEpiS2pmSUVzZjFLdUVyNWtNVTVGWW13ZFJ0VXM1dlNtNVQ4dzZGaUJGNDdQWlktLWM5dFpzcVBILUhIZzM4NU11UEdIa3dVSlB5VmhiNk0tdUdzVWMyQ2NyOUR4UUJraU1vTERrTmVwSExyZUhOdFJlNXhudDVyZFdmcDB4T3NqQnM3VTJDXzNYRWpSa3dFbWhXMWNEdVZkVHIzU3FoQWZrdjJPbERhTTJsdExiOU1mX2VxcmNSZzI5R0Z1TEJBZzlsa0p3TnEwSThZUWg4LUZfMkFhcEFOTnZzdUxGNGpxZy1wMFdKLWl0T3RWbXNEV2dmWGlGTkxMcHliNVVGRGlfNXFKaDVTNWZ5LVczeTJyWUNMQUhFQVhxZ2lUT2Yxa0pXTmRsdWE3RjNneVR4eTdiRS1hd1N2bU1yYVA3c3FTMG5LQ3g5c2tJWFNOa1RfbFR4ck5kclhuWkdCdEluTGdlQnU2Sk5ubjNRcWV6bmhFMDJ6dVEtRnVxWm9UUmFPTjhpWDR4VS1UczNaYnNpUldaLVg0aS16OWs4MVhfSktNenZ0Y05hWDV1Q0xhUW5seVZEbHNDMXdBR0w0cFlUazdXZEJ2anNJelM2SU5OakMtZk16dDBheDY5NS1iT0t4YUJpb05EbUw4ZDM0S2NsanBQcDNsXy04cFNwdHQwbUg4Uzh3VF92d3ZsY1F6X1g3ZlNCQjRvbU1vakRscFJmeXpCNzVDZkE5SW5uemsyUjF6RUluUmNsc3BiZGlHU3hSck9lcENDYXRRbVc3VERNOXM1SnZHVXJTNkxNY09VUHM5WDJMVnBEMFhSZDNTZmpHamxySUExSUtMaU15OVNsM2Q5Y0lIS2pJUDZEMzRUT1BCMnJCVzBrd3lUcWJvOTFqbGJjRVVuZmR5MUtzVDV0VlFNeWNLVDlwNHAxc1pzdFlxR3BvUnczaTdRalZPbmQwMGhaU1hyeXdvOUQyZk9uTEk1OTA4cDF4UV92TkhhbU5ndFY1aUY2OHZsWDZ2NEhwb28xNXJQVEJkeVpjLkwtWVpwZ1c5bENTc2xQSXNHem5Ba1E.U6iMjKbw29VXFg4ZuGK2N86w8Xjs5e5hpk6EHtBL1OLTL6uksgifG9GVs0cQRv3qbAJJT2dmC2QMBLoeMugl0lEkVYquRmwkTDPfCdn5nFZr54eJNFr-KHH6vpinqjyTXjzu_APvRpN7yvbxfwRLF6jj3KvZWH7450Bt3KdZwvfZrn5j5GMaEktP3N76ApCGFdSD0KyXO8cXAlHDbado5BxaosFYXLGmi9VeGpwnvnXtCiGfIGqUfTxKmUzsVumdfA476nL5xOFDB1S31FWjuVITd3OSpC7zkS9wWW4Y8VTXrlg3PZJ0I7SL3ngl2K2ktM6s3IUR38qaCtUkzWAUhg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = GREEN )   walletProviderRiskAssessment == 0 &amp; walletProviderReasonCodes не содержит 0G &amp; walletProviderDeviceScore != 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTJNVFExTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5JLUZOcElobURjV3ZfQ3daR3AydkhZcE44R1NpWlRldHZwSUhpV1hDQU54ZHhXVTdsZVRaZHNUZXBZR2ZJRkhPb2UweDlhbm9UUmFsYlRrOGItQk1vLUVCZ1c5UE9uWkQwMC1leWpYeW5UYW9LZktVYjVNOWNxNV91SU1tb3pRdnhkUm1iTkc2ZEtxeDVReFd3ZHBjMGRXYzNSQjhaVmU3MW9QWENzM3paTUszN2RsUVVqTVhKUTJBN2RHc1lLcHNvdktPVm5SNTBGd2VUaEwtbFhaZTFFTkVsaG9FeEVUc0RIanZoZ1hnczkyMzRIS1FYSE9HOW9UdVA4UEdUMS01cFFmYnd1ZEE4MkZSTW1rbDlpaVFBaFdsM1plcEtuVEhYTERqMFZVZmc0OEJUZWFjaDFwZ0g0Rkx5Sm1sQUJGT1FaY09zZm53TXNyS0NPQkRlWm1tNEEuUUpuMEllUUgxRU51LXFCci5pXzB1bUdnLUtUd3RfM2F3ay1FTGM3dVJlMjRWRGNzRnY5VWpRU1MxbXpTRTVMQVRSN2JIalNCeC1xSzIzM0ZPY2N3cUVQQng5dGRBTWpIaXRnUmpsT2pOZERyLUFYTWVLU1pfakJCOVlSUU91bDg5dVRRY1FXbnFrdzRveGpyNDNjTEFXaFlOYmFabHJGLUFTUk9pOVFqOTkwbkhtOFpyWmxCMk1hMDFKNkhMYllOLUgwSFk0SVFzaW9mMEZMSTVteWJZbzZFVklNZ3R6YzZpXy1GS0d4V29vdmR6a2lFY00tMm1CVlFVNWgtaU55aEJha3lXb3U1TmhXX1dtT3haSllTYlJxQ1pRc1hWWjdRWlFjVWR1a3NXeVdxM0RtWG5jbXFPZnljeUQydC0ySHZNNzJCYm9vOWFrdEcxWnlMY2xDSnFqSFpQOThkUHQ4UVhaV0p2OWtGbUdqcjNuOEQwX285N1BHUXNJSDIwTC0tNXN2OUotTDM0ejJnc0VkWnJMU0taSE5vT2VEdURHT3A4R0stQlZpTFRTTHFuN1dCR1pPQ3MwWHRGYWItLURCMWZFR0poT1Z0VW1mVktWQjdFaWhITHJEUzhEVG96NEYtRHhvMkl0cFdqZG5faEpud21udVQ5TXdVX2owMjlpczNPNmdxOVp1WXFrMENROExLMTRyWjktTEtJRTVNeU03cXpNN3EyTlk5VkJCNnJJZ2o4VWtPYUE2Q1U4aGw2MFFQZXNKbzhMZGlSSVlmX1N2S2otWDZ3X1RVUmlXZDVNMy1FZlFvamIwRl9pZEdtc0d4SDhMSlczc3hxR0puMEpoaWZ4d0xpSWdFQW5qaDRXYXhWZEYxSHFxR0RSemJya2xiM0pROHltekZPT2RrV2pzMlNYVUpUT0hhRkdTNVYyc2ZSUkd2NzY5VElaVDRXVThTZnVoNU4xZmVfV3NKQ1VTTWtOS29NS1Qzb2RKZDdiNFZISVc4MzhJS29MUURCVFU4UTlqRDBZcHhlVUxJWnVYblN3azRFNWtoZ050S1BiWEhSY01aSm12TGNfbDFnMVJlVWhBelhBXzNIUHFack1iNzd0QlY1WGhRV2lIcC1nQTJ1RzhXMUd2MzJPSG9NMXREUU1yRlZqd0RhQmVnbG1WcnNfLUkxQUZTaEh4dGw3dDQ3NU1HWW9HWVVhQzY2WEpFUjcxN0IyenhtTVIyMUVJckY4c1hPZGdIVVZfYW9hZ0NndTFpcVQxejVmdEtyZ2VIcGdiUjZYQTVUdVlXaEFxSmtQbzVxNVdFY1NLUE5tSlpGTmY1eVNRMVZQY1JrTksyZ0Z2YllhTE9JQ1hVZzZKUUN3RTZMWG1NWTBYYXBSLUtFR1NUTWxSbVdJREFWeVZfaV82eURpaDFhTno0cnRja2x0ZVdFc3dJV1ZDRUk1c1FuQXNuZnVUYVVyS0tUSldUaFRuU3p0QzBQODI0TEp3UUhxOUwxVGFIc2VRU0RaQkNtQkRXcXdMWWNFYjNTU2RsR19lUmp4S0p2a29DR0gtbmVUTzFvaXRYeDNHa1J0aDN6RGppVUkzRnMtaXZzZnZDVlBlMjhxTlJ2NHZPVnMtc0VIYVRoUldrVDNuMllxbFVzTHdhSjhLZTc4TDNvN2lkTmlWc2ZzVmxPU2lrazlEeUlOM0o3VTFJQVU4M09EalZKT1B4aXNlTS04SGltUWZvd3JUOEJQSWt1SDBPZ2s1cXlncDYyR01rX1NWNE5fLUpYMlhJNjJsSVhiTloxRng1RDY2WVB0Qlhidk5CMlVmMTZ6SG94ZlNFcWk1bV80T1F6Z2RHOTJEcTRYeEQ2aEVQa0l5VEVZdnMxSUxNTlZaNUh5SHViZEx0YnBvSE14U3hRSFEtVEY1SUdXcXJYamNQeG9zNWtISTJ5eXBMdUJBWmtXTzBTWjVGZFg4MzgyVlVuVmRfMVN2bU11R2hOTGxYREstQ1hBRl9HRERXUjQ5R0hLd2dWWGZUY04yVlctakttUnF5U1FYVnh6Q01jbFp0MEw4T18waFBFRlhnVVRYWHdKaDZNb0dVMHgzdXotZVQ3RTRvNzJYUXRtU1ZWNVJhX0hYNXlCRGpORHh3d3VFRlZ6TFhkOTBCVDhjX1diM2hSTjE4T3dwNFNQN1NHVTVGOTU4RVowRXJZeGV3bk00Z2llMVA4OGxaNUJ5dGVKTEhzRVNSbE9FeExkSi1iMF83NEZSdlNaemtxZTQ5OUVfNEozTGU2dHlOLTVKOVFCNE9LVVhTcDBUeE8xMFJkNk15cGhLc1hrQ1RGSFpQaU53SXlsdkd4bTRuaU9IVmRLZlItQm5tZkdMWExvNEZINmNSUGVpQ1pwVkZrWWUxUXk5NEM1VmgzXzBkWkgyU094WXIxeDZnN0NNVDV2R2ZXU3kwbFNyelBlM25vcVZOVFFmWlJKaHJsLUU2TVJLZkVyaWlhT1hnV3BmdGRCTm1LQzVyb0VKYXdiMTVRZUNsWEtQTEJxckJCNlVUeXNZLURXS3RlWnZSX094STNEWHRTMHExRDdraFhVdWtLcEtfS2pTOW1IY3NiZFBTQWgzNk5RbklRSW9hVGlBNVVtTFh2bmpIWHdPRlB0S1ZkQkJla3FDdmdWMzNFb1ZhbUhkZUNXZXVWTFMya2xqMl9jVTlWNDhfRlFpeVh2VXJSbHY2b0pmbUlfVFVwc2x4dFpCcFhFaVRHdUptUy1udnoxRUV4bE55d2txUTJMVzZHd1drTkoycFdXckRsc1hZTDF0bEpIdnNvYy1RZkVRcW51SzZPYmI4Vkh3MVdfcG90cFA1dGx6QXpSeFFCWnBPMnZ1MVNELW12aDYwa3VBWXo3WV9seTRhZmJiMk1WQWFnWFhBMVlDWW9uY0F1a1hUMlRUb2t3UVBHdGNkRmlzV2ZLVFN2emtjQmRtWXdkZ3Bpc1BvVTVpM3NfbVNUcF9OeFM0WnptdE16NE1kOFBwa2VKUGg2TnFUTTlFb3NQOHZtS1p2MTJvcUNyWEVmdGFSTnNLY285WDR0Q2VNeUxVZl83eXFROFo4V2VOT1ZKYWVaUDZKZjMzZ0lRdW9GV3FBN3ZsQVVIejl2TlNYRHVJUmFpQnNTaXVzN0hZN3ktdnJpeWpNVlBBLXFjU1VaR0EwM0hzMGcxVHJxd3lhb0kxVXRacEFVeWNTU0oyb1pjdmdma3ZhSzNpYkVmcWhlcFFnQ185VWNpWUJESW5jdzdIQXRHaHBXeEx0VVlBY2djYV9ndWZvTnp1YW9VLUszYlV2aTJzZEp6QTNqUl9WRFd0SzZSdVVfcFVlRXU5NnZDYWVPbUd4MVI4a1JmaFV1UmV0eHNWVFI1bHIwd0hHdUEzVnBfa3UxZy1ZakRVX25KXzFPR3B5NWdVaVBMYjRyQ0RJZnZwUXN1bXFmdzJZVm02Z1pISWJ3MzJjWmJiLWVWU2FYLW5WQVpZV091MFZIa2lRUWxMUW9fUFFyWjQxTkNZZlNQUXlIdDN5eDNDM0NUU19kbEZOVU5yQ2ZaMkZObDVsbnJraDNlT0RUYzA4cDYxOUtibEpNZkZBeS00MTU3VldOVnlhS3ZjSEw5b0JzNE1SbkpiR0lwYWJwdFJoN0NZVHU3M29DT2VEYXZuWVVjbllibEhPRUdraS1ZWU5SRldGWTY0NXBKc2RFMVdOZ2Jta3d6dElQSURWRHczSF9fN19vVzQ5ZGc5VjF1Z1VrN0dhVS1rQlhVa2lxQ2FGa1FHX2p6VzNEeDlsZkpNZ1pVRWtTeUNxYl83NnJIcFZVZmZjXzZPUE51UmZCT1UxZ3hqRnpqeVBtVHRoSkh4S2htNTlGVllRUVBxbVlzR28uSlZfUGxxSnUwZ25acy12UkxPd25Odw.CiqyhjosFAS97lUk7CWwSZl43YMlEeeZpgTSva5zOjM4QLtV9tF7zKSTQhRkFDz5A2w3kLPZWyBo0FGd2yv8JD6y_r35Pu-4LlI1WGS0kSdUFkeuVPDYwKaO55O8lSnN_whMtqzUnp8isbNgj1GBmax67EKXSgGg_bX9VQ_0Pz0C-FAZXjWi8z41uDpPEsuRNyTs-Q4d0g9UcMmtGSsM-jZeEOA-MFQ7emuwo91NblwcjraJc5ahBQ0k76kHoVkHsbaULPNTcnJJ8y5RM9KTb4GGmpipszBoiTQ4B694hceF2i5sWxUUO5dqrfBxIVOdMWdxQGpYLXB3o_xdQeaoiw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = YELLOW )   walletProviderRiskAssessment == 1 &amp; walletProviderReasonCodes не содержит 0G &amp; walletProviderDeviceScore != 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTJNVFl4TWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5kdDNFU2JUcUF5MWpzblVvVTNUTnM4VVZFWDQzaThucGhvUHd5X2I0bGNCWlZXS2ZnNU1SSVlfRkY0NWlhZEhzcER1LXR5Z0lNdWlGQUFxVVVFYm14U1FzNHVucGhmc2paSXVSdHdzTE5fZGpCSDdSOFpjWGd3R3V5NVNuT3RrQzlGWWtwY2pHNTFjTzNDMUZ5LXZnUlVuUl8zTnB3UG5UUEFIclkwVldZNVpQSzJaM0ZZSXRQa09SOVNjSkRpTkNKaGdvQWVIYW1XdTl4SGtzSGNYYnNSTzk1SUJweGpBZk9sbGNuV3o3d2VpOHdqR2xjSE9FWDNKbWo5N01yZVFzUk1hWXgwbmNSMkdGZDhxR3dibEVXZVNWQXE1NkxLWlpIVHJTWk9JdnpIYm9HTzV6NG55dGtuSnlLcTA4aF9NblhWajkyTXNBNjZ5SHZ2dWVSSURCV1EuZWdCZnhmdm0yN05xcFFIRy5uTEtrT093MXZteGpaRUxyRGVOc29EaU5WMzhFWllIdGFTNDVNWjN5UUVSeGVlQzlBT0tFZmstU1hIdkdnSzlSNUJwNnRmV3F1WjVlaWkxS0FtcTNqYXVDeWdWTFJGU1l0R3RVczFWMDNhaTlQU3NkZ0NIelNQN2R1SzZJOWhGZUtUTHFFZDVkOGs1YjZ1N2ZNT05qa0l6V3AtRnUzWDhvd001NVVNTVFMOTdIUDdHZXJBZEY2MEVGUU0zekdER0U5dVNrbkZnUWxSdnRSQ3BhSDlDZFRtbFA2ZGg4NmZ0by16NUhFakJvaTVNSjhKN1djMWZRT2RyaXhDSWxXS2dQZzE1M1JxU0lrbkJrem1sTURiSDFyb2N2VjdFYXVHSXpZbW1RMjY3NjlGWUFVTHdkaEF6WGd0eE1PNHJZVURPUk5zME1kNnM3ZE5vcmw4TWpqUk9nNlhGTUs3bkFZbFJnYXFiY05MY0NWODlfRURUSXA1MVZLTklTTUIyeEgtMlZTT2puSlBOQ1VvV05DT0Noekg2dGFfWGtmczBvdHM3RFlpc2ZaR19OR29WTnRHcmNhRW8tcVhxZld3aFdOWGJteUpBbjBlODlqeVozRkhON0N6N0dlSXVYek51WmZrd1NHSy1IVmQxT2owdWFZUDhrbUpWQ3JDckhXcFJCLXV2NUhmTWMyZ0pzMk1DWGFOQWhlYV9oUHUzQXJnSE9sU2tBTTVnVjRpSFlIcmNmTE15eTd4RFYwSS1vVjhKOEpjUktLTXVqc2c3dVo5QUxzWk9Cc09rSXNTWVR6ZjFTVmV3V0JvbjN5bVNyWWxzaFFSaXZBdHBsQ1hSS3M0YUxkTEZnb0F1WkZzNkpFN2VQSWFpbkMzZkZVeDJJZ3JIZUxnM25Ba19wb2l6Z3RvX2xFem55WG9OVFRBMlNFbm9ycDM2dElFTGh2OTBVQVFOMHRGdUVkSDRtS1pnOXBPTWxkOVBkMG10VEhtR2lDM2xXczQ2dElKZ3QtdWdYSW1lLXVPR3dzamxNLTBvMzJrdzJUbVRpQzVDNFJvOHBsWWh3OVp2WUlhT1JkQzA1bWZtdHRSR1R0dlFIdWNTempaQnNvcHVwZUVNay0tSkJCZDlvRFdmS2pMUDlITUNFcjNGenAzSjRzNTdnVEZYdnhRMzRTNUZDOFRhdDdua3dsZFNXLXV4M1c3WUttX2VRaXhndTZTTDQxNE1DSERSUndPU2N0WS1DVXpiRXlsMUs1TGk1QmJSemo5NWRtSjFXdGZPakpHQmd5b2tsZmtkX005ODZVRUpZVVZ0MFQ3TnRXdTZPbVUtWnZ3b2dmNU90VGJsN3M0Z0xtTzg3VFd1emVEXzVISjZubHNWazhSZ0dJMVhONmQ0N1Y4aW1tMUpScldvLXRhUEtIS2VxNVc0bk5HWERENlhaaWw5MTFTOHJUR25TTGp3UlRlalBpc0FKWjFMa3l5TDRjUTFMaTB0OXUyZ3BXUUcxb0RqRmNyaFc0ODFWajc0dV9VS2RncWs4aURZakVlbTZwNzJ3RlV2V0k2UDVsSFlBak9ieVVLcmdhS2RuaFRCRzVxbENpLW9wVWlRTmxlTE1lNTZ0Q2VfTjJkNjZ6TDlhVmljd2RsMUViNHRhbEpIamo1NWhfSk1mcGF4UnlmMktIV3g5STVDVmhEM1hGYmthNkpvMG0zS0JUUnczbEdNZ0JuMHpZQU9mdjM4azduLVZON04xeHVPaG9JR1dsbGlLdTdOQmNPVTBuVmZOUlp4UHN0S1JpYW03c2RsUVBGT3dncVhwYV9aOVlhNlQxT1VIeWVmZVNvSVdyenhkb1F6T2xGdzJHVk5IbGo4TUlrTEkwNTJoVkY5SjdtRVkwc1dFaHN6aVgtbjFieTNmY1M4OXJNcFBNMEpVaFJlWUc3d1lxVVRsbWgybURURkNBY0tMblV3aGhfRWlxVmJBYzhQTjR3ai1ZYll1Q0NPaDVzdUx1UlFsc1JlZE04dElldUZPcG9xVmRlYWFhZzJQUkdPd1lTZEkwZmdpMl9veUR2eWZ0bmxGMGdIVnIzMDRCcXdIandreFdGSmhvNkpkRVE1bGppbEFxWXh6RzJhQ2c5MzBMaXNvSWJGdUZMMzRVS0xmTjMxZEpNVmlSQ2N0c0h1bzVTSEZmOEU3bmxjajZHZmk4bXpxeHdwQVUySFNHcTRHU1V3SUpBbDVSbDNaSDAwNlJKczEyV3JScmlpa0Q4aXNab25LS01iUXFERXN5bXlDckxNcE9jdFU0MzAyOW83TFY3QTlnVGZzdTBiekxHVlNaZ2l3MmFnTkFiNjNGNjRkazUxTUk0dG05ZFI1ZV80eTFtbnpua09jZ0lmb1YzSF9RWkdkV0ZQWkR4dHhJajNlemIyTUgyRjdVcGdLMXZEbS1fQXpjdmZnTUtSRFpid3NYdHVJUEhLZmdYM0p2YTBjX2Zqck5PdnNyMTdGSjZSOEFNNENobEhCMGpnaWVQdnJ6UGNqSXlRV0Nzc0pYSk1UVjBRZFBFTjJBa2xQazhoN0FjWkNhUWRfUDF6WDNabk9PQ2I2Z2gzb3dkUXREQWFzOW94djNxbExpcmd0R29vODl3VUNqaVpNRm13Z2I0LUdKejE1SXBubW5lTHIyOHpVZG1KMlNxOTZtek1kbmhQbUxoRjc1QThlY3RvT2NJcFBtNFExekJhMmRMYThsTzhTTTExS1B3MEVZUUJxTzVabjIxNlowNC1MUC1DVkpqaE9SVzQ5Qlh2YTF0a1ZyU0lOeldvSTlrYm5nck9XdWxJbWNNZVNvY0ZEdGlQN3NOWUIwZUJjNlpuLU5kdlozWndEZ2JBT0ExbzdOVTVGSF9DS0NVakplenVZdzhVVXYzVnJoTzBhWXdlMEVlZ2JvMjU1TjJMaUxWX1l1ZW5Xd19XS3V1WWdPaDhOOV90UldfTG5qR1lycEx6aDZTVW1fb1dqYnBZLVpMT3RaaElFZjlmcFU1LW1FaWFmQlBtQ1hFNUhfWU9HMG43UnBQREtOc0tOdXpYSERtOWR3SS1NMWNCc1JyZXdLcjd2NDlhQV9HdDN5NmhyVFBhem00bE9GVzUxSjBRXzhxdGlYSUJoMUN5VlhnZ1BVcG5ZN0d5RUtZY1dKczdZLXRaeGtYUTl0OXphYXpJTlNoU1pwMjB0cENrSjJSZ3Qza0xXMDBkMUoxR21uV3RjdWh4TV9ET0paRjNFZWRmRGRPTjFhLVowZnNoSDVmak40X2tIbTVCRmZpUG9vUVFqdGl5c2ctUmY5NTRqQTF3d1o5S3pKTFJRYk1mUjVndUp3UjgwZldiUnhxdUp0NDFfekxGbnhBQU9aTjNXQkRhdjVNcm45ZERaU3BiS0dNdVY3T0pMZWRnSVVCTEtPOWtjc3JySkV4czNXaGo1YkI1OUtsWlk2WldTckQtSmxLQ0FGd21kRHJFS21wV1FjcTlXSnQ4QUU2Z1paLU80NmhwVnZFanlfb0RFOFNTb204YmN1RmU5Zjh0YnlYc2ZneFQyVGJTQ0ZNNThzT2g2TEhmOVlndFhNSV9GNzJLbGlENHgwZUFMZ3pESTVUeHVRbVhUSUU1NWY5N0JEdGQxVm9lRmpSczFWekFLVWgxVktpUnZ6VEJiSnZkTEZVZmNKcVN6VEhYZnNrOUg5YTBxS1VlRV8zMjBCbTFSbzZRSEpRS1U5cEtUdEpOQUY2eXBNdF9yMUNMa014aWwtVzVELTB3c25tYzJTYzRFY2l5b2RaR1ZhNllmLWhGUkliSkhJQ3N2VjhzQy1UT295ZlZHTV9takhiLVRuc2ZvRVZtdkdDZmN4bEJnek0zXzdVdGVNeFUuNHpIX0tZeDdScGN0Y3NSNnp3SzR0dw.bvxtjY7OG_ZAEDFmSvbLaNsX8q2xf25j81zbRhMkfyu8tug3eMzNO5sKC9tsCv1UYVJ597uai-ENmxNwzCAn1heraRJMWbRxU1kqeEzYXKKhY9UTDdVuPftO65mqqjV0mURbEMi_Va0uARev1tAgD-SCUIci5sQljCrjnPI3H2HLYCEmK8i_wKMx_ycSpeVM75AkTdOAA3d8wziU7KWUltYjxirqmzW87eSi2YoxLkIubmqC5-nEoxpeoctO1tEmzOz5vk0rbDMllTWCvgePcR80CQ_IM_zwVnhnCTtL3W59RPul6DtNOZTUUOoRoFRs6ZvicrnJVuybczTVm7zbIQ&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = YELLOW )   walletProviderRiskAssessment отсутствует &amp; walletProviderReasonCodes не содержит 0G &amp; walletProviderDeviceScore != 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTJNVGc0TVN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS52RmozVFRMZmpYcjVXM01OaFdUVkw3dTFuTi16VVA4ajAwR3JQQmJrY0NXeWdVTWtzQ2UzQ213NFZ4M3gtb0pnNTlJRHZ6TEZLVGlfT2VSNFNqUTIzZ0dsNkNiZTJVUG9ub0NjYjFXTUJmWk5hRk5hMlpRQmhuTHVvMEdoTVB1eTJfSzlDbDA2SUJoLXNIREpYZW9MTzlRYXpUNERvNGhvcFROdXhsVTl1OGZJSElPUHZUdE5zMzVwTFZXSU9FSkhwOGVWODZNQzJHdjVZc0RtOTIwOUwxOTE0UUo3d3VmUTVVZFdsRmhoeVE0d3phbFpPdlVxMkF2eVhua3BObFpfOHcyMU54NWZBTnNiTVFFVDRRRGtCRnJRZjRBSmdZVVdvMnpaT08wN0VCRzNGeEhuX3dMdk96cnRITzdpQnBNbHI3Sm5KZ2VjVzNEbm51RjhTcEppZEEuWWE3cVpaQ292cWFxYmpPaS5NTkRkVXRWS3NuUzhnNWROU0NCQTZzQUp2ODQ2SXdUbG1Zc041bUhVcllEdEtSeHc1YWstSVdkZ2dVX2t0SUwyYXc1Y05LUzNVTXBwZXdNTUhaOWtCaU1BOUhJcHRoUkJHa0JTUjY3ckdOM1p5Y2ZyTzlDdV9IamJZZ3RrM3RSOEdZWXhqMzNUMWVROEN0dHNtR3VYZVZCWk1wTEtRZmpibkRQMEI4S2lLM0VRS0I3RlRYNTJKTldLZUxfMmRxWnNkYTc3VW9NckttbUczMWk1S0k5QkZKQUhIc0FOcE0tTzVkLWVnX1draWs2T3lDUFhqVEdrZTV4SXlWaUc1b2owRlQzUVV0eGRJaFlrTC1yZXl4Z3NJUXdXTGF4RTYxa3pWcktKeUJ0N3YxMzZMeWpnSnl4a0JNR2Vub2NzSTNiYWFXYUNFWEc4ZjlkSEdIaEZFLVhrVUtLTWc2ZXQwNVVTY0NxSTVSekEzekt1eW00NzA5elNEWG53M05WaWR0WmRQQ1JwR3FFQXRVMlJEYnBPVkVyYndjTEpOa2ZBTmFaRkpSVG5BRmtPdjc3c2piTEE5TUpDbG9fd2F3Y3J0ZTdkQXFSaFd1VFU1bmVQUjdyM2xoOHBmZ0h3U2xrOHU4dFV5OGVZN2M5OGhMRG81Sjd1YmdFRW5jTkVEUXRqUW1PQkU0c29BcmNCNVhycjc2NTFQZ1JJb2hVTkdWTFRVVGhOWDViXzhDd1pBeGotTzh6ajVmRDBWMW9INXk3dVFYM21qMTR5Q3VBMEJVSTRaNWFrVVBtUHNLa0RWcC1TcEEtZnNZUEVfX05oUWtnOExoS28xbTJSTVVpX0RjdWxiM0J2ZnJkTmQydDNYdFJBUHNzN3UxR2Uwc3cxMGxYMDFiV0hKWFJHY1QtenFMcHhGdGNrOGJKWnJRdFRRXzZPUXhsR1UyS08zM0xiN3lpN3BqdTdkNXB3cUdtVk9zTUp4RkRjRzdvY1QzeDJ1WnIxQ2JqcjRObS1yRjBtdS0tcS1UZkdYeGZscGhPcGR4UVR4cE1MSmJtcjVjd1F4bFZodDlMUl9MRjByLVBRbFlHdUFsd1V4U0F5d3FFV0Z5ZEVkaXFtWGJMRFJsdVlfVzk3MnJQNkJRaDNCcnhsTlNTby1ma0czejdLbTVLam5MTzE3WHBRbTZxM2hma09lT2dLUjJoSG5lcU91bDkxTlFpcWh1bnFpaUZMZ0lBb3RNdHlfV2prUDRGbVhTZWFpYUVMVkdNbWpWZlZPYi11WmU5bWVYZ1ZEZXhHZU4tazYtWDdqY3JhSHR4QXBtU1V5aE8tZ19lTGhuY3U1Tk1ycDZ3emJQcWkwNzNQQUtLakZYRm84Q05Ha2RFV0VDTE5TSFZQeUlEN3NORF9EZjVLLWJWbXdoWUlYamZRcjhFd19DY1BtbWdnRUxkV0xyczBtaUFYbGc0Zm5RNTNqM0cxU2ZJdkcxMVo0UjJuQ1dza1AybE53ajdiR1ZhZktkTlpjZ2FXb1lxMy0tdmszY3REam82MzdVMS1LTlRENG02OUQzYTYzM2RQMmdBZ0o3SGowVFRJYjZxenZCSUVSX0hsSTctMVhEX1UxRk10bi1oSDJEcnF6bDN2bGprLVVEMVU1TzZyTk9nNXduLUkxU1oyeFI5OGg1cHh3b00yLWVSbm9WYUp1QVY0TGU0anlBV2RGa21ReEE5OUdSY3V6bV9FZVVmLWx3eWR5a256ZG9FbkthSXhBNzBpVnE2amhSSzlMcl9SUHBGSmdwc3M5OWJvTnJSVm5tampRU2VocmhaZi1UUEloTVgzc1pBYlZuUi1Qb2N5Z09SVVFTeDgzYkljU0JoNDdoeGF3a2JTbk1MWUJfRFhMY2NESzhDTG1aXzdFOWZQSWxrMWxHRGU0eVRHMlROaFpPa3RnS2JvV3FiNGc2ajNZakdqT3VWYklVR1dMVXpRZ2RVNzA1NmZZU1NYR2ZYelY5T0ZLX0g4eVhMT3g3cHBWMmZDS19qTHhBMXpIZThBQTB4Yi1xdlNVS080YXVkdDR6NUF1WlUyZldHcXlJcWRjbnB6ZGlDUFdkd3hxX0YteGItMDNqUlBkaVpOdVNWSzBqaUNOQ2swVUs5UmF6Q2x4OWZ3Sy1TSHZmOGt5YjVMM0NONWRSdDV6OFJKMXUwQkJDU1EyaDhWYmpDUWVnMlpQTHdGTVE0S0tvMGZZRmZyVVpMOHhDTy14QThhVU82azh4SHpBUDRiY2ZnMm1OU0x6dzJwOTNrcGp2TmxOY2o1ZVMweG9OdTRpU0had3NWS2FnOTAwanlnZXdnRFdnYWxkTDJGcUtVblMxZHFUdUtwemR1YnNoOHZLTndCRlpCZWMtUWd2MWhiRXhVM0VTSmlKWUFzSXEyZnFsem9scHktZ2xjbG5Ddk5uUnRBQWVtVkVJbDktd0xQYW80aVhETkc5cDZsRlJQWDk2R1lNYXFSX0hibkdQbkZpMXlJbU90RGxiWHExZGJBVVZlUzVMbno4dGw2dy1RWDM4TW5MRllFcWJEWDdIVzhhTTI2THBvZTZGQUFGb2NlR09WR2NoVmJaaGFwbDZQaTNhN2hld2tmOEFMOF9YNUhlR1dZdXY2VlE2T3p5d1p0ek8wS2NLWHQ4YnYwNU9NLXhLTS1IeF9ZVk53cnhWQWI4eWRzazlzN1VMMUVTVEtWS3N0OXZzX0diM0toejB4RElLM2VZMG4xSTU2Vnl3Qmx2ZjVCS1VwTFVQckE1TThPMzNrU19GWF9MUHIyRlNma05jZDdGWmdScjVlQ2NMUUsybF9yUHA0dE56bzZERjFWOVQ2aG82UTBXdXJqbUFxbW9nV2FPTllxTVU4ajdjN0xuUlJIREFMS2pObm5WR1lrMGpTdHA3ZmI1SGlOZVZFc0VMUUdzLXJqU1ZJbFN0ZVNlc3dSVzRzNEZpcGttMXYwZi1FWFFtdVhmYVVsZmxaWU1uMWhxU09PSkMxNkZNbGo1bmoyUzFsSWM3QXc5TWI1WG00OXhzRl9lZlAxclRkUmNlTm5aOFNJbUkzbkdLN3c0dFpEU0pJOGplN3JQd012N3RTdG8ybk14T0E5YlFkZjFxdF83d0ZCOXFVX3pBeFFmZXlGblM4YzRRMkFxX1dyUVN1b2lhRVBfWW5BMk13WExSVFRMTHdsQm5ueHJBdDBvWFhOU3k1WHM5SEg0OTNTQVhETW12N1VmM0k0VHRmNXkyVDZ3UnBRVGFWeDhpeUQ1dEZOc1NDSEozRUdUMTZvTFpfMVcwRW51OVk4TVVtWnFmeTUyME1ZS1NWSWtjdlRhU0RBTW9vS2VER2k1eUhkb282bFFNMUdpakpXSGp5UXNuWlRydll5N2UwZXVMZEZuMm5RX1lLbjdyLW1WbXQ4U2F6d2twc2VUQVV0ZnUxd2M3WnhGMzlBNEh4bEt2YlJSaFRvN2lCdEhRaG9JeTJMYkdIa29HYWpLNEJzNXctYmFKUlNnRVNTdWRpcUtCcVZTSWFVR21ZTlNDalpId2lYX1NJNDM5bklWZmlQcEhxSUpWMmptdnZjXzhwZ2xwRm5FTG9mdDJDYTdMX1l2TVl0UFVyV3kwaVktVldaVUhrX3lwd0h5dkw3NkhDUTAzcUx0LUpKbWNCcU1CVG13dERpRVBWeng5a01tZ1V6TFN4LVJjTk9WbzZRYjlpRjQyakZ0aVVrNFY0NmhrX0Y0NG9jZW13TTFnaXFyRGVaQWE0UVVZZDBIdmg0SVhhTVk1VGZWdzg4bkJERnNZY2tpQlR2TzBjR3dEOUQ4eEVQSmNXQmlJUENhZmFxNWdMWlVmNGp0ZmF5eTR2a3BCU1ZYUS5sbzhqcTZ4ZktlckZOekVINXRUY293.kfu-QthJyHo2fBU00vZLtg73vKwT2Wk8Wkyra5ct5adx2WK0-zdHLbabJE3cpXOZhhTZSv2Dwl5Ft8Yn8CR0Dx0cfmPNsvhKkHBP-yPVjSTfuEQMKBg0h3afciVQfLkdBu-_SBg5ZnB-qKP6U4q9igurkpd6AdE__NipfCSOoa5URSjN8N_WY2bH07sAK4FdPoOG-T8FLhBd1aF3LmLaqYBfvpEhFfHb8vq3oaGB0qBdxYBFG4uGP3KYyKackaKdk-EuCHh8Sr2qVFzZktknl6gSD7d5mGQ2-_V_KXZoTA8k779zFO1KrPl1hdT0YwsLpbVexDXRyvTbWcbUkUVl2w&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = ORANGE )   walletProviderRiskAssessment отсутствует &amp; walletProviderReasonCodes содержит 0G &amp; walletProviderDeviceScore != 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTJNakF5TkN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5GZFVnbGZ3ZjE4a1lraVNYVGN1TG42RzltRlptY3l5QlRSM1RtXzEtZTBFSGNGVy1XLUZKZHdpZEpnMXlpN09MUEVtYTZObDdTRXZ0aGQ5RlJ5ZnRjZ3N6RlBzTFlUVmpwMWFFY0RfbnZmV2FMUUZqbnlaSklEZnZCZjA2MHJmZlBUbzJYd1JjOTgzUmdWY0RWRmttQ21wc3dWanNmbkNYQ2ZWYWhvVnhTZ1ZwTWJQMHBTcWVYbkRvM1FNVzVReFB6UTlKSzdCNVhRUENHZ3F1aHp1WnBIUktmNXJrNkIxNVB3bFFjTzVWZEdiQld6RmNyQXVDNm45dm9hSUVVNWtaQmJSSUdKajRxc2M1YndVcHlzOURHR3FQaFdyQjNtN2VBczlyZ0hPS3Q4SXdrMHhuTjNQUUxzVFFmRUttZEhfa2FxRVBoekd0aWQ4RGh3ZWRCQ2p4SUEuVldjbnUyeDU1Q3hBTWI5dC5fWUJNWmZ0T3lscG1VVjh3MElmcmROeHJlLThQLUs5dWMwSmtySTVpcFdTcGJ6eHNHT1hkWm95TjhvZ0dSc1NrUjNvTDFadXAtTEpUcC1xWm1DYjd6VnMwdHc5NGczUHVtTklRczVkTjZKYWF1eGZza29BMlgxaFQ0SE5wNllSNmU4SUQxVjA4U1EwRFVXMENLYzRBd09iRVVxRDJwNGdZM0VQTXNQam5ja01RNUNnUFRZcEstQTM4eDMwVllNZFhJNE5WRUpxbGM2Z2JwVHNVSFFFeVlpRmpMTTFFQTRIb19zaHVYYU9hQlJoa3ZDOUw4WHZXMWJUY25YTmRmNkp6a1ZkQjNYQmdDTm1iSDlLR0F4WDdNUm1JeUpjZ2Zremw1TG1zcGdEenUyRUVscUx1U2lSdWgxSHowVVFNTW1yNVVoNGZSM21pVVpxSUlvTnJOLXQxSkJ2ZVZQOUtSV0hrWkJrV3VHbjItUnFDdVBPWkJxTnRLTWU1TEpsQkJTQ3p6eHRpOGhsRHRSeU13NjZpSldaY2FZN3M5OXdxenRhR0Y2dE11X0JyWGl5U1hCSjVOUVFHT0JCcWRrWkZ5UlJhWGNqR0dKTk56akFQQWtFZTZmcWFxamF3SlZqSmpnRXAxazFPVTNYRUx0RmJkYXVZNjgzVm5OVkM3T0lySU5uX1ZadzcxcFRXYzZPMVRDXzk4UHc4WTB0ZEgzcnFrS3dwWFRGZkNjak5YTDNIR25UalFjSmt1MHo1VFM0XzBkOFNlbjZvVERlbkhGSmZHeVlzVW5lS3otckR3ck1IMGhJRUxDaHppS2MybmdKSjhPaDVGR19NeDJIblJNX0w2dVp3NnRmZGVNUXB4R3pNdFZ5c2s5X3h2MjJPRm1nVWd5MkktUjFfVGo0QUxyeDQtaVV2VUdRejJtLU42clkyY1JFclB5QWFFX19LbkhLU3BTV084TFA0VzFmQ2lWUGhqZHJXeEluMnVETWJLY1lRM0dTMkQwUktyWTBYa2dkQXlZY2dVSzh6YWNOcWY5blBPM0hqTDRJTnNMb0JjbF9DaW1qY3hpaGhZOFd5RFpQT0l6MXNRdkpLdjlzWkVuaEFfeFhHaVY0LWpnc0VmOEVkcEJvRVhvQjc5Q1VTOXVuU0xRRnRCUVlsMWIzNnpjbEhydVBuT2FSM3kxcjd0VlpNWGhEN2plZVN3WXBFVTZFX3ZnT3YwT20tRkFUUlJtTm80eWx5akFTV0FqSXM3NVhaZkdSeFVpQ3dTZHF2QzlHUWJaTWJjRElLODN1ZnZwbDdBMWdZZjlkNmdUMkk4cmNibHJrZ2dGSVU3RUhkWDk4UU1NanMtcFpBSTNaYkxYcmg4TEwwMTR3bENoVkkxREl1Y1I1aXhOa29IU05FWDd4S1U5cjIyV19ZX21VX0FSNy03Zndlenk3MXpadGNvUU11aEQ4ajhSbFNMS3NUOFZfLXFTSlRvdlZjdVJxdkJPMlZyYkY0SmMydW1aaHBTbWtvN2dNTTJsdHBFZHdkR1VjcmkxLTRiWUZxUkgzc0ZzcU1EYXBpSUc5X3F2c3Y4dHR3bHlpRnNKWko1cG5TYzd1aHVRZjJtbmoyWXEyYWZMMHUwQ1BCcDkzSmVabGZvNjJUU2gyREtoWUl6eEpjMXp2elpkS25mX2t6YUpxWXhYOGs0WVVFOVBLRUhkUmZGcXhISS1zaFJBdkhmNlRpSk02SEM5cTVEVkZZU2RybE5Zc25SNDVxWjRIRndUN2hSRGMtN2JRQ0tQbF9nblFzUUlIaWtyYlJDVnR6a3BtS2xfeFBSMFBwLTBUWDMyVWhfUVZkX2gxeDBDUXF4eUU0S29GSjkyR3BsSncxZm5wVlVUdFBpTDBJOWpBSU1oUEp2dnhMb2RDVmVibWRqUWQ0V3U0OGU1WTAwX19XOWs3OVlYUXhWN2tzT0JtaF9MNUJhQVdoclNnTTFab2lqY3hJcV9nRWk3azEyRmVyeGZaaVNDdGY0bDYxUXNtSUdPWGxlREJ5eEdnMXFPUnltb2M5UXJtWGsyMy1CdHNUb1pCWWxKUU1jODg1U19RMkZXVVQ4X2lyMlRDajBpVlI1WnVLYXFQVUNfR2V3Z2I1Y3VncUZFLV9rZ3hHZVR0anJSOXByMFVaM1Rjc1R2SlRSelpPMjlUQVhzcW9kalNQaUd3OTJSSlFpWVV1Z2lBVExEVEV3LUNKcWo1WlQwSFc2UkFzYjRqYnpDd011ODRmM3RENmZWREI2ZVBRX0kzWmJKckFzMUhpZm5GaU9PRUtpLUkwZFFvU3RWTVltT3haZGdWWHRibFJhbkhZakFlRnd5U3Q1ZUUxWjA3c1htbEZtM2VGV0tHVkZhX3V6WFBaZ2lnNXMxeVJUd2JtRDlPb01jN09RbUVodEtNVFV4YTZXNHA3clVvZHFJdVFfNWpad1lzX2JKY0xNbWZ2OEpTQnF1NFhPdjR4dEFzcmRRN1h2TDdJZmVuT2V4cGRReTJ5TzNVV0w2dzkxV0R4QmRIQzdLaEpVRDNpRHhrOHIySlZxQnM5cVMwbDIxcG5jU3FPUXhDVmtEcE8zUkNHcWVuc1VDbW9XZHNicWFCNzFFaU5TckJieTFvZzFkaTJmSUdqbGlhdi05RnF2WjZQVU5PREdqUHRfWmJraW40Mk81VlZDSVVGbldjNHA0OHo4M21QNmNFdnNyR1JVeVdYZFZUZmVHOEJaeGV5eWNlZEZmWk1yOUFIU3E2MlZfVlNUQVA2NDhMUDNfQWUyYlYyV0ZiOFJGbldyXzRWbEpvZF9fQ21jNC1ySkcxT1lkeGY0RXNsRTFaQWtVSGE2NGUtdnZyX0dlTUlRQy12RVJTSDE0SGFsSy1qZThZWlpKMXdSVW9RZjU1X1ZTZGhhb0dBZEp2a0xIWVZ2UkdoT1dxWlNFLXBLazFhT0FIV3pHWW9kdzdjaTRTVDgyTWRLYUhUeVFBT3YtQ0YtcUVEcXlzNVFubVdpZVlWeUlROFVzbGVORWo5SElKUjhXVDZFSE9MaTA4UzJjTmVmN0ZUTXhQdDM3QjZBcFhQVzQ4a2cxbTlfTlZnNkhybkFXZnVmZlQtd1liXzBjM1RLMG9CblJBUTA0QjVWLVg5aUIzQkczQU13SU9fWWN3NjJKRktKZnFTcGp3LW5xV2NnUHBfa0tYSTlFRC1SWlhXV2hEQlVYWVBxdGNFR1hGZUltLVRTMUc0ZDh0UEw3Rk4wcHE4YnJxRS1SWWxJMEhPTWtuODh3SDhZZDUtWmR5UjZlVFNwNGpweGdWc19uMm0wWk9rNDQ5dU9hb2Z4anptWjVuOVRySkJ4dURuTXNnRUZ0czd5ZEhUNVVqSWgwWFNnbUJaVE10TXR2N3dGVVNXQUg2VmZrUS1yVUt3OTBQcm9ZazZlZm1RSHhjQTFxdXE5eDNFaGs1Q2prckNhYTVISXFhaEdXVE5FNDdwVjVxdDh3ZVhZTUx3UkdvVWZJV2dwa1ZSaWtHZk5uT1RQOGs4c2h1SnNpX3NxX2hnel9Ic1kzZl9XZDZxbGJqQ01naU43b1g3U0JfT1VZbmxjSlgya2w3dW1ZZ05wenFlbFFJeWhqYWM5aDVlaXhRUEIwVEh1R0gxcEpJejlRampwbEVRQy1BREJjckI4RDNtNlBNbUE3Vml0Y3BsZEY5SU9Oel9FS21oMF81bHVFR01YSE1qOWhWMkZ1WUtsNi1VXzJLRlo3Sm1OOGVpMFhua1FSc2x5WllWSHRLbVZ0VXFISnBWR3FLM0l0S2pjQTZfNnl5R2lHSFJGVmZId294LTBOd1NxdTNPU25pbkJObGdrMGpCbkw0bjgyZWwyN1dWQlEuWGRGVlZZa2NBb0lKUU5qWjJiNDJ5QQ.tDJ32BdtVKgIREYKrBcTsO0-n8YgnENCj2yYkeman3ljIgIe5G0O805Xj6YNO3rPcZkuRl1GNaql1JPEQccoOu2TTBotmN3b_ssBIYprOjtg6PjxB-JT6lk2DEF-j-TSuW-W7odBG_2BbzP-Y67xpBqIx_uYmcu13C-e29lQ2wtJusvTcCCdgUYeq1EHIb1uDjyQEvyjbdyg4cjfvv3AGpChVnAgvEGnQREDQJ1OhHAPNhMaCcIctfml9DWEEpKcw63XrlFqmYdTQXbtE4IhH7ydnHSRFHKMqILhq9SFew_XLJ1W6SjEKZj5PrnnoAk1QJp4MlsScWitWimjz5O2vA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = RED )   walletProviderRiskAssessment отсутствует &amp; walletProviderReasonCodes не содержит 0G &amp; walletProviderDeviceScore == 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning ( tokenizationPath = RED )   walletProviderRiskAssessment отсутствует &amp; walletProviderReasonCodes содержит 0G &amp; walletProviderDeviceScore == 1" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek9ETTJNak0xTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5NOWdDN1FONGxpRVdCUVMyZloyaE03bHpSOHNzRTdGcFlsYTYtRHpCUkRiR0J2R0lmTGZ6RHdOaEF1UXBEYmpNV09WTEdmNVRtV1B5NWxGdkhrZDlVSnh4UktibFdKNU5yQmhHcmE0Z19aNmQtbWVheHd5T2p2bzV4WHc1cmlYRTg4ZmlUQUU0bGFLODRGeXJpMjROMFJfVkF5QXl2Z1pRdUQwX3oySkRLVFhBSFM5WUpMNnl2WXA1Z3IwUWIteXk4WjNXejFpb01PLXdzWWpQLVAyR0tTSkI3MXlqZUJVN0staTlwMU1QVmhhM0RlZHpLTnJKR2J5YVNaRVNIeURkOVdEcVNDREx5NldXc21oZTFoUGdZV2N1VzdlRWc0a2h2UVMzRER3eTc0SDR2bndQcl9FZDhjejVSMW1UbXRTTTRjRGhPVl9xa240WHRTdWdnOGdYOWcubndpbERZakV5UERxekxoSy5NazRHcGxSOGItc0JRbkNNTGEwRkFabENkbm1QbzFWaGVYQlhIMHByNUY4bG1pM2c2cmgzOFduVllUaWhqaFFiWkkwZWlNV0N3TEU4cWVnMHFwakRwSGVXTmNBM01ORW1OMFdRbGMwNVdISUdNN3dHMVhHUENCQ1BGT3piUDlPUGsydVJGUFh5RWh6aDRaOW1udmk5TTV0dUNtQUltTWZabTBGZ0Q0NjlULWdadkdJQXFZS3ZnMjRvTWNtM2R1bFA4YmVONi1nVUoyQkp5eXBtNVAzcmZQdEY1dGd6NUpwaGt3TEg3UHJsMjZpdFNnQTZybHJGZEhHWENyNXRSX09FTV9qS3RrMGJvdnlCbE9KR3VENk5EUUtZQTJDRTFxdkt1WHF5aXAxS2pfU0ZvY3RNMF9qOVBONVpZNWd5ekpfQWpxbVVhYmVFUC1EMVAyeUszbVN4V2R3Zmk5WXd4ZHZkX21MakhjRFN5MzdXd3U5a3VvREo4RDhqdzFSVTk3cTAtTVJnRFNIN0pCdllnZ1hQNjB2dl8wTHFaZ0FSeDI2eFF5aWRVSndMRE9ib3ZHcE5WRHpxZzhONkI4NFR4UDNyczNySFN4eUxpTFI2VW1wQV81aG1mMkg5bm9EQUh5UW1WXzcteUNwdllQcE9qTERUSGwtc0V2OTBnTlNDMzQyZnhDY2RvN3JDaVdhS2w5T0FDUDNVUFNfbnlnU280UmxkMzVtX0dzSlVsXzVCVDlIZkh2WlpBd2xsTUVRZk5sYkVqaVBvSGZ5aElLcjh3MUFXV1BrcklkV2ZJWnl5Xzd3Q0dIdXp5YWx6akkteUdlellZVnIyWUJMUENYYlZpaWpZRTQxcEV3Y19TSzBkQ3RqMlF3a0I3OFhJM2VuMFpseGNBRG9Ma0JRMUg2TVBvM3Bhelh4QUVtUG52eFB5R0xNVkxDZlN5OWY3dkRoa1dEajNLeWtTZTBuenVGaDh4UG9FWl9mb1RtMi16QXk5bEJKWTl1aUtTS0xWRXB5ZE1EMkVkbjVKZjVJQW9QYlMxRGk5bzN1aFVtNFc0MVhFS01MZlN4dFZwR0tTYnY4VkE3QXJMNXpJNDZfUERFOWI4RmYzS1RZRjRyYlhMRzJ6NFN0dV93aXM2ckN3dERKYzBaSUE4eFdsd2FQVVlYU08zZ2I1QlBqb2lkSnVuV0N4NmJ3SkNyaWZ1NlVydUY2bC10OWZjSnhKT3dXVjU4VXZBQWtBMUJMMHNlOHdZbmNmWG5sbkRUU3dpTXM0QUVUQmtJYk0wcV82bEFpbGlOWXZ6c3ZhRDlzdnFsSWUxMEhXUHkwdFRZQ21pUWVqWnRhVjBkTU9TTVNpWmhMdVlDY0szY04yb1BNMFRxVk9QaEhNYUZMem1kVUNKWDQ3YnRiQ0ZNaV85LW9MR19HUTQ4WHdreWFGY0hzLUNEYXVmaS1oSjZ0TWtweWV2Tmw0UldwR3RyOHA5ZWRDM2xiRzBwMnAwUDVUNXJ3aTktMDBKT29xMlR1ejFTSHBXSDBsQXVmb2dPTzR4STdjQlNibmFXc21yR2ZEakJPWDcyeE5sV3YwSUtmM3FjLTIxODhaNGhmeThaWERURU5XSGlzMmJjdWN6b1c3aHdMLTYwUzNkUFltTnFQQnBRQ1RacV9nb3A2UGs3N3NhZEZfVHN6Wms1SmVNM2xfS3dEU1E0QlZwNGVFOGVVbU95a0tUMW5wS0JiVzVtQ0RHYk9SNTkxZWZNTkZvVXdSd1d6dXFsWkRtbmRwa2Z4LXJ1aE81Sy1ZRmR4UTRGc19ZeGo3d1o5c09PQU1DbHgySUwzb21FMUNiMUc2UDA1VUVzUWpUclJCUlJnc04tZEw1RnNESnY0Y3lkbVBWbjY0QlpVOWlKMDJVa1FuMHJ4R1JZT0dua1d6Qm55cXM0V3ljOWt4Rk43cXMyRjJBUzFVT2M2dktmN1lWWGFHS3puRmlIaXRNNnY0VnhGalRDYktlMG5ZUFFWMXNCUnI4TUxtNUJIOHEtZUNJWlNIR0VmVkF1Y0RiSUdNeWJlOVdyTjNabTNqYWNrRzh1MVBxSHNpdGRpWjd2U19WYTNvNFBaZ3FkV19uMFhfUWpGazJsNGFHOHBXckozRVZBWDBMaTZLMUVwczJtT3RpbkpPazEzQWItQ0tCZVlHbWI2a3hsQzl5NVJ6T0RNVzJjalcwV1RzVDNkaGFRX0VFeHF4Tk5adVhVX2JtOFk2SG51UkpYMnZkVGJpLVVHUXlsT0JXcktzWEhPVTYwWTNfbTNLZ25wSFZ3Nmc4a2dhLXQ3VkpxLVFkc3NPZm1rZ01uZnBLb25MeTY1TWlmWHdMZkdqUUlmeHJ1aGxWUFl3aFh3S3ZCSkI1NTVOeGlUWWh4VVZMQk9TZGJOT3NjaXBlM0ZoMFZDX2tRaTVjSDM0dkFxZW4yM1BGYnJTM1N0OVUwSjZ0YjhMaWVvRnVOUzk3VDFPd2RPNy1RS0dPLWNOVWZ5M0RpOEZ3ZjRrR0h0X09MMzdDUjlkaVFwYlg0TUNpZnkzWVVPaHl6STE1SDZqbmt6MGRmMk9ZaE9ab1hqRmZqX3dZdnRudHdsbm9YNVEydWNLTzAteWFmeFJURjlzZHp0eVc5aTZQanQ5N3puM1NnR1ZsOHVlYTNwbjBmVnZBSkhNbGVkNFE1VG9BU2FTWVByZ1dPQ1F2T1hna0lBRVZpZGtEWkxHcnloZzlBaHpla001VGV6bFc3a1NKVk1xWjU0Wl9iaURGb1ZqZkdDWjZNdXFvVHluVVBRbHVSQkZENzNBcTZIdDB4Y2dSSFVoMS1LQWpKY01jb3RDTGRQb0x4b3pybXh2SXlaUllQT1BSRkFhQlBNUVhhaUJzZm9FVFh3SjVLM2IyWkpGVjRLNS1nNDByR3RZSlhvNmdORjdmNnE0bjVvMTZMbXFuX0NVamlFVS1jei1QNVNMZkJqUEQ0RWxYNFppX3FkQzFoZ2JZa19nWDh5bTlKWXhXLWEyUmMyeXZ5Z3Z0M2RlaDBQRDlhTTEtQnpTNXhCZGUzVE1KcDUwMEhNQjM2OF9QMGxhQUdOMkN3emh5VXZXWDVEclNiMVJtWUhFaFdTX2M3WDg1dnVhelZyb29IR3FyTzVQZVBiOERGVS1CdWw4V3dMMjdYT1BIbXdtcG1qazdWZndodjJGclpSNEVXT3dSQlRpd2NGUUhVMFlIbW8yRDQxX1VLYzVBZWloSUZEdlRwMTdIbTVBMnl3ZGpqcXZUNVRoMC1BMmVQTXdVSUUxNDNWUTdDeEtTT09zQkcyWkdJNUwzbDdENFB6WWwzTDc5SG9EcTR4eEFNUGp6SW40blI1NF9pYzFpRGE0Z040aEVLMm5ja21DYTNHZVpLY29kVUF3M0R4Q1pfRHdfZVljbFFvVmJqRU14dTNYNW9hN2VzVmZLLVFWMWhwTnFuSnNyRGMzM3FDV1E5ZVRiY25VZ1pua3J4ZlFWRW9hN25iMmcxVFlGR0hxamczQlJseWR1bjZUXzg2NTdKZDZnMGFGRm9hRUs1aVItaGJ3QS1WTVVnY2s0NUxfc0NaTGd3SXE3N1Bzd0JmRWRjNGE0dHFrRzBWYVNodnRtWXFkZS1wSC1aOUthODB5d3BvZG13a21lS0tVUmVWckdzMThmdy1MWkhSSFRrd3lndWs4U2JDWFVGWUtPMkdhMmRPQ0VibkNhVDlMS3drcnRjb3M3clFLZl9VQzFRSGI2QUlRYlVBZmRUd3l2VVZXcWdqbXFIbjJXeUx6WXVoUVpqX1UwWEkyaWRkUllTZG5DWGdDNVRqMGxsc1llOXR4dTZOcXlEbGZMbVN1cXhsMTBBWDd5ZkhJckdjLi1Ia251YWxWWXRqU1djYklFNVBsVEE.Jx1EYAzIIVZ5DsVGyMfU3N57BkMQtQt5BaMU-FIfZqFb4v0ws8P7V2o5cnSctXpmK16oIbz9pdt281BPv-uUEptt48P5781HoIu2btBVd02NF2OuUEOKo4RPJeC2-S96Oy1rmljZIRbJMRq0TX6L-vA28_xvt2MRm-sA0PtKooNoTLtqlxm9pXCJwVI3OtnMnB47ndepnhSgCICe1EV1lH4bxYSYp6McsJTRUUaHss397SglycdcMZsr7vblGfghFnjbdQu0WkVXw1eDu8Cqjp5zK_VERl01qWPXlnRYB1GuoTH4FOi9YzWyr93lkYQBrWhx0rGiXDTwTJEgCosdCQ&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000002/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40000)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNNelF3TkN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LlYzZThfbVRhS3ZnVVZIRkJjSXdma2cwb2k0RjFNREc3bFg4RjRjaHNneVRtN3JfSG40aERsaGlmY2hpZk9Sd2gwcXRRaTd2bFBGY2N0LVdrdFMydktCakF6djl2TGhEZzB3dFV6YjkxV1VFYzc1WGp0ZXZpd2hIQ3hQeG5GN2ZSUUZBc1ZiQW55WUxfR0IzbXI5NzlrN3NRbm9LR2MwakdTbjZVcmw1NEY0NmV1b0tBa0Fnek5FenU2VDFvLWZpdzl6WTI5M2pRaFp3Tk9ZVXBlRXVPTFh6R2RybXpQejluMEd4SWI5aGZNSEdRcHZtVXlxNWc2WUlRaEtaVnJjM21ZeDRVYkZhNEJucUF0aE41b0tEdERGaDJhUDJrbVJNc09hY05BQ213czlWYklhOFFoM2tuRGhhMTMtbzNLcXVCMklDY2x3Mi1OVmdSdnQ3NklBamw1US5TcUVKRzVpLTQ1enNSZFJVLk1lZ3gzWTktdFVsTERLdUNQUXlzYUdfVVlLYnViWUY0NUtmdmE2S1Q2NkgzRVI4UHB5YUMxN204T3hCU01zNmNEMFpIOFJsRjZmLVZ0M2hmajNVTE9OTVFDbmtzb0I4M1J0STF5eWE2M25YTkhhRFJrS3NOTGpSVXBmcEVrNm9Bb3FYZHdzVnJoTzg3LVJtQlpnVTJQRjFkMGhwR0tGX1NXTVdXUGVRTXp3eU1mTmVmOF9kb1BZYklxaXhRcnMxS0pPVVNkVDlMLURyNHlvRzJjX1ZMMWpybEFDdVJENTZ4TllsXzFYdmxJV0MweDhiRnJXWTl5eGFsSTU1c2pFWkR1QlJzeHlrQV9ROGtPWnc3OXJUYmEyeERrR3p1RWI4YXdlVVItX1NueDB1LUpSR3FWNTRaX0hTWXBmRHdoYU9lNVQ2VFlNYlgwU05DbFh6cEhFcldrT01keWdFRGlYQnV2aWhBN2U1d043SnRQVnNVV1ZGVXNGeFZGWVdQTFpFNFZQSmxsaG9zMDFTUUFEamU4WGJGZjBmTHZRNUp0NjFWNkM4TnU0bmx6YUpNNTlxdW5aX3FjUF92ejNKZGJrVEF6cGJsbVF6bmFNbmJjRGNwbGtRQmFqQnJWY3d2SnRYUVNtWEQ3WVZrZEU0YlpHUmlIck5FTkZOalk0akwwOXNWSmJjdV84MlREclFFUjBpMXFkcVlDNjBuQ1VlZG93ajR0TVR4ZGpWUnhDckhzUU9yNzdyYXMyOWJvSWtGdGpHb0ZtTk5TeXlZa3NndHFrQlNRYTB6dmlhRWhJWGwxTjBHTnNQRGw4RFRLSEE1UmJ2NVZXcnRaU0lqdzFCNVRySWdHTU15WFFFX1loQzdPY0dhbUhvSHVPVjAwRzdNa1NNeVN3QzhHTDc1YVlaczFnTEVFZVg0ZnpyOS02aTg4SWtSc2l6MFlZem9rUG1IY3VBeXdyTl9GYW5fTDdhN3dnRzU0WkV5M3RtRk9lSi1GV05jbG5uenVsMnN5WGVSWjQxcUZBRVRXTU8tNXhZWGxMdEtrbUJrRHBQdkEwLTJ3bmhxcDhZT2pLVkdMQnRBck1ianA3aGJYZlFzbHRwUjlyNm9lbXJBaDFRMDB5dThidjgzWFlpVlk0b0ZQVEZHUTllbVRDT1RKRjJWNFZqaVllMmc3ZWZxY1Fjb0ZJUU5WUW1ZYVI0TU1rSGUybHZHUW9fN3R2VEJOZTdRcnZXaWdaU1FaV3VRWWZVbmdDN0FyT3Y3ZXBYcDh1cmFRWUZjcWx5TVNxLVpiWU91blRoWlYwdE1RNXhrRlpaZEJjRjJTNXQwVWhMVkt4Z1kyVjQ5N1JzODk5MmpuNUlKOUdjVE9zZzJnc2FLWTBpMU9oU0ZWTlRYc2lEbUlQR09aVmVIZGRfcGNVWHBiTmtTOTQ0dDdLTUhWaVZZQ3Fpa1A0NHhIN0tyeXRMRTZNZjlEWmJJTzd1eV9LbW1abndmcW9nczlZUFBwUmJhQ21FOHRHRDFPbjRDY25ZMEJDS2NxVEt4ZnExWXVqYjFscTdSa2UyYlVtZHhWOWJPaXdieVZWVzVyR1BnUmpGSkppWTlQRTVqWlhMUlNzdHJLYVowNmhQRmlNTDBIUkhNX01hVklJV0tjYkp4V3R2bmozV2JybmxrcF8xZlM4MllRSENiUHUwazZ0QklZR3FMTDY0dUZJemx3WXRLRGhzTkc3eWlTemg2ZjhIZ2F0a1c5V0xTM1RsbEJCZll5Ykw2WjJQVWV5VWhuSGhvM0loTHF1eGJ5RVMycUEuekhRTGsyVk96QU5paXVZOVhRaGotZw.vWECiHW1RexPeIlr2NV-5nXXQAoYmA8X-A7QIBGcmkPpG-mp_t4T3KhTVieTSQWIJd-IgOs8ca-ooHmeeGgcW_vllQqMoDnV22MVdb0ZGI7iyzM2EwVyzG6R7_6eQAau3mvm4QXF2eOmXP83QjG6TFLGuOVhFrxcN9W-IyiUYAmaaKnr32yfFmCQpRGIYXzrsoAGUcgre8fJfNAww3DqnefyfjXmAepLGLiJOCrmZUJ6hIvZ9AiKsz7cOJgmLJpxgvYpDsrkyt4ECPfFyqYuwwDHpdJvFl6aehnkPCBvdzTZE3kF8afZBXXKsPtQ-xE-g4OcfigllVPb2giKq_3-5g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40000 EncryptedData Month/Year #2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;tokenInfo&quot;: {&#xd;
        &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
        &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
        &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
        &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
        &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot; &#xd;
    },&#xd;
    &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
    &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
    &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
    &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;deviceInfo&quot;: {&#xd;
        &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
        &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
        &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
        &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
        &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
        &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
        &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
        &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
        &quot;osType&quot;: &quot;Android&quot;,&#xd;
        &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
        &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
        &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
        &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
        &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
        &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
        &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot; &#xd;
    },&#xd;
    &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNE1EZzVNVGd6T1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LmJHbzNNUm9waG9hRDNaRk9xVUZUUWZLd05pX2pldEpyN3NnZVZsQnRiWlV3b3JTVnphQnUzRHJJZVZGMlhTWUk4SUdNbDMxdlJZdWlCTjliNFNyaVpCeEVMZGU4WGNteUtWZzhKb0Z3RWpvbFVXRWxYVTRScFFZUHljNVJZU1JZa3A5M2FRRVdFZUVjTnc5QnVLNGZBX0VXUXp4Y29lcW1wakFfY2NvaTFmcE9EbENDV3JCU0hPNjBsaGRtYVEtb2hZVkNUWmJwU0RrYThCQ0hHY3dzc3JPOU1kQlZWaHc0Mmcwd04yTURaS1FmT21aYkdXdEg1aG45eXNGOFJqd1drelRxNGNYendqbVpGOFBMc09uN0RPRzE0dDVlOGxqOGE1ZThhdUQtdGxmemVheVByLWU2ZWR4ZFpER3RWcHU0OTlna1BVV1hXR2lNN0V5VlBKSWlfZy5XcG1DT0o4VzdiQWI1Q3g5LnhoSTN0VkJ4R3hJM0FrQ05XOEsyNG9pWXB3YnJJRHFhTHA2UF8yNGRUb3JUaEtTc2d0aFBNYjFoNjZDNFJjYzlBM2VvYlRCaHVWZzhKTFVZdWxkalhkb2dtd1NHSmlnQ1dDakQ0N29YSHpQeXBqb0ZjU200Y2ZCZ1Q2Y3VaY2dMZmcyM1BhUlhLLTQ1QjV3MGp0QzdUZnZaTnBoQ2RKMWN2Q3lTOE1uTXB2cXdxWGJRWjVyR2JObGlKX3hQYk5JWEQzcHllcDJLQmFKSUx6d1FLQzVhX2JiZjBpSUxHdFdWVC0zMVBUeVgzUFc3YmctcVRYZDJ5VFFIemlvY2hHZ3hKV3JmOXpfcTFoQXlZb3FFcjB0WjBIQVgza0lZRHZJcGpDTFV5NVB5aXdIcm80X1lXbjNwWnV4MjRpandJb1JlT2VESXVlV0dMR3RXT0dpNW9Ud21fMU9qQlR0UW5QdzRPbk9IMHg2NlJFMFB6Y0paNndlWXVFWWV3UjBpOHpzYXBYYnkzcW9mX0xUZFh4NDVUSHdmak9ycGlWMVkydGU2YkZiWUxsRTZvd3EzNldLcXpDSDNfaEpZTE5HWGhnVlpCcHlBaDZaaUpROXg2VDBvdDU2aVUwblY1OXRReUVMelF2SUpsQlN2NWlvWTZzZlI3OXhxcXNHazFlZVdHbzR4djdfNU5uQldyakJvQUhKQzd3U0cxUHNtWUNuTmdkR01OWUZnNFIyX2VmSGtkZGxFLUJYc1k2MHB6UXFuZkNacmlDYThWWGFTbEF2RkJabzNkSFhUdHlvd2VUaGR0MVJETVJ5YWduUnNZeHV2cGg5MTBDVnRidlRlNWtVcjlyRWJ3TWNEUWVkT1puZHNTLUdBRVBDVHFfS0FYYUg2a0dZeHFxMFU4eml5SDBURGVRZmtYdERCQUtLR3lzdnJXYlVZeG55R1lQa3VlVWFOQ2ZnUlpoQUdvQWQ4djJBdnZTaFp1Q0h3elRjQ1pZSzVVQVdKUXRTNVliV0NyVnRiVUNVX0ZXMndhdWFwUkRmd01lOTdNMUJCMEVxbzZmMnExcWtDcW1pWjh4MmtGSVBtYW5MeVI0cjF3T3ZuaG1TOFZLZlpIY1FvVUNqNnZpTUVMSVpleGlYZ05MMFhQQ29KRTVpOXVCWVVRZTNqY1lrand1eGF1aDZtNnItSXdtTWxFR0dzbXlqdVNIbXo0VmNfRXZwY3lRWWs4eFpxZmFyYVFqV0sxRzRpT1BOTFU4d2lwMlV2Y0twb29oZTcycU1BZ0h3cGZfSGx1MEs3UXlfQWNaQXhSOTJvQTU4NzNycVNOMG1aTjVDMHA2ajczekYwbkhDZl9HNWZMSHVNdE43R1JqNEZuLWI0aVl4dWJYWWFfbkx3NzgzVkFnWU1lZWEzN3p1X3FVZDhzaU16UndqTjZJNk9CVTBHSWRETUJxdTNQdFhfdEg2YXJ5czE4RkY4Yk9ZVmZpUGgwZWFiOVZuSzU2NGphQ1JDQmRwTXN6dnJvTzVBYXNOQUs4SUNJRks3QWlFWU9xdnZrR00xMDVLempJX3R0QU1yeWNRWmEyYmRZYnpKYlRKSVdYU29OVTMzeEhJQ1c0ZXRETVdkamZBVGdqM1VGZFJpUzFVMjVIbGpaZkdBMnpWVldhS2VnZnlHZ1pjQlJUQkw1Y3VUcHNVX1o4cjBrWlFFTXBIQVVlTUtJTWZNaVNhZ1BBaG9Dc3VOOGJxX0QtWDNaRW5PTm53NWZEQkRvSnZRQUYwY0d1emxLOVJhaEdtZHJmdHk0bGhaMXMxZWF1VmY4TWZyN2pRa0RLX0NlN01zclZlQW9jZFlsdUV3bjJzQ1BQaGpVbDZ6MkVDbFlCT29xQUVFcFY3LThsMm5pZE9vbThLcFpLNUpDaE5vYlVKUi5kNVRHbURyYm1HX2EwS0FENjdTeUp3.RJjpXXUWNn1gwkVruEOmEhaGBSZ85TMj3Ps5Oy4QNjVSt7G9ExWrX87FiBIcPK4xLqQ2mf_4AEabkz_foOGd7hRXEH8gsZaMoBja8W_nS5Abq3qmIo1Abt5c8EHfH_ctk9fVjO7nXsu72fYjxDmHdF0N-70sPmJqScVKcZ7rmQI9snhuimjdn7ZAuIQbqOVgqZaTwHyE9fzVdSORR1nXrnS389SKgXQqFI2q91fHmCsnFjOjQtCvISTmw1SeZsnWipRuebJAWMhnONe3n4VPkTLY8oID_Z_Rmm0K4SVuSUStX8G8z6r5aovbIUUHo6ZD8h-e6i_azkAJ9WrYA9bBug&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40000 EncryptedData Month/Year #3)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;tokenInfo&quot;: {&#xd;
        &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
        &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
        &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
        &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
        &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot; &#xd;
    },&#xd;
    &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
    &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
    &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
    &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;deviceInfo&quot;: {&#xd;
        &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
        &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
        &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
        &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
        &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
        &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
        &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
        &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
        &quot;osType&quot;: &quot;Android&quot;,&#xd;
        &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
        &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
        &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
        &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
        &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
        &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
        &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot; &#xd;
    },&#xd;
    &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNE1EZzVNVGd6T1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LmJHbzNNUm9waG9hRDNaRk9xVUZUUWZLd05pX2pldEpyN3NnZVZsQnRiWlV3b3JTVnphQnUzRHJJZVZGMlhTWUk4SUdNbDMxdlJZdWlCTjliNFNyaVpCeEVMZGU4WGNteUtWZzhKb0Z3RWpvbFVXRWxYVTRScFFZUHljNVJZU1JZa3A5M2FRRVdFZUVjTnc5QnVLNGZBX0VXUXp4Y29lcW1wakFfY2NvaTFmcE9EbENDV3JCU0hPNjBsaGRtYVEtb2hZVkNUWmJwU0RrYThCQ0hHY3dzc3JPOU1kQlZWaHc0Mmcwd04yTURaS1FmT21aYkdXdEg1aG45eXNGOFJqd1drelRxNGNYendqbVpGOFBMc09uN0RPRzE0dDVlOGxqOGE1ZThhdUQtdGxmemVheVByLWU2ZWR4ZFpER3RWcHU0OTlna1BVV1hXR2lNN0V5VlBKSWlfZy5XcG1DT0o4VzdiQWI1Q3g5LnhoSTN0VkJ4R3hJM0FrQ05XOEsyNG9pWXB3YnJJRHFhTHA2UF8yNGRUb3JUaEtTc2d0aFBNYjFoNjZDNFJjYzlBM2VvYlRCaHVWZzhKTFVZdWxkalhkb2dtd1NHSmlnQ1dDakQ0N29YSHpQeXBqb0ZjU200Y2ZCZ1Q2Y3VaY2dMZmcyM1BhUlhLLTQ1QjV3MGp0QzdUZnZaTnBoQ2RKMWN2Q3lTOE1uTXB2cXdxWGJRWjVyR2JObGlKX3hQYk5JWEQzcHllcDJLQmFKSUx6d1FLQzVhX2JiZjBpSUxHdFdWVC0zMVBUeVgzUFc3YmctcVRYZDJ5VFFIemlvY2hHZ3hKV3JmOXpfcTFoQXlZb3FFcjB0WjBIQVgza0lZRHZJcGpDTFV5NVB5aXdIcm80X1lXbjNwWnV4MjRpandJb1JlT2VESXVlV0dMR3RXT0dpNW9Ud21fMU9qQlR0UW5QdzRPbk9IMHg2NlJFMFB6Y0paNndlWXVFWWV3UjBpOHpzYXBYYnkzcW9mX0xUZFh4NDVUSHdmak9ycGlWMVkydGU2YkZiWUxsRTZvd3EzNldLcXpDSDNfaEpZTE5HWGhnVlpCcHlBaDZaaUpROXg2VDBvdDU2aVUwblY1OXRReUVMelF2SUpsQlN2NWlvWTZzZlI3OXhxcXNHazFlZVdHbzR4djdfNU5uQldyakJvQUhKQzd3U0cxUHNtWUNuTmdkR01OWUZnNFIyX2VmSGtkZGxFLUJYc1k2MHB6UXFuZkNacmlDYThWWGFTbEF2RkJabzNkSFhUdHlvd2VUaGR0MVJETVJ5YWduUnNZeHV2cGg5MTBDVnRidlRlNWtVcjlyRWJ3TWNEUWVkT1puZHNTLUdBRVBDVHFfS0FYYUg2a0dZeHFxMFU4eml5SDBURGVRZmtYdERCQUtLR3lzdnJXYlVZeG55R1lQa3VlVWFOQ2ZnUlpoQUdvQWQ4djJBdnZTaFp1Q0h3elRjQ1pZSzVVQVdKUXRTNVliV0NyVnRiVUNVX0ZXMndhdWFwUkRmd01lOTdNMUJCMEVxbzZmMnExcWtDcW1pWjh4MmtGSVBtYW5MeVI0cjF3T3ZuaG1TOFZLZlpIY1FvVUNqNnZpTUVMSVpleGlYZ05MMFhQQ29KRTVpOXVCWVVRZTNqY1lrand1eGF1aDZtNnItSXdtTWxFR0dzbXlqdVNIbXo0VmNfRXZwY3lRWWs4eFpxZmFyYVFqV0sxRzRpT1BOTFU4d2lwMlV2Y0twb29oZTcycU1BZ0h3cGZfSGx1MEs3UXlfQWNaQXhSOTJvQTU4NzNycVNOMG1aTjVDMHA2ajczekYwbkhDZl9HNWZMSHVNdE43R1JqNEZuLWI0aVl4dWJYWWFfbkx3NzgzVkFnWU1lZWEzN3p1X3FVZDhzaU16UndqTjZJNk9CVTBHSWRETUJxdTNQdFhfdEg2YXJ5czE4RkY4Yk9ZVmZpUGgwZWFiOVZuSzU2NGphQ1JDQmRwTXN6dnJvTzVBYXNOQUs4SUNJRks3QWlFWU9xdnZrR00xMDVLempJX3R0QU1yeWNRWmEyYmRZYnpKYlRKSVdYU29OVTMzeEhJQ1c0ZXRETVdkamZBVGdqM1VGZFJpUzFVMjVIbGpaZkdBMnpWVldhS2VnZnlHZ1pjQlJUQkw1Y3VUcHNVX1o4cjBrWlFFTXBIQVVlTUtJTWZNaVNhZ1BBaG9Dc3VOOGJxX0QtWDNaRW5PTm53NWZEQkRvSnZRQUYwY0d1emxLOVJhaEdtZHJmdHk0bGhaMXMxZWF1VmY4TWZyN2pRa0RLX0NlN01zclZlQW9jZFlsdUV3bjJzQ1BQaGpVbDZ6MkVDbFlCT29xQUVFcFY3LThsMm5pZE9vbThLcFpLNUpDaE5vYlVKUi5kNVRHbURyYm1HX2EwS0FENjdTeUp3.RJjpXXUWNn1gwkVruEOmEhaGBSZ85TMj3Ps5Oy4QNjVSt7G9ExWrX87FiBIcPK4xLqQ2mf_4AEabkz_foOGd7hRXEH8gsZaMoBja8W_nS5Abq3qmIo1Abt5c8EHfH_ctk9fVjO7nXsu72fYjxDmHdF0N-70sPmJqScVKcZ7rmQI9snhuimjdn7ZAuIQbqOVgqZaTwHyE9fzVdSORR1nXrnS389SKgXQqFI2q91fHmCsnFjOjQtCvISTmw1SeZsnWipRuebJAWMhnONe3n4VPkTLY8oID_Z_Rmm0K4SVuSUStX8G8z6r5aovbIUUHo6ZD8h-e6i_azkAJ9WrYA9bBug&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40000 walletAccountEmailAddressHash=&apos;&apos;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNNelF3TkN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LlYzZThfbVRhS3ZnVVZIRkJjSXdma2cwb2k0RjFNREc3bFg4RjRjaHNneVRtN3JfSG40aERsaGlmY2hpZk9Sd2gwcXRRaTd2bFBGY2N0LVdrdFMydktCakF6djl2TGhEZzB3dFV6YjkxV1VFYzc1WGp0ZXZpd2hIQ3hQeG5GN2ZSUUZBc1ZiQW55WUxfR0IzbXI5NzlrN3NRbm9LR2MwakdTbjZVcmw1NEY0NmV1b0tBa0Fnek5FenU2VDFvLWZpdzl6WTI5M2pRaFp3Tk9ZVXBlRXVPTFh6R2RybXpQejluMEd4SWI5aGZNSEdRcHZtVXlxNWc2WUlRaEtaVnJjM21ZeDRVYkZhNEJucUF0aE41b0tEdERGaDJhUDJrbVJNc09hY05BQ213czlWYklhOFFoM2tuRGhhMTMtbzNLcXVCMklDY2x3Mi1OVmdSdnQ3NklBamw1US5TcUVKRzVpLTQ1enNSZFJVLk1lZ3gzWTktdFVsTERLdUNQUXlzYUdfVVlLYnViWUY0NUtmdmE2S1Q2NkgzRVI4UHB5YUMxN204T3hCU01zNmNEMFpIOFJsRjZmLVZ0M2hmajNVTE9OTVFDbmtzb0I4M1J0STF5eWE2M25YTkhhRFJrS3NOTGpSVXBmcEVrNm9Bb3FYZHdzVnJoTzg3LVJtQlpnVTJQRjFkMGhwR0tGX1NXTVdXUGVRTXp3eU1mTmVmOF9kb1BZYklxaXhRcnMxS0pPVVNkVDlMLURyNHlvRzJjX1ZMMWpybEFDdVJENTZ4TllsXzFYdmxJV0MweDhiRnJXWTl5eGFsSTU1c2pFWkR1QlJzeHlrQV9ROGtPWnc3OXJUYmEyeERrR3p1RWI4YXdlVVItX1NueDB1LUpSR3FWNTRaX0hTWXBmRHdoYU9lNVQ2VFlNYlgwU05DbFh6cEhFcldrT01keWdFRGlYQnV2aWhBN2U1d043SnRQVnNVV1ZGVXNGeFZGWVdQTFpFNFZQSmxsaG9zMDFTUUFEamU4WGJGZjBmTHZRNUp0NjFWNkM4TnU0bmx6YUpNNTlxdW5aX3FjUF92ejNKZGJrVEF6cGJsbVF6bmFNbmJjRGNwbGtRQmFqQnJWY3d2SnRYUVNtWEQ3WVZrZEU0YlpHUmlIck5FTkZOalk0akwwOXNWSmJjdV84MlREclFFUjBpMXFkcVlDNjBuQ1VlZG93ajR0TVR4ZGpWUnhDckhzUU9yNzdyYXMyOWJvSWtGdGpHb0ZtTk5TeXlZa3NndHFrQlNRYTB6dmlhRWhJWGwxTjBHTnNQRGw4RFRLSEE1UmJ2NVZXcnRaU0lqdzFCNVRySWdHTU15WFFFX1loQzdPY0dhbUhvSHVPVjAwRzdNa1NNeVN3QzhHTDc1YVlaczFnTEVFZVg0ZnpyOS02aTg4SWtSc2l6MFlZem9rUG1IY3VBeXdyTl9GYW5fTDdhN3dnRzU0WkV5M3RtRk9lSi1GV05jbG5uenVsMnN5WGVSWjQxcUZBRVRXTU8tNXhZWGxMdEtrbUJrRHBQdkEwLTJ3bmhxcDhZT2pLVkdMQnRBck1ianA3aGJYZlFzbHRwUjlyNm9lbXJBaDFRMDB5dThidjgzWFlpVlk0b0ZQVEZHUTllbVRDT1RKRjJWNFZqaVllMmc3ZWZxY1Fjb0ZJUU5WUW1ZYVI0TU1rSGUybHZHUW9fN3R2VEJOZTdRcnZXaWdaU1FaV3VRWWZVbmdDN0FyT3Y3ZXBYcDh1cmFRWUZjcWx5TVNxLVpiWU91blRoWlYwdE1RNXhrRlpaZEJjRjJTNXQwVWhMVkt4Z1kyVjQ5N1JzODk5MmpuNUlKOUdjVE9zZzJnc2FLWTBpMU9oU0ZWTlRYc2lEbUlQR09aVmVIZGRfcGNVWHBiTmtTOTQ0dDdLTUhWaVZZQ3Fpa1A0NHhIN0tyeXRMRTZNZjlEWmJJTzd1eV9LbW1abndmcW9nczlZUFBwUmJhQ21FOHRHRDFPbjRDY25ZMEJDS2NxVEt4ZnExWXVqYjFscTdSa2UyYlVtZHhWOWJPaXdieVZWVzVyR1BnUmpGSkppWTlQRTVqWlhMUlNzdHJLYVowNmhQRmlNTDBIUkhNX01hVklJV0tjYkp4V3R2bmozV2JybmxrcF8xZlM4MllRSENiUHUwazZ0QklZR3FMTDY0dUZJemx3WXRLRGhzTkc3eWlTemg2ZjhIZ2F0a1c5V0xTM1RsbEJCZll5Ykw2WjJQVWV5VWhuSGhvM0loTHF1eGJ5RVMycUEuekhRTGsyVk96QU5paXVZOVhRaGotZw.vWECiHW1RexPeIlr2NV-5nXXQAoYmA8X-A7QIBGcmkPpG-mp_t4T3KhTVieTSQWIJd-IgOs8ca-ooHmeeGgcW_vllQqMoDnV22MVdb0ZGI7iyzM2EwVyzG6R7_6eQAau3mvm4QXF2eOmXP83QjG6TFLGuOVhFrxcN9W-IyiUYAmaaKnr32yfFmCQpRGIYXzrsoAGUcgre8fJfNAww3DqnefyfjXmAepLGLiJOCrmZUJ6hIvZ9AiKsz7cOJgmLJpxgvYpDsrkyt4ECPfFyqYuwwDHpdJvFl6aehnkPCBvdzTZE3kF8afZBXXKsPtQ-xE-g4OcfigllVPb2giKq_3-5g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40000 PAN REF ID)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNNelF3TkN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LlYzZThfbVRhS3ZnVVZIRkJjSXdma2cwb2k0RjFNREc3bFg4RjRjaHNneVRtN3JfSG40aERsaGlmY2hpZk9Sd2gwcXRRaTd2bFBGY2N0LVdrdFMydktCakF6djl2TGhEZzB3dFV6YjkxV1VFYzc1WGp0ZXZpd2hIQ3hQeG5GN2ZSUUZBc1ZiQW55WUxfR0IzbXI5NzlrN3NRbm9LR2MwakdTbjZVcmw1NEY0NmV1b0tBa0Fnek5FenU2VDFvLWZpdzl6WTI5M2pRaFp3Tk9ZVXBlRXVPTFh6R2RybXpQejluMEd4SWI5aGZNSEdRcHZtVXlxNWc2WUlRaEtaVnJjM21ZeDRVYkZhNEJucUF0aE41b0tEdERGaDJhUDJrbVJNc09hY05BQ213czlWYklhOFFoM2tuRGhhMTMtbzNLcXVCMklDY2x3Mi1OVmdSdnQ3NklBamw1US5TcUVKRzVpLTQ1enNSZFJVLk1lZ3gzWTktdFVsTERLdUNQUXlzYUdfVVlLYnViWUY0NUtmdmE2S1Q2NkgzRVI4UHB5YUMxN204T3hCU01zNmNEMFpIOFJsRjZmLVZ0M2hmajNVTE9OTVFDbmtzb0I4M1J0STF5eWE2M25YTkhhRFJrS3NOTGpSVXBmcEVrNm9Bb3FYZHdzVnJoTzg3LVJtQlpnVTJQRjFkMGhwR0tGX1NXTVdXUGVRTXp3eU1mTmVmOF9kb1BZYklxaXhRcnMxS0pPVVNkVDlMLURyNHlvRzJjX1ZMMWpybEFDdVJENTZ4TllsXzFYdmxJV0MweDhiRnJXWTl5eGFsSTU1c2pFWkR1QlJzeHlrQV9ROGtPWnc3OXJUYmEyeERrR3p1RWI4YXdlVVItX1NueDB1LUpSR3FWNTRaX0hTWXBmRHdoYU9lNVQ2VFlNYlgwU05DbFh6cEhFcldrT01keWdFRGlYQnV2aWhBN2U1d043SnRQVnNVV1ZGVXNGeFZGWVdQTFpFNFZQSmxsaG9zMDFTUUFEamU4WGJGZjBmTHZRNUp0NjFWNkM4TnU0bmx6YUpNNTlxdW5aX3FjUF92ejNKZGJrVEF6cGJsbVF6bmFNbmJjRGNwbGtRQmFqQnJWY3d2SnRYUVNtWEQ3WVZrZEU0YlpHUmlIck5FTkZOalk0akwwOXNWSmJjdV84MlREclFFUjBpMXFkcVlDNjBuQ1VlZG93ajR0TVR4ZGpWUnhDckhzUU9yNzdyYXMyOWJvSWtGdGpHb0ZtTk5TeXlZa3NndHFrQlNRYTB6dmlhRWhJWGwxTjBHTnNQRGw4RFRLSEE1UmJ2NVZXcnRaU0lqdzFCNVRySWdHTU15WFFFX1loQzdPY0dhbUhvSHVPVjAwRzdNa1NNeVN3QzhHTDc1YVlaczFnTEVFZVg0ZnpyOS02aTg4SWtSc2l6MFlZem9rUG1IY3VBeXdyTl9GYW5fTDdhN3dnRzU0WkV5M3RtRk9lSi1GV05jbG5uenVsMnN5WGVSWjQxcUZBRVRXTU8tNXhZWGxMdEtrbUJrRHBQdkEwLTJ3bmhxcDhZT2pLVkdMQnRBck1ianA3aGJYZlFzbHRwUjlyNm9lbXJBaDFRMDB5dThidjgzWFlpVlk0b0ZQVEZHUTllbVRDT1RKRjJWNFZqaVllMmc3ZWZxY1Fjb0ZJUU5WUW1ZYVI0TU1rSGUybHZHUW9fN3R2VEJOZTdRcnZXaWdaU1FaV3VRWWZVbmdDN0FyT3Y3ZXBYcDh1cmFRWUZjcWx5TVNxLVpiWU91blRoWlYwdE1RNXhrRlpaZEJjRjJTNXQwVWhMVkt4Z1kyVjQ5N1JzODk5MmpuNUlKOUdjVE9zZzJnc2FLWTBpMU9oU0ZWTlRYc2lEbUlQR09aVmVIZGRfcGNVWHBiTmtTOTQ0dDdLTUhWaVZZQ3Fpa1A0NHhIN0tyeXRMRTZNZjlEWmJJTzd1eV9LbW1abndmcW9nczlZUFBwUmJhQ21FOHRHRDFPbjRDY25ZMEJDS2NxVEt4ZnExWXVqYjFscTdSa2UyYlVtZHhWOWJPaXdieVZWVzVyR1BnUmpGSkppWTlQRTVqWlhMUlNzdHJLYVowNmhQRmlNTDBIUkhNX01hVklJV0tjYkp4V3R2bmozV2JybmxrcF8xZlM4MllRSENiUHUwazZ0QklZR3FMTDY0dUZJemx3WXRLRGhzTkc3eWlTemg2ZjhIZ2F0a1c5V0xTM1RsbEJCZll5Ykw2WjJQVWV5VWhuSGhvM0loTHF1eGJ5RVMycUEuekhRTGsyVk96QU5paXVZOVhRaGotZw.vWECiHW1RexPeIlr2NV-5nXXQAoYmA8X-A7QIBGcmkPpG-mp_t4T3KhTVieTSQWIJd-IgOs8ca-ooHmeeGgcW_vllQqMoDnV22MVdb0ZGI7iyzM2EwVyzG6R7_6eQAau3mvm4QXF2eOmXP83QjG6TFLGuOVhFrxcN9W-IyiUYAmaaKnr32yfFmCQpRGIYXzrsoAGUcgre8fJfNAww3DqnefyfjXmAepLGLiJOCrmZUJ6hIvZ9AiKsz7cOJgmLJpxgvYpDsrkyt4ECPfFyqYuwwDHpdJvFl6aehnkPCBvdzTZE3kF8afZBXXKsPtQ-xE-g4OcfigllVPb2giKq_3-5g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (некорректная валидация ISE40005/OK)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;tokenInfo&quot;: {&#xd;
      &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
      &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
      &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
      &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
      &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;panReferenceID&quot;: &quot;V-5180702149300000000011&quot;,&#xd;
    &quot;walletAccountEmailAddressHash&quot;: &quot;3D53EEB00F3E95E5C9C7C55875FC1723E9C8D8C9980C02F84A88065B96B1BFAA&quot;,&#xd;
    &quot;clientWalletAccountID&quot;: &quot;3D53EEB00F3400000000000000000011&quot;,&#xd;
    &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNNelUzTVN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LmFkNVRwR0k1WkhOUGRhcjZ6NVRfSUVsdmhObzN0ZXkza05vOWFlQVltYTI2MTFUZ3NRRTVWWm1kcVdZVFE3OUM0bDJPQ1BOX2w1bVAxUzFnQkt2RDFILWl3OWdiWkJLMEdhbWdHYURWTlNIdDBWXzhHRmhxUWpnc1lDTVVHeFJsYURZX3ZqU1VneGU0aGJXMlpUTFlRTzFnc19jdUVCOV9hNU1lbENLWHh5RW1FV0JIREYzZFFsb3VYd2pheHpLY2NSZ093dFBzY0NobEFCZVpISjdkOGdsazJYa29VRnE5djhEM2ZfSm93U0hoX0pqcHp2bDFrSkFzN0Yxb3FwcDcwcnRLbV9tZk9xelE4c3lQSUQ4RjFCQWxKX2Y1dk9pSTdMZlg3WHJpWGkzbUdHalZ0emZocUlvR2FvU0RBMXd1d2dWMTRrU2ZuTDZvcjNybGlGSmx0QS43cUFpTkpJZ0JmdEhzay04LkFST2FqVUFMODllVUJXTkpMeU5SY3ViSTRveGFMREVWV3dUQzVyMmxjZDRJRmNZTjdEVVJ3R2ZfZmlRV0pxTG9aR2hqdENXaG9aTFlTdmV5SDlPM0pmQXJ1N0JJQ0FGUURJaU4xdllnSEJxRHNteVRUR1ZSOF9TOW5lWlpNQnppV3NRQkRZOFBETFpBU0d1c0t6eEtZUkMwcEdBNkhKTlVtMzNkN05mSEc4RXhwT1ZSeWg4TWxSREhiTjdiQ01kbHk5Y0RXX2YwbVI2VjIxTlh3UnkyeklLS082ZndIWUU4S1FXdk1vLUh0amdzc1QxRXlheWtyY3k2amh2TmNTbGZ4UlVyTlB1aW9tREdoWWp1RDJOR19aTEM4T2c2ejlaSENpLVBtMElyaW1ZSVY5MnllcmJDRzRGc1lxek1zcG1oeWlIbkJDODlVMVEwdDdNNV8xa2lURVhtZjF0Qnl4LUhBTmdOYUk5ejNnOXlOcmRjSlRRZTB4dXRDb2kyODc3aFBKUUhWempzUTZCYlFxQXl0eXI3bUFEeldqUGVDNzUtTGNTemc1UTcxSkpHZkZPZkFUWlVtX3ZSNmlEeGJ5dElfU3UyYnhkcmJCQ0ZWck9OUXNtUHhyMWdnQlA0enJLUTJLOWdDVUF4VURrSUxtOHk3SlFQR3ZraUxWMlVlbzVYTDByNklvZGluZWotdU5sdkZRUVYxRWVRU20xVUNxeFhHdHVCejBNb2FQeGdkUVF0Wm5felc2eHF2WkNDLWpJRlhSblRrb3ZWd0o4NC1jUjVlU2ZJRXJRUXVLUktSb2JjMFc3Y2RpM2lpS282SWRZWER2SUtVM3VzZ3NuYWZfM05ueGFmcXlSWkxoVjZheXRDUjcxU21LSm5McHRTVUYwM0JOV2gyTy1uRVo0X2Jfanl0UTdmeUF5STFqVTd5M0xZdldJVlplMU1HT3VyQnFrVVJBN3h2QTRxNTlvSmNaN1p3NWRWMzJNMDBBLVRWc0tnWHRtdUxETm1yUFRWZjU1RTFHV09TRm9sRE9UU1U3UzJ3VjByeUprcjlYcHhhZ05scGdncFY4WGFsNXRiQlcxdzRDQThlSE1mWVZha0ZDdW45TUtpYnlKUFN6U1pGUTJRUDBvZ3NhXzNZUXhrZ3RwV19TcmFYemNuWmJnMThZMkZhMkRHMFByYWtHVVBmWlpBMVlwbUNMdEJnRFZnVjZENEpYdVJoU0xJaHJUWEFRb0swYzJGcWtoR19Kd2xCQTlKVlpDRHZGUlNZT0xIcDJxTkJ1ZmhXenIzZ3o2cGNJU295ZmNKa1hQT1g3bHgwQTN1ZEpvYnUtQUZ5VlF5b3Q1eGF1MUFLam5wdm9abHVPbmNGZlE5Y3o5UTl3V0gwaWh3Ung5Z1VMX3N4LUZJTEJ0a1pMcHJjQkhLTDhSblNMTDhBRGhQOEdRY3pUZmtEaFJEb3liM29UbFVjaFFFQVFWVWZ5WHdST3d2REg0SVNHbWRkQXRETXVtSVlRTEUyR1QxZThiWUt3MjFvN0RkbkZYNElYR2Zqclg0QkhNYlR1Q0dpVzgtSThOaWhGZnotVTJMOUhOTnlBWjRJdzNFY3lIbTRGbEJOM0tENEFOQ0MzVHJpY3MySndZLXd2TVdRMDc5blpxa09iRVE0enJ6aEQwWC05MmpIOXl6QWJUMXlWWkVQU2R0M3k4bmxXZHJiYnpPWWxLel9relhjTmFtQVJKWjN3cE9TQnpHZFcteU5fUVNITWM4VkxPWVpfZi1MMXIyWkV5R3BqZUI5dFAyMVM2UkZydUh6c0RPZFNjM3VVOFBmcTJpeElBRUJrMHk4ZjRRYlBvc3dnSlpMZlV6d01Vb1hvQVVsRDQuQXF5dFFNd3hwcE9QR3FBRzZOUFNGdw.S_A21deGXmddfDwUO4T2cFYQwy3_SSPXJAuaSZRvVY1lh39c_a01y_-bUh1c3NybXb9gVD3aH3uxg8uHHL9d7lVqOy8hqAetqzLM0onirPb4EDBnoRM1i0h-FajAzzww6q_SD2pqRmVfWVpoNdAnD8KSHh-NGygfOeBEEblb6zIiiq9M1W30po17dF0x937Lyfah0ETU3edzkvxficO4cs8Hswn3pSy3J88LYZ6ecRqikeMw-j5BwxzhmkKNQfmyekN-5P1XzPMu3C6vmGV66rH221uZAG93x-yfhwj7ZOYvBCq6KGiCzdnu_Zv2h6IevEVInmMvUw_RkAmtofm0sg&quot;,&#xd;
    &quot;deviceInfo&quot;: {&#xd;
        &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42001&quot;,&#xd;
        &quot;deviceLanguageCode&quot;: &quot;cat&quot;,&#xd;
        &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
        &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
        &quot;deviceName&quot;: &quot;iPhone de Maria&quot;,&#xd;
        &quot;deviceLocation&quot;: &quot;+41.98/+2.82&quot;,&#xd;
        &quot;deviceIPAddressV4&quot;: &quot;B05368E1&quot;,&#xd;
        &quot;tokenProtectionMethod&quot;: &quot;&quot;,&#xd;
        &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
        &quot;osType&quot;: &quot;&quot;,&#xd;
        &quot;osVersion&quot;: &quot;&quot;,&#xd;
        &quot;osBuildID&quot;: &quot;&quot;,&#xd;
        &quot;deviceManufacturer&quot;: &quot;&quot;,&#xd;
        &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
        &quot;deviceModel&quot;: &quot;&quot;,&#xd;
        &quot;locationSource&quot;: &quot;&quot; &#xd;
    },&#xd;
    &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
    &quot;termsAndConditions&quot;: {&#xd;
        &quot;id&quot;: &quot;773febb55da5453aa25a40b56fd4e07e&quot;,&#xd;
        &quot;date&quot;: &quot;2020-04-05T13:59:13.666+0000&quot; &#xd;
    },&#xd;
    &quot;dateTimeOfEvent&quot;: &quot;2020-04-05T14:08:13.000Z&quot;,&#xd;
    &quot;actionCode&quot;: &quot;85&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Invalid Expiration Date - ISE40001 &quot;actionCode&quot;:&quot;14&quot; ISS_ERROR_INVALID_PAN (code=2))" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmxub3duISEhIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM01EQXlOakkyTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LlpiNnJfZS1ncWpGNFo3cEhjc0JsQ0lVdi1yMlh5Qzk2Szl0NFRfWER2VW5aMXVMT0F2ckd0cTBNVFpPTTAzczRfaGNFRGNHRDZyVEdLQXBkNEdPSmt6bDZVNWplVFotNFNQZURmWGpQZ3N2SENlWl9iQ1k1OEZwdVlKMVJaYmZiQjhxd3I1eGJvSHhJZDBjVVV4M29teFJYSE1RRFFScjM0MFZUaFpJSU80anJBa2ljV25sMk1sZzIwSG91TTZxVFBwb0JzTllKb0RaZkp6R1YyNTloWEVFa0dnOXNoZTdWMngwbHBjSGhYUVRwcWZpX0pYZjdTQ1BtbDZYLVlIN2h1enRxNmZxLWVlS1hRYmFGZjhOYkFQVWRmY1lSTEZyYXp1NnRQa2t5NTV0QndVNzlEbGFaRVJFUlcyWnZPSm01d1A5NGMzTUFEcF9uUU45ZU40Q1hDdy5kMmxwV3BfYVc1QXdlSVpQLjQwX3ZyQTFWQ0xnSW9qM2hNNnRldDhxazVQbVlZT2JjQ3Rfb3h2X1g4QzJQRFdJU1hDb3E4RktwZWhjaFI3d09lR0tPcGpzNmZIWDVrbndsbHJJYXBQVDFEZmg1SmEydy1zV2doWnlZSFhULVhkUFVmeXF1NTd1anBvaFR1cVlNWHktaTNFWWlqb09PdTdtUFFhbUtRUUp4a09NWmRkZm5raVN3NVY5bjhvQU5pbjhMc2VXZEZjZTg1RmVCV0dGRnB3MXNZby1PeVUtSnJmRkl6SEUtSEgtZExEbUxRTUtacHJYcEc2Y3g3WlpNbkIzMWx3SVJCeTJTZ2JPUHFISnhnNmg3S2NNOW5XMTc4TVJrajRRX2ZXVmdnbDVrUnZ0NDg5RVFoV2MtcElBeURoNWNMdzB0cGYxR3RJMzBGcWpDMGszLTZURXlPdXNKN2JaQ01TYW9ndVVSaENySWs4ZW5LdmpNWTZia0RaVkZCbjNpN2N4LXp5SmlabVN4Q2g0Nk5JdHowQ1dmcklSMlRIZGlxQU5TLVIzYXdobVpFeFRJa3BxVkZyeGk1VXBWcG1ZRkxYUHNMRGRpOW1HY0U2YzFCN1lXUmd3cDNKbjBIcjJBMUNYa2d4ckNjQ3NxLVUzLWhYQjRIekpWOHJ4U0pMZjhKTGpmZDRFMUF2RmVSWmJTZzRPQy1pbW9mY044Sk1Ob0FZWDFrTi1qQlZQYUpqNVVuemxnUkJWaGpRdk13M3YzQzZjRU5Rd0ItdnFlX0lSeEhDSU52MTVlSjhYX3I0c2sxeXVnWnlHR1VQMGtLT0VwWUFmdFRkcDdwMGVVU0hCODU3MHhxdFpyMGFmeDB6YWlTcFh4aWNEb3VJemN2cFpKWFhaYzRxVGNzTWszMGVFYjBMV0ZmQWtLcllpTUtkd2VhQnhtR2hBVFlJd21yZ3IybWxmS0tHcWV3eE14d3N6RDZ5MXpQM1g5ekRydkp1UDJZMjl3a0dTWG9vaG8tLUNsaXFXZmtrZjdieGlvN2x0UkNZczhUUm1lRjY3MWYwTmpNTzhLbUs5XzU1UU9IUHd4bnZSeXhqWFVYZFlVTFl6ZkVUdmRULXpkeDlzTkNLNTkyX2tRck9aSE9malBiZ01ld2tIT2ZDWHprNDAzbFBscU5JUm92aXdXbERDT0hQNTA1U3psV19NZVExOGxfemNrRWV1alJIVDA3YzlYRTdiVW5vUWhhZExpdGU4ODljZ3pBamZsbTZGbnRGNHoyWDViaW1TZTRYTWtXX0kyVmdHRmpyRVF4X1BYX01OWDhQTDNqcHZzMTNsdFU3RTVZYlpEZ25NdDczZWRVZGVHSTBfNmZRRmJHc2hhY0JVNWZDRElLWFlBR3lwMVdyTHFHZjFHZllpMWNhV211YXFVNG0tZWFqa3lzc3VsT0VkS2pVYzktQTEySF9EdWxaZ1I1Z1dRNUdwX1g3S2tVYlJLX2VXckU1ZVplSEljaWJSUktWMkc2VExKQUY3ekQ2M2xyUlI0QjRhaEI4VlRxUlFKWGs3dDB3OHRSWXdEbGExaFp3UHl0WFFmN2FhMl9WRjh2QXhKOTJqN1ltaFZYZm5sZm5ycjRJVFZ5R0JPSkpuTC0tMGE3VENZdk4yRVh1dWtNUlpKX3o1Y3Z3dGxzOG13blVkUm5oNFhnam1EYktCTzFnUGxBdzBHQ2pnNjQ4elI2V0NtZkQ0VFNNdlF2Mld1dENwSWozSlA4OGdtSHJ6M254QjY2ekxTQVhodGpHdXJ2OXFNZ1NOSWVnU2JBNjUwRVZoSFVaUmVBY1dSRmJZaXFycXRMdmdWUGJDX3NRZHE0OEZUU3hKSzBxS1lyMjJsLXM4eUxsTGhReUNiYjJZVXhfaC0wbWxqQ1Y2OU5HOVlZMk5ITDQ3Y0l2Xzc1b3lXLllIa0Z6QVNZQkNMaUlTTlFNNjZMU0E.VVD3ySH6B9YNIwU3r30-RQVAVBObzP93Ws8tufAf_zb-VPS_65oIpL6EsXdwrAE_g4Mf3JHPwqnC33L4HB7CrviTxOrfMiAAYLic0L_V64gN7SbCgvm7iuxcduLBk64hWpL5NHgl6kAu84_dP64yAyxVT_ONUctVlct_YI2AdCh-uLZ1mmOYaTgfLSnsSecp5z1pjNA-17Pp-CcfX4LvymjmQHrOO36Bse3LawDPvRjC1g-4dbqdwSgBJ0z3fCeQD5sW25uNDl0WRUQpaClprRL7UVO1-zUkGPOwAUcweTywS0sgHjlIWBY2CwgvG85hmCjQ0Ch6MabB_eRsp0vy9g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Cryptography error – ISE40010 unknown JWS key ID #1)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;tokenInfo&quot;: {&#xd;
      &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
      &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
      &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
      &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
      &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;panReferenceID&quot;: &quot;V-5180702149300000000029&quot;,&#xd;
    &quot;walletAccountEmailAddressHash&quot;: &quot;3D53EEB00F3E95E5C9C7C55875FC1723E9C8D8C9980C02F84A88065B96B1BFAA&quot;,&#xd;
    &quot;clientWalletAccountID&quot;: &quot;3D53EEB00F3400000000000000000029&quot;,&#xd;
    &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNOREEwT1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LkphMExMb3hBZDJuZmNJQUpDRExqdXo2a1c3bnlEVTdxaS15MXpqM0h5aVdqb2lySTh3cmxsbWVoSUJjRWZWczFNMjhydFZQbm1pTWdJMWw1Q01na1Y2VEtXSFNqWnpTQjVIWVNocGFfOHdxMlY3eDEtbk5ydm10MkRReE9XWGJUdDBrUlFNczBPWlY5cUZtbTRvRnRobEJRRU8xd0gxS0EyQzJuTFc0dF9Vd2JBOWl2eVNvWndpVDc0QVVWWlprQU82SEtueEhSSG0zUHhHa29CdVB5ZTk5M2k2c25adkNBdU9faHd1TTBfY2x6R0VqVEJhQ2ZZY1FMN0plNkEtOXphLXVkd2pfUnBIMHZMeDFWU1hDelBaTXpTQ25RZnppTXk0eGNzZ0tLNUhmbDhpSG96MDR4UFd5VDZtaHZyMHZjNC1KRzY3UG1YejJEbmdGU3dwRFZIZy5KbFEwUE5PRnFkZlZ4M09fLmJadFU4TlA4QWJLdVltU3M0R0NYOE52SjJIWU43M0Mwa21rV05hNVRNLThZcVNxZFdPU0hDbUJhRWo0andzRElsaDVoZ00zMXhwc0h0anVDRENEamZFc3R1Uk9BVnpNVVN6Q0c3VTJvcklMUWhibkFwR01kdzhDLTI5Ylg2eWFUOHFCdGhyM1NyRzBhWGhTX1JuU094alZFcXNnajVMcDQwMWd0YkNEQnpfV25mYWNMMWRCdjUtY0N5ZWVKSFdXS2NucURmOWVfWGtXbGgtN3pHWFJKVnFFUTh5NjFsR0VsQWhMelk0dTNBRWg2ZEhYX194b1NUNU9OLURGZzZmWkV0emtUY3NfMDMyQXhNdTZiUFVfZjNQNERyWm5FVVl3MzVUZFZld3FKakxSZWEwMTBxb0JEQU5mRmR0NHYxNUsxYkM3dGU4czJ4MkFpR2FMTzhfUUNQamM0MjBWYnJjT19Ja3pCdXRTV1M4TE11MlJDdktpMXZpRVFMZWtMTzdJcG81QWxhY1czUUt4enRZbHk3ZUpWdGhwLXpScWpSUU8yVGVBYWZrQmwyQkxuNnJaSFRWOExVb01qUTNxX1JuUElWeUItUTFEMW9JRDItaXVRZC1HOWVGNXRSNDBGMHlqSnVMNFMzZjU0WmVfMHliS0VlZG5fd0ZWbkU3UmlCcFN5R2hueTFpMERRS1dXcUtRWFo3V3Z0clREdHdUZmZITHV4aHJYckx0XzdIQm1GWmpSbzhkei1XLWxSMmJvbmlCclFXNzh0WXF4bzdVSkpJVmhiN0hBUDZ0ZU9SM3dIOGlmdVA1ZGdmamlqZUM3ZXdYcHo5RHNNdldOV0tuQkVGaW9tamJaSld5blZFNDYxOEVGS2hFYVNQeHd3Y2FnX2FwQTRHZVRfenN5QU56Q3ZZWVZHS0hDdWFsTzB0a21SSEMwR2JmdjU4dlpLTjFXQVpMellLOTJjWXAzNEY2NG4wcUIxT2xHNmZWeGpvOFJYMDlDQXV3eTZIYTZwOVpwVXZuaWZ1Y3FlWTJrUzlRZ3FadmRTcjF6bWdGaXotVDVqdmJ6Q0RDLU4zUHE3NlJOOTdVb216R21JdFJOX1JJMS1WcHZDY1FzNXo3ZmdkS01YVGNBME9CcTlGQjJpbC1GTUtYOUhDMUoxbkNqT1lUVDlBa25CY1ZlUFZqbjNRY2RhaURXV1laaTVYcUpWSnZES1AxWW0zNlpVYTVJRk56QWZYSG1Bd3lwNjRlR0JnV0d6aE9rN25BV1FTajhnWGhLVUttU2dsNjFYZ3NBWGRfRXZZMWdYeDBvb3h6RHR2VXhzRFp5SmZWMkxJbnBuYVZwa29qNk1SYkZfUWYwbE1lTnlrWEpVSFZidTRUMjZaSjhqM05aVVRBTlVpSTJjc3BsZWYzWWtOODFic0lydEtFLUNmcHg5ZnBkeXRrRjFHWGZ4VVNMUEdYaF96LTlqY1Qza0pLZXFuZHN1Y2pxa09JZFIyY2hhWGl6dmpfWnZIU2ZqTVMxQ0QzbHJIU1dEeVFLMllMR3pfSTJMX2phSExWZHFfN1FTX3ZGUHJZSTNaVXduOTJxRUpfanAyOWFCSXdaOWhlX29wUEJWb3FhQU5EbjF3QllhdmJSZ0hic1FkRWpJWGFBdU90YTNubm1zcmswVTBIZjNQdEJrTV8wSm9aUkF3V1JORWNDZ2dwUlNsY3VGbzJRTWE0RWMxN0JkcG9kT01pUEwyc19ac1hXUTNFZU44aHpHMjZUbTRkR09FOUhFTHBEOU0wWHN5VldReXY0WUdsUUQtb1hpNXBZVlIyeEZ1SXl5czN6YWtzVnBLNzk0U29HZnU2a2ZZcG5PQjhqRDNfejJRZ3EtZWMubXNvWFhSTVdKNTlUZHpCbkxveld2dw.yFiYwaeKqDgmZnL0QVtLzGczWcKKBnLBiy1Qu4girA1TLuRdHeAm9Rq0pKNCoH1Ci2I-KDzX_-WVRllZsg4sCBYu7LFSjyQOr-Bcz-Ve5eiK2AUU2DD6mcpH7ctFjUWmEBygY099sFMQflQRac1jaUdZNknAnEN5WfNejeE3gdT7httvHDoQcwXT44_vxEyHus5vd7eyWYUys8AKgGkZaP2mmSl05IfQ4S0kuykYEiUOSnhaX8A1TCB89If25HpXreKpN3EwayYFGwkiKaV4BJGvRwj2mrkGF6YEuTINVj6IXh7MKSUQzAemy6m-QfpEubdOAksnUdED4s8_KBD9Jw&quot;,&#xd;
    &quot;deviceInfo&quot;: {&#xd;
        &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000029&quot;,&#xd;
        &quot;deviceLanguageCode&quot;: &quot;spa&quot;,&#xd;
        &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
        &quot;deviceName&quot;: &quot;TC29&quot;,&#xd;
        &quot;osType&quot;: &quot;IOS&quot;,&#xd;
        &quot;osVersion&quot;: &quot;7.0&quot;,&#xd;
        &quot;deviceManufacturer&quot;: &quot;Apple&quot;,&#xd;
        &quot;deviceBrand&quot;: &quot;Apple&quot;,&#xd;
        &quot;deviceModel&quot;: &quot;iPhoneY&quot;,&#xd;
        &quot;deviceLocation&quot;: &quot;+51.51/-0.14&quot;,&#xd;
        &quot;deviceIPAddressV4&quot;: &quot;127.0.0.1&quot;,&#xd;
        &quot;tokenProtectionMethod&quot;: &quot;&quot; &#xd;
    },&#xd;
    &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
    &quot;termsAndConditions&quot;: {&#xd;
        &quot;id&quot;: &quot;773febb55da5453aa25a40b56fd4e07e&quot;,&#xd;
        &quot;date&quot;: &quot;2019-04-05T14:05:24.666+0000&quot; &#xd;
    },&#xd;
    &quot;dateTimeOfEvent&quot;: &quot;2019-04-05T14:14:24.000Z&quot;,&#xd;
    &quot;actionCode&quot;: &quot;85&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Cryptography error – ISE40010 unknown JWS key ID #2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;tokenInfo&quot;: {&#xd;
      &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
      &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
      &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
      &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
      &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;panReferenceID&quot;: &quot;V-5180702149300000000030&quot;,&#xd;
    &quot;walletAccountEmailAddressHash&quot;: &quot;3D53EEB00F3E95E5C9C7C55875FC1723E9C8D8C9980C02F84A88065B96B1BFAA&quot;,&#xd;
    &quot;clientWalletAccountID&quot;: &quot;3D53EEB00F3400000000000000000030&quot;,&#xd;
    &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmtub3duIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNOREEyTnl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LkZUMWZTZThLdDJqZjhubmlvcm15Tk9vSExoNEpqMklBU1BVWVBCUmM2Wk8tZ0hhTlNuOEFMaGxrRU1IdnN3b0tHVGdrOUc3YXk3Uld5VGpoWWxBeXRvZDk3Z0dOWDNxMTZSYXBpVmZ3V1NaN3A1Xzd6aXdDQ0JCOVhPT3R1cWozakV3NjIxNVkxZ0I3TDc0aG5DS294Zk5KMXFXclRtQ09CS0xLVWhkTEszMnZNc1czZGQxaENzcjZCbFNqOWh5cmlLVDhFQkNIX0l3UVJNVGZpaXQ3V3pGeTJ0YTBxRU50T29XTEkwRllfVi1wOFJ2cHhWcXhUbWxEWmFCVnNGNWxadkg3TnpTTEx3V1RzaHgyVjZlTVk5SEE4WjB1RlhhemhGOWpjNFA1VzRqbzhYSjlrckRoaUFWS0drR0hmZGRmYjdocUFmb0lXbmVXdzVZcXktd0dkZy5lNWhydWI5NFdHVHd0RFg2LloxLVR1aWYycGhoVVR6ZGdPR1NHZ1AxZDVlYWs0azItckh0X3lGdU9YVnpsQ0ctNEtUNmkzOEZVbjJVamdUT0VHcDV0VHZ1dGtlM2ZBbkdzTGhqYzUyWUZPbnBpQ3Z1QzJWdDdwdWdwOWdqMUN1RWRiM0pGd0hsWGF2cUhWUFdKcHRuYzdLQ21TaThoa2I0NFdrajZSc2xpWGhCSkhlTC02cTlLUHlBR28yT3p6X2g0Qk5YYklCTVJsdXhsUTlfNGhNcy1wdEFyWjlENTBPTWZUQ21BT2ZUejJVYzVjb3BvQ0FIWWJBci1GVDNIRnk5YTQyUk5ndFF4eEtXNjFWeklsanlFRURvZ3RFWkF3V25yQV9OQ2ZpODhqSlZqUUV0cEZUNy1RRmw5SWtQMG1tUFdpcEN5a1J3TGFUZDdLaFEtS3d1SmR2RHdjM3VPZFFGX2ZEX29LM0dXbXFZWjFvb2tQbmtYRHFKOEJhSHZLT2NoUTNfcEFDUlkxMzBzMHdTOGdJYURlTnp3b0hZaHhXanFVckM1RVRUQ1Qxc2tsYzFnWFdzZ3h6Mkd0bW1hMnJ1N2ZQYkNVbXhYNW5zYjFILV96d25QNHRoYTVFTVV6X3RYWHMtWEFac216aGpOQ01qMllPR0FoOW9mUlExXy0tN2wySXdYeEVNR3VGUGdKVXZHSm1DNlNvT1piS0VfWGtFT1owN3VaUEtYSUZfZnoyVzBSR2VxbEUyQ09SU00wWExNVllPWVBzcmI2SGdySFZ1bjIydmREWEhXYnBkNkt6WW1QLVN6UTN4cjlkSm16ZGNvNzVmYXVvcC01T1licXltTllvT3RBUmZ5VXVOOGdlTmRzNy11RE9hWHhnVGVaQUJucXFTbllaaXlHeW1rWlZYQW93UjJnd0JBV2ZWZ0hyYkN5aTF4cEg3NGZpdTZsWlJlUE1aaEgtUnk2MkFfUWw1VDI5X2Z2MkgtMnh1NWNwdWUzdFg1aDNoQ3pIUHBtX1lhMEJhRTFLYjBKRU44SGlpbHphMmtCZVBKQkNPV0pRd0pWc2xxVzBUemN0XzA4d2VyNHJmWWhHNVBjTkt4X0VHQWlTNGZueldPdGhzcTZMYkJReUk1dU9PQ2NCY0dUVlY4cC1xT2piQUNlWl9CTUFxcDY4WUdxNmlNUEJjalBDUEVLMzFHTWxFbDhGaVhESTVReTJTXzAyQUpPdkxFcllKV1lFcVMwQzBlZGkzU0lZbGwxRURLS0FVUEVLZk1CMWtFX3J1RjZhb0FLMGd4Z3BtYkoyaTNTODgySFlTYWhrR1o2MW51NHBONnJtbkp6NHM4aVZZQTlRSllJRjV5MkdRNXMxc0xKd1ljcXZwRmJxQnNPSjVjV2JHeDY0UDJiXzM5bVRlWWtJVUNlYkUwSXZnXzFjalM5em9qZlV2anU3cmNxYmtybzVuYUZRX2FKVVE0QUI5VU1GQ2RnTkFjU3NnMGp2cERoM1I1aUhqdkJkZ2M1RHpwZGkzY1FfS0VRNXY5aWsxV1RMZklRTnNVbmQ1QmVwNXlNYzhaem92TEU0OVdKYjhCYmhUWHByaGhZZFNZMWtaT0NRaXlublh3dVlmX1hKRVQ1SHhRdzBlQmxsQWh0Wnd4ZnBKWUdWaU1oSU80RzBMbld4MC01NnFYNkV3R1N3RnY5UGJOd0Q5UlBlLVNIakhoM05Zc1c4TnVWWjZyRF8xdEZkaVRTcWc1ZThvMXF4RXh5bTZOaEZBUXc2dTA5OWtsWGg0eVJJbjVKMEhfdkw5WE5Gczd2SDFIUGFya3JnVHBMMHlBSVpkZEVhbUxkSFZuaGhMUGVvVk15V0RWaG9KczJyeTN2WE5zdmxfUGVIQmtodjQuU044cG42cVBybXhKQ1VwZVdvejBIdw.LncIL1yv7gWk4frG8RVC6Z5CziB3a3xTZ4JZIyO5uQE8d4GystFPxfkKl3UdMM37oBCJZRhNApfjEFd2S2fprahl5TigRy_lxZQhiZmEwNDRRe5NNu1EKwAmsao4T06FiODUMl86Z0VGxau3uQP7X3cYe9qLxUFLPrNS0pUiUFA0Z0tExw_5p5AHTRcsa4tow6xsvvXTuoaowcRM5xx1X67dQB_CPHYQla58kr1RicSq3ejNNzCIlr_e2bKHLqYW7DyayA4qjekt__kySu7ayvxbI4xhbmUYSRmoZTK0zW0ZrpW6FhHm6gNqW6xjgD0nuUcAPPgS5t127I14kB1QGA&quot;,&#xd;
    &quot;deviceInfo&quot;: {&#xd;
        &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000030&quot;,&#xd;
        &quot;deviceLanguageCode&quot;: &quot;spa&quot;,&#xd;
        &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
        &quot;deviceName&quot;: &quot;TC30&quot;,&#xd;
        &quot;osType&quot;: &quot;IOS&quot;,&#xd;
        &quot;osVersion&quot;: &quot;7.0&quot;,&#xd;
        &quot;deviceManufacturer&quot;: &quot;Apple&quot;,&#xd;
        &quot;deviceBrand&quot;: &quot;Apple&quot;,&#xd;
        &quot;deviceModel&quot;: &quot;iPhoneY&quot;,&#xd;
        &quot;deviceLocation&quot;: &quot;+51.51/-0.14&quot;,&#xd;
        &quot;deviceIPAddressV4&quot;: &quot;127.0.0.1&quot;,&#xd;
        &quot;tokenProtectionMethod&quot;: &quot;&quot; &#xd;
    },&#xd;
    &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
    &quot;termsAndConditions&quot;: {&#xd;
        &quot;id&quot;: &quot;773febb55da5453aa25a40b56fd4e07e&quot;,&#xd;
        &quot;date&quot;: &quot;2019-04-05T14:05:24.666+0000&quot; &#xd;
    },&#xd;
    &quot;dateTimeOfEvent&quot;: &quot;2019-04-05T14:14:24.000Z&quot;,&#xd;
    &quot;actionCode&quot;: &quot;85&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Cryptography error – ISE40010 unknown JWS key ID #3)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;tokenInfo&quot;: {&#xd;
      &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
      &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
      &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
      &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
      &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;panReferenceID&quot;: &quot;V-5180702149300000000031&quot;,&#xd;
    &quot;walletAccountEmailAddressHash&quot;: &quot;3D53EEB00F3E95E5C9C7C55875FC1723E9C8D8C9980C02F84A88065B96B1BFAA&quot;,&#xd;
    &quot;clientWalletAccountID&quot;: &quot;3D53EEB00F3400000000000000000031&quot;,&#xd;
    &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNOREE1TXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LmtoMlRoRmhnNUxlQjZJRm1CRjNJcFdKekNYd2JyNm9iWDhSV1NiUXdZcUl0TW0xVkNueUIwT3hnUk11dHFodXZkODB4WGZ4S3lXS0kxejI3N05kUkJBcGlkOTZRbGxuVjVaWFlvQjhyWEJoeVJLRlpGZVFBcXc2VTlfSDhiaGZzOHkxQkhWUzFXb0JlZWl4RXdIUnEwUEh1Y3dvRTVmeFlDcXZ6cFVmSmhMdlNzS0picHpEbl96SXIxOEJEcXljVFp3Rm9yZzZQOWlsZmoxOG1BSUkxbEFJS3lhSkdMMHZSYzYwZHJGbk56SzhOYkFac19ZWHQ0dDRCell6NXdBb0c3U0pNQ2sxd19FbDY3OXR3M2JGbjdQeUdnai1zWk1sd1BURFRSVTRCTS1BSVhuc0pjdDh1SUpsRWdRd09wbExlVy1hUG9oUXdNUGxSQmZwYTJxYS1Idy5tMWFITXU2U24tbXBrUFhqLnpKMUxzTGRwb09SNDlDMGpXT2pDQUlZN3hzSlRaRjRmUzhlV0p0RnZfNG1yS3MzV2cwZVlTV083MEFxRGJoYl9qRVlSbnY2ZHc1MWFVMm9adVRyWVhQOFBRbndibV9BcE51c2k0VUNuWVc0NnFCMk85NVJ2NVFnNHh5YXljUnJxUmJUQ1h1eEw3di1jQzNqWmlUamFpNWZRRDJRalNoSi1na3BKSXlkTllYSGR0Y0RvVWt3eUtzUEZuTnY3MzI4NDFLWE1YUXdQcGE5NHN3MkJyRFlGTzVFbU9lMldkMXZqVE5XM3BCb0xiVzNZdV94dGJrWnhNYThtZGh5T2RyakFXVWs1TzkxckdqOERMWUhoRDF0ZlBOTmRGR2hsV2R0YjJJSFFCMUtabUpsdFlST1BHUmlLZ1lLMENqT3JlV0lwY1RUX0tZX1VGaXowakZnYVlsNV9PLVNHaEdMa0xRQmRuTzdobzNtZHo1ckJ6OU83a1doazV5YlRuZ0hjRU5Mb0xFUHNBZHZ2OEdHMExjWDdRaHBZUjVPQkRZTDNodmdYN3UxVkRrQ2hCOHVjeWgxT19TaEJfNW5EU2JVRVhNWnZoNEtDa0gxSDg3ZmlqMmd1T1l6UUV1RFpwY3c1Nnl0QXlxYzlYV0FzeS1pbEhfeVN2VFhVV3hJeFhfSWJVa3ZZVmVkYkVCQWVkdmxBdkhrWHpZLXpvMTlScTBicVNwOEVSaks5UE1RMEVPMXZCeGZkLXJidkNqM0dkdTgtM1hlYk5uYXA0a2hyM3BFd2xPeHFoQjhLY0xBODNlYnRLaDdkNkRSaGxhUUpLU0JBSUZkVV9LdzlPVkxRckROMG9SbHdMZy1zdXplRHczMUhVanNCNVZiTzV6aG0yOWxkQUc2T3NTQ1hOT25IbEhNY2s1MW1abEd3bXRRSl91M01IcHNSYjk2OUJuTWd3aXBiUHpTaHJ3T3JsYmhFR0dOMFY1MUg0WG95WXJQWG1iWk9qcTQwLWNwUXdTOWFCUy1YNGZYTEZ4T0JOSU1WdzFkT2k4cWNzMm9ocG9SOHRYa3E4aFFfaEQ5ZThlSnhtbEViZ1ZNUFk5eGt0OUpjRGliNWdidTRnaEdoX0drTGZ0NVVOWEhabEtJQWdHWGpvTXhPZ3RsN0JweWVzbThGYW1TWTdjRXR0M2VTcUYxT0s2dnVlcjZEdV9RbHh3bmVsel9pdWpkaV9LY3hXVmhzdWsydnRvckEzOHJQOTViaVhITGVkdXVMZVlLRTVMYjJ2NWwtNTc0Tkppbm55RUpERlNsTFBCNFlod1BhT2dVR2o0LW5JUkNod2ZoYktuTklsMlZrOXdjdEZ4NEhIYVZCdDJ1Xzc4OWFJVWlkSTdYMmlOQUx6LTRIWkNkSTdxTXZuRFVwZ09jeDkzNmJBSFFiZ3I2SkY5Rjh3TGVNUFJGTl84cDZ4RlNUVUdMNFRubnp5bm9LaTVSZUFKbzJvX005OTBJSjF0c3BtXy1OYU1waDlsNzlzbndaYUtIWWpuOXlteFVkTUM4X0xGOTRjc2hGai04MHBIN29maWoyejBzR3dDVTZyd1dadzA4aUktTkpfNXlDZ2g5YUt4dlJUX2xZeDlJU2tmbUxvLTFyWWYyeUFkX0FkTnlzMHVEeXZRazJqWTE2TmttcG1ldVF5cWNhelRpUUE0R3Zfc2JNNkI4SFBsMkx2T0RDY2g3LWtKb0RvcjAySXdXa29rZ1JieEoycHFZYkNDb2FIaUpZSXV2U3JZLUJIU2dJYnhnSExSUUw1eTl3akJWT2tPM2xNUW9jN0NGeF9SXzUwQ2RSclJHTmctcVdoSWlGeVhqU1FpcmVSeDBaQXZPOXE2TWd0ZXcuVVdwUUFYQk5XM0ZfZGlhX2dUcjFjZw.zuGzgUnkfL0YRrLwUQUpEoGSDhzKbLqcHjRSzk7fCpnfbtKiC2tnPP8bi_DGSo4jToSb9ihlj0_J3udoygHGNhDQlZDOZX23gUak7kRmoloEUjRcAonpNhb5rxNZNaelZO95p19eB8LUHMDk3Z1mzhYfurOptchCEC3kh9nUfohULBROWi45QVNJFIj06vtLGMuu9GHhw9_is96BMKxlOJz7MYVavgQPeblVhA3RHb1p1utQCquFbWM1Z5TGEtHQJsyWDwXf6nBA2N8yY27vSJfnvwXwFjqoCbhTj3cPu3mxaVQSA45V2em7z7taHrK7inq_Gd69GApYHGiCnGs7bQ&quot;,&#xd;
    &quot;deviceInfo&quot;: {&#xd;
        &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000031&quot;,&#xd;
        &quot;deviceLanguageCode&quot;: &quot;spa&quot;,&#xd;
        &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
        &quot;deviceName&quot;: &quot;TC31&quot;,&#xd;
        &quot;osType&quot;: &quot;IOS&quot;,&#xd;
        &quot;osVersion&quot;: &quot;7.0&quot;,&#xd;
        &quot;deviceManufacturer&quot;: &quot;Apple&quot;,&#xd;
        &quot;deviceBrand&quot;: &quot;Apple&quot;,&#xd;
        &quot;deviceModel&quot;: &quot;iPhoneY&quot;,&#xd;
        &quot;deviceLocation&quot;: &quot;+51.51/-0.14&quot;,&#xd;
        &quot;deviceIPAddressV4&quot;: &quot;127.0.0.1&quot;,&#xd;
        &quot;tokenProtectionMethod&quot;: &quot;&quot; &#xd;
    },&#xd;
    &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
    &quot;termsAndConditions&quot;: {&#xd;
        &quot;id&quot;: &quot;773febb55da5453aa25a40b56fd4e07e&quot;,&#xd;
        &quot;date&quot;: &quot;2019-04-05T14:05:24.666+0000&quot; &#xd;
    },&#xd;
    &quot;dateTimeOfEvent&quot;: &quot;2019-04-05T14:14:24.000Z&quot;,&#xd;
    &quot;actionCode&quot;: &quot;85&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Cryptography error – ISE40010 unknown JWS key ID #4)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;tokenInfo&quot;: {&#xd;
      &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
      &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
      &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
      &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
      &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;panReferenceID&quot;: &quot;V-5180702149300000000032&quot;,&#xd;
    &quot;walletAccountEmailAddressHash&quot;: &quot;3D53EEB00F3E95E5C9C7C55875FC1723E9C8D8C9980C02F84A88065B96B1BFAA&quot;,&#xd;
    &quot;clientWalletAccountID&quot;: &quot;3D53EEB00F3400000000000000000032&quot;,&#xd;
    &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNOREV3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaWRXNXJibTkzYmlKOS5kaFM1bkRLUXN2RHBtVDA4QXF4dWU0eWRJNnE0T2taT3Vwbkw5TmpyVmppTDZKa0hUN1R4NjFXeXlZeDNjN2QtSWZSMEpod0RudmpKeGRhNGYxaTY4eHJUYzZmbW82dk1xTXotNTZjUG0zTUNfYTBZSUNGZDRRekFHTVhmRk9WT3N3NnVidVNKVzhKTzBuekxQXzlyM0FZZXV1ZzVYRDZPSHRfczRpX2swUl9WNFZ1bHdiMXA3eXBGcXhRNkFDcVJlaVRqUzc2TlE3TFQtSXVLMHZyeEtNRmNUWjJ6X1dfb094X3loaUdFODBvVkhiZHU5QjFXRDljN0E2dmZyaVZxcHhpOUZUOWRJelllSy1YV0paZVNWVHpaZDZPcFVWYVJCRzFxOEtpTC1LTG5TYlJLbUliY09RcWN1VEdHRHlRcUVnQkxnVlQzdU9iY25uNzE4N3dUeFEuVWp5QXppZVpxQW1ydUZkMC5PVVVtdmhfc1ZFanJZbnlNNVUxeXAwSkZFNWNGZDBtU21INDhiMk9iN1drR0twZmZ4UUI1YkJodEJDQjZNN1lZX0prZlBkUXg3Tlo2MTVhWVdJSldoYXNSZEJBVG1rR0JvVnNzWkZMYVBuYjNDZGp1LTZhbGhMcXlhTi1SLVdPV0VnVmtWeTNnejZRNkRieXYxR1U3c25RUGx1bExtRzRBQVJkdnFvaHhyNnFLNlJia0JhSTFoZWlIYk43dVZBRlR4S0VuaVRuWldJOVc4VnF1Z0xnaUhGTHVOQURSY2J0Tml5Y0M2YVNkNW9qWFdaZ3VQRzZfdElGWDBLRG9BcVZNM2tWSXhhN0ozcXZfVDR5R0FLdUhSVFFFT3Iza1c3WUliNFVfN2RrRVA4Z3NpZVg1elAxZWlGUUJENlBhRzV4OFFMQ1ozUTV3V0EwODFBTE1aTU9iSnpEWHBaZS1kMDA2NFlRVU5GZlk1MW5xdXVleWhqX1ZOeVFCemQ2b3lNaEV2LUNmaFV1eVRZVGJNemtUdWExX3NGY0g0eW0zYWJ5elJOWGdwQlVRRDVlMkhTT0JGcWI4YUtwbW12RVBiamdxUHZNSHgwNEUtYUk1R3ZFVjJieDk4VVBfYWtHcFJkekg1aXJXbEFKOFJwd0JTZDJmOVdia3gyeGd2aEEyLTQwZ0dSMXBCM0VZUlB5d19sbDNVNkZYVHpUQXBNWjlxY191Rlk1azVyWG9IamxNenVTeURhTDRrVE4yOEt4QnZUUDNaeUJTS2c3VEhjb2JtOVRMX1FwbU4xSTMxT0FhRWVwNTRLNzAwbUpUYXpwUmxHRWRwNXhCNVJUM0RwTTVmcXdmVHFnMzJ3WEhtS3pfaHhzaGNrUGZCamZnNV9vUDJCbEpNMU5uYUFJTDlWSVpXSTczVmppVS1ybVJWdVF2aFRYcnpfWHI4djN2a0FNS1FDUE5CSnZOQjhsNE9VZkZoU1RRWlhYakxBNFpuZmY2bWVxZ2JnM0ZFSDNnRThLeFdrNk1HbnA0YmYyU0oyYnNUcVZ6YmJUdl9rZHktYWpyUFNLVXppOXU5dUU3bE5JaS1IYUlKLWFfY01oUl9NWGN6YzlwODBxd1JXcV9hanR3eGFXcjBjNC1GSV9GN1V3MUNuajY1VkVVU055THZmLXBEYkJBZk9sTmpIZGx1blQzUExhNG13SnRlQ2hCNXhJdnhib0FLS3pyVW5yY0VULWZPYkpMbUtDY2tvR0xIYWY5RnAyeENqWDRaRkZRVkh0TTZycTdFUzczSlBwWllmampsUVhvRHJPa0N5SnpDenlWVV81dElhRGZoOGFFLWNudmZOdndLUV95Z0lKWDdTMmZueDNuT1c1cXJjdXJmWXNKUnYwcXpmMk02OEIxNnYzOFVDZEZVLXRSaE1RMW1kdzRDSmZpSE1iVVFUdWs4dUNaM204TXRHamEydFJqMGE0dUx0MUVXVTZjYWJydzQyUXRpc0FzVVpNR0Y1Y2ZOaEV5OUYwNzZRUzZBZTlNc0ZuTy1nLVpLb3lVMkdqTDhIOHVkVHJEOTVYTEs4MHloVTc5cVZkNUJHSGNLelBYZU1qYWZtZnZoWW41TGh6Y2M1SDI4T1p3RzdnWkh5RHlGWjRGUTNrYUFJTHFSUkRWTzRpdWp3N2RPclE1dEFXZ0NheFRUVWlDYnZrT3BLWjBlZ1R5NTVIMmh0aUNWTkF1YmhpcEhYelBCWlYxcDJoelRiR2htRXVjWEYtclhObzd5MXluOUFWOGhhNjktNk9OekRvQUVvSkp2cGJNZ05MQ2VqWWVJd2lPZjV4cFdjSENpVzRjcjZhcHB5QWhJbW9VOU5rU3p6X2pxbFRlMXU0Lm1La1NRcGk4dnBiTlU3ei14QmNHeGc.0mRdsE6HTfkpCX9Z0tFT-RCAr-S88thqyeSeJPk2PwqePho5JrvYtOXvukT5EjeP6rOIA9knlTGITobUKg4KdlSv9nuFRvcHi5RMK8e63i2kqrh2yy9-Hb1JgbMknd3yB1KEqnt5JfYJnyiMpTImesZV6QPMWTUoM4lD_IzjD6Pp9DK4gIlowTQ3Z1wrk7gKv_V7ztzBmIQoEpV2-xMNCdOT6-KRWB8pbK7jXpC5jU_Nf8-Ogkz18OTxLQUNtvjCHt1_JzRbhdTOgFFdPDYnyRfjBJ0O1r5sB0eMXlUyWsFoe-94EllS2KA8U_tfkqc9YveiKTFnZUJTVtY31WtTIg&quot;,&#xd;
    &quot;deviceInfo&quot;: {&#xd;
        &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000032&quot;,&#xd;
        &quot;deviceLanguageCode&quot;: &quot;spa&quot;,&#xd;
        &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
        &quot;deviceName&quot;: &quot;TC32&quot;,&#xd;
        &quot;osType&quot;: &quot;IOS&quot;,&#xd;
        &quot;osVersion&quot;: &quot;7.0&quot;,&#xd;
        &quot;deviceManufacturer&quot;: &quot;Apple&quot;,&#xd;
        &quot;deviceBrand&quot;: &quot;Apple&quot;,&#xd;
        &quot;deviceModel&quot;: &quot;iPhoneY&quot;,&#xd;
        &quot;deviceLocation&quot;: &quot;+51.51/-0.14&quot;,&#xd;
        &quot;deviceIPAddressV4&quot;: &quot;127.0.0.1&quot;,&#xd;
        &quot;tokenProtectionMethod&quot;: &quot;&quot; &#xd;
    },&#xd;
    &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
    &quot;termsAndConditions&quot;: {&#xd;
        &quot;id&quot;: &quot;773febb55da5453aa25a40b56fd4e07e&quot;,&#xd;
        &quot;date&quot;: &quot;2019-04-05T14:05:24.666+0000&quot; &#xd;
    },&#xd;
    &quot;dateTimeOfEvent&quot;: &quot;2019-04-05T14:14:24.000Z&quot;,&#xd;
    &quot;actionCode&quot;: &quot;85&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Invalid Field length - ISE40011 Visa Token Decisioning)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;token&quot;: &quot;4355053922806730&quot;,&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenExpirationDate&quot;: {&#xd;
      &quot;month&quot;: &quot;05&quot;,&#xd;
      &quot;year&quot;: &quot;2027&quot;&#xd;
    },&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;0&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832030&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;891BE3187FF7E64FAFC7B5872E774034F0A4E4CF4832368C6E0F25CCCD9BA3F0&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;891BE3187FF900000000000000000030&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;cvv2ResultsCode&quot;: &quot;M&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;&quot;,&#xd;
  &quot;locale&quot;: &quot;en_US&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09UVXdOekF4TlN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLkNtMXdaQlNaemFFSGlMR210YTFhMFVrNllGdHNDbmJpM0xFUDZmenJqUFN4YU5UZTJBOF81eU1zeFRSLXcxV1dMaGRoU3dPWnh1ckFzcElHdXZCcGdXd2FONnR1eFJBTHFTelB2QkJaM0NST3B5SHQ5X2NwRnZWc1JOTTlYd1FBVFZPdVY3dEtsMTNla01fcFlHdFVJM0lfSmZHcE1CQ2ExYWFQNWVzdWxnT0JJVlJjdkRJVVoyNzlDSTBTblZEUTQ5TVpSdloyTl9Pd2Itdi1VR21xdG9ILUE1bmZQWEZqMDVMelJPb1JMaFV3VHpYMUJTLUE1cWdzc2hjYUpta2VaUTVEVk1jVlhfOUUybVlWUEtnWW9FNVYzMjRodVREbFB4XzNBRTN3UHdnRzQtZWZsRG0zS0R5QV9vdmY5eFJSVGhGMmRuX3ZEVUY1Q0hTTDhVZWYtZy53LXo5alVRWVI3S09IaWlLLjNxWmREYU9wek83QUZIQlRpM1IwT0ltRXpPWUhPMVE2akxEVmdWMGs2YWozOUdoMDVGRDlxdmNlbmVHVVpqVkstelVkRDFLRER4eldmcWlrVmx6V3Z3Y0pOLVBIcVY4TlFIM0NzYllNaEJURVZMN1RnSFllZE1GZXh1NmFzcUE3U0pVYzk1VU90QTNaVkZJWEFqaS1aa29abXdIcEI2UHRGRmtpbFdqTE5POEJ2RkwtcjB3cFdBNUE5N0xRZGE4bWxkUVB5SVppLW40VXNyd29KR21Ra0xjSHhzNEljT0JmNC01YUtocENfRnVZWEpiWEdrYmZWSVpVWFVnMjRuUG4zTWpnY1ZjNHdZQ19ndVJFb0tvMFpYOFdJRk1BS3hCczRqeW9vZm5QUWpQRi1yclg3ZDZyU2dzOWV3c2ZXZUVKc2c2V0VMRklReS10dHJ1YUxRSTd5LVhxblJwdjdsSVZnWkdBTjBwX21uSWlNSGx5VHgyT1NoeENfUHg1RXlyN1o1UDZhMW1sLXl3WVhqWkgzX3JtQ0I2c2xKWWlMamVnN3hkQkZMeVpsQVdFcW1Pdllqci0wY01uOUJBWlZ6ckdKd3VyY0FUeDRIS3FETDEzWXRSY1kwb29SamJhel96WjVNZkhuVG9Vdy1uVXVCWGU1TkJrMTlPdmQ2NzNodDFTdFdXeE5FZnlvdm1va21TMXljcjM3YVZJc3RFNzg0Z1pLY1lwX2FqcTNWZXd2Sk1INE8wWmRxRFlkeWpiYUNsUkJOaDBHMmh0c3dyNXlTbWREMjh6X3dzM0p6SjdJb3U1V1RGWFNtNTFkdGpGX3JlU19nQmhUajZQZ0ktaksxQ184UlMzQjdLU1NtNE1WZzJwWF9LMTNsWVNBY1hvcEtNcG4wbzZReUczYXh0ekR0Mk5GTGNwMjVGQVVqTUNibU9HR2dlcDlIeERZakw4YndrREtxX2JxR0JoNTlsUWFYeUF4ckdBVXZSZDY3Nm5WWjBPdS12cmRJdVU2UlZubDhFeUt4RV9TcnNlNjYzcjVvOERoa0VnanhOWE9ySTNkY2ZISWMwTWtCQlh4Z1VOWGNtQ3hWb3VPMDc3TUdqdEZsNGZ5cGhXSDFWcFI5NTEzT2dqR29nVmItN3NKbGEwTldUZjFmazZWekhqMGVFbXc1T2g3OVl2ZmRVUFZGUW1kNXNSejlkOWtDZEd5VTlzWndwV19PRDd3Qm9QczhEMmVJZTVfTnVqaWNqWTJsS1JDZnQ0cW45cWtreVhFYXVTLUtlSlh5dkZkVk0wd1NhSFJ5UGVHLWlSenB6S0xXTnNJcjBkOE82U1VDMW1GV05jV0pTM3A3T1Vic1NQM1RzdDkteWRGTzZhNWhJS2RPM2RmYnVUc1VVTXA2ekRJR1Frd1VrNE5WQ3l5d3pBZ1VUXzF3a2QwY3FlMnc1TlNrbW91N2hnc0t1ekFXcklpMGRBN244WWZDLUk5YkJJM2RHd2Y0UTlzbmJzNmJrY2NWTzdWRlZ3dXRrYUt0WWphQ3J2UFRHRUlqWkZnVTN3LVdaSlVURDhYR1l0UjBZcHhxTk1QMldHbmVnekFSRWhPc2t0anRUQWJkZTFQNVRqOWtPQk1FX2hiUjBCdmRVWjdEaHEwQTBaT2NmLVhxcU1JRWIyX0JJX1lFalZDd0VXeWhPNHNBQklXNHNsTmJER3lJZVN4R3NqNWQ2QlpGZ3ctallMTE9neDZXT085X0xOekJ2MWw0dVVLY3YyZ3VPUkgxZzd3SFNza3pTMjk4MWE0T2hZa092U196RDB5M0F5dUpSbW1WaGUyektDNC1ZcjZkSnhPYjBsNFMySHdaa2pqcWlOZVFFei5LVklxeUMxcngzdmUtSlEzWlEzeUZR.zTCsQuSm8Y8SkMNfqdyo-4JuHfUk--I6MZ0K5l673wRM-HjyGcfHVzRS2_pE0-Jq6mf61Ait_glZrZtqtIhsrslMfzo3LvWYoZZaJ2odDj0rsnc7PddmNV_vjp116DQhX_C4o1wq9_BSjt2GMVYYrAZP7dvGs137bqlBJ1jGYSdeTpzQmf3amRL6dD5AhUiIHI-28sWz86l-LCkQVC1p4zvAaAwRg7lvRQfrvG8aIhv7FDgJqZW9y5QC4cQDN3dExS9hezryL4XqyD-L4mu6-mTIiqlOuee-xwDjsiq8sySnQl_N1MaS_Rt_FNUoPcc_kEjh9JfL7mByG3bGUEOjBA&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000030&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;cat&quot;,&#xd;
    &quot;osType&quot;: &quot;&quot;,&#xd;
    &quot;osVersion&quot;: &quot;&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;&quot;,&#xd;
    &quot;deviceName&quot;: &quot;TC30&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+41.98/+2.82&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;83A536F2&quot;,&#xd;
    &quot;locationSource&quot;: &quot;&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SECURE_ELEMENT&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40011 PAN expiry date: MMM)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;token&quot;: &quot;4355053922806731&quot;,&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenExpirationDate&quot;: {&#xd;
      &quot;month&quot;: &quot;05&quot;,&#xd;
      &quot;year&quot;: &quot;2027&quot;&#xd;
    },&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;0&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832031&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;891BE3187FF7E64FAFC7B5872E774034F0A4E4CF4832368C6E0F25CCCD9BA3F0&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;891BE3187FF900000000000000000031&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;cvv2ResultsCode&quot;: &quot;M&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;&quot;,&#xd;
  &quot;locale&quot;: &quot;en_US&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09UVXdOekF6T1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLnNaakFEZGYxd0N6WVRtLV94NjFnZGQ0b3gtLWo2N2FrUzBvXzlPa2dRc1NyUHFFT3dIUDJNYzVSc1VpMVRYOU1XU0dzYnd2UmdocXAxUV9OUlliU0hpejA3STdiUERwbGtTeHRBeFF6akF0UWlYeEJkdzd6bTdLR2dZZzliNHhTblVJUmVrQllLQWJGVjlvZkctMzFYQVczcXQ0R1pCazExM2VJYmNFdU0tcUE5NF8wdTQzWHJFUi1IdUxqUzRhdVlnVmdTLWtoUnJySG5ORTltX3ZlZmoxaXZRSF9OSExZUEVzOE1jSkhrTnNQU05HenpJbkV5cVpIUUh6VGpDUlVRSHdjalJEMmdQMWFUOUUwVmRaOVZva2UzTDFIVlpSMVp3SU5FTFNTREZMNDNqWmh3MXpLM1lKWXRNclVJX2tKMHlVVl9URkFVY2ExbjRRZVB1TkE0Zy5qYjVHRFkwd1dKbkRWYlJILjN2TElQTllwOFYxTmttYTZJd2dwellSTkpEMlBmblhlUjJEREhnaG40a1ZibjRrOFkyWUs3dF90T3FveDVrVmc0RDJySGhGenZnZGE5THVFNlFnWV9kX1lFSHA4X3h4UUpWZTlOeVd3VG90b0hVc0pjTXAwZWhkdkpuenBET1Q2aGtrU0pVSGdSeFhVOGhqNHIwMmt6OU93dW8zSWZualhPUkhZOHFYUWR3aEd1VmZ5ZGdRbEh1dE9RUS03NGpzZ19fWXRkdWtkSFRiaDctSHduUG9oLV9EUmo4TEtBZnFaY0d5LTFPS01yMWVNRDVsc1BIOUhjeVdNdWJDQmN2b2pIOHRrYVNrV2d4anJrN2F5NWtScEJ6ZWJnVHZUNjN2dzM4U0JQbEQzZXlxUF9oOC14WU82R1RKbVFGNzlYTS03aWVEMmtXZVZvSWNiWmFocmIwMlg5bjJRZmdDVlpxZDJvNUFlZmdpNmo5azhQWW5LZ2tMVVd6TVExQnUwbkJCTVhRN0YwZWxkbks5WjZfNjFtaFlQUktILXBtS3psck9obEFaZW1pV05PTlJqak1BUHNvYjlFbEZTT2Z1NTZGMmRkSzdsQ3Y4aFphS05BZUpYeFZSeTIwUDhEUFprQmtUYVFVOERyZ1B3LXBOenNDY3ZrOEozeVpaVklRMjBOdTFxajdiTkRiaHN2aVFTNlFUa2tBX3ZMM0hUYXRvWHNKX0E4MW04UzdsRGt2WTFJVW9JV2xqT2NGWGNKbnhjOWtUcWlUaktGam5vZEdqNnlJbklUenJQbDNJeUtLenVOY2wzaWZfanRDaGJwai1DZnUwNXFjYURXZFlqeDhEdFRVUWY1a1NBamRNcWhLZFZmTFRXckFKaTJIb280ZFIzZG5TaTh0NUVwdTBIMUtXOXByaDFlbU04NTYwVmd3NjducmxDRkFnTnlTMHJ3WGE2S2RBdXVIT0RMbU9IVVpETHRrSVBQaVhlUkFycUoxaFBzcnVwYkYxcTR3TENLdEdDVFctMFlUbzZ0c0cwcFRSS1JjSTlHQXhqckxPeG5CclR6WlpWUlJsZEZRUzVfcUVwQlBBVDZXQ2tnbl9YVmlZZFVQUm9zX1RmVjQyd291VE9qWUN0TFNzMnoydTBrejVvU3R5R0wxTGN3dEZQczNDVjQyVXc0MUNYRFpzSElpS1A3eGxPTDZqY05FX05pZlBXWmlsbTlQWXJjajFTWElsdTFKblZhdUJOQWVrR3lpZ0N2VTJVaDRnVzRYdHZ3Z1k0cWFVTWdDeUlFQ2NCazB1Y0liSmNjUVNPb1hqYjRoM28xTm9PRGFONG54UEtVSmYxRVdFejMwNFRSS2VzLWw1dFd1WFJnSWx2UmtaSldsQ19aU0w5cFZ0cGgyMEtFdVRFdkFCZlA5UHpMRGN3MGF0c1lJYzUyMjNCN1laLS0yRDhBZHBlSjhxWTBGbzEwVW1CMmZFeEdRbnJ3OVFZTUhFaENRd2M2c1V2MmVhX1JJblNJYjU5WldEdkxfWHg4QWRxdWJ2N2xPcUoyZThEQ2xzNVczbmNLM1d6ZU1XVmU3ZFNKc01IMEZuMW9VdEo2LVZ2aGltcEhIY0pPTjJ1QjA5R2FYYmZvZV9qblhTaWJNN3N0RGs0WExJM2NPRl9GYzllZzMtOUdOemFRSmFqX3VkejRiaGFaa1dSRk5uNEpNVWZyb1Voc251ajVnUzVoTmk5SnV1bGdtWmxfS0UyYk1aRFNtR1JkQmVkdjk0MUxFRTNzYUl2UzVOQXR6Um91WmVsb3g1SXdFV3NDNzZzMndhYkNlb05Rek9RMTRqekdZMjVwNGxWWUpJWHVCYlNfbkl4VXY2bS41dFFESlZzeDgybkxLMDFwNHoyTzZ3.LA4WtpD8uYuVHnMpFuroAUE-ihHo3CXiDR7QvnGf1n1DpYHWGPGyaWfukzg-bj0Nv0IsFUUNPAESfBpoDjM0D0eILNy3nJ0Lc45Y350ntAL2rFfYzLy5zIBSUFY6Qoi9ams-aataRcg9OvbhhERkjCTXNNcqBojol2W7ZlMcuIvV7-s9fZX3rDeRn9giDe7xjuT2SSKoz8BgM_2bnQYCtwmcc-iDP86jvfrG03zOPu5L4x9_FtaSrD2w3SBjh_LeCnLUBy4z2U8h4dv_qff1DiMqzZtflWhITas3cHRswI31wuL1M4OzH6gPiHkTOzAW8pyo4A45mnnbO1OwGmQEQA&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000031&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;cat&quot;,&#xd;
    &quot;osType&quot;: &quot;&quot;,&#xd;
    &quot;osVersion&quot;: &quot;&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;&quot;,&#xd;
    &quot;deviceName&quot;: &quot;TC31&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+41.98/+2.82&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;83A536F2&quot;,&#xd;
    &quot;locationSource&quot;: &quot;&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SECURE_ELEMENT&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40011 TR ID contains letters)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;tokenInfo&quot;: {&#xd;
  &quot;token&quot;: &quot;4355053922806727&quot;,&#xd;
  &quot;tokenType&quot;: &quot;UNKNOWN&quot;,&#xd;
  &quot;tokenExpirationDate&quot;: {&#xd;
   &quot;month&quot;: &quot;05&quot;,&#xd;
   &quot;year&quot;: &quot;2027&quot; &#xd;
  },&#xd;
  &quot;numberOfActiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
  &quot;numberOfInactiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
  &quot;numberOfSuspendedTokensForPAN&quot;: &quot;0&quot; &#xd;
 },&#xd;
 &quot;panReferenceID&quot;: &quot;V-3017192484534844832027&quot;,&#xd;
 &quot;walletAccountEmailAddressHash&quot;: &quot;891BE3187FF7E64FAFC7B5872E774034F0A4E4CF4832368C6E0F25CCCD9BA3F0&quot;,&#xd;
 &quot;clientWalletAccountID&quot;: &quot;891BE3187FF900000000000000000027&quot;,&#xd;
 &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
 &quot;cvv2ResultsCode&quot;: &quot;M&quot;,&#xd;
 &quot;consumerEntryMode&quot;: &quot;&quot;,&#xd;
 &quot;locale&quot;: &quot;en_US&quot;,&#xd;
 &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09UVXdOamswTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLndjekZNQXlXQlYzYnhDWURyMGg5NGxlUzVPSklqRFhXdTk1UG95STVMZW5OT2tyQzUxOHlhZnhPNmJKSUxFQzNvNXhLWUxPZVp2V0hHR18xTDdLTFJIakFQY0VmQk9GN2xRNGwyc2N3U3Rjc042OFRCQlY5OXlVOVFGN05mb1kxVDNpX3VqV3czejA3QnZkMUQzYmRhUkF3eDR4UTdoVTJCZkNmb1dCTW9md3c1WkxPZFlYN3U3ZERUbFctNlpUempGUnlUa3pwekhhVlp5eGpPTDc4a1RJVHlGSUpURVlQaHcyR3dzZkFlSnA1WElQWEZHR0x0aERUeHcwRF9qX2Q0VFd4a1RWNk5halBhdHdNX0xFMi1UTFd4WW5vMUIzMVB4dHJXSmtST18wTlVYaUttcTIzRGtDUkpWTFZqanN5VXlYclFRNmM0QmszeVlOUlpHQmRXZy43eGV1dk5xdmdYbldfLUE3Lnc0U1picEpvM19ZRmpkVTdlcGZBYkctQWtaNGtwa2I3QXlhVXZUb3oydTh4OEpwanhRcEF0Rm00ZEZ6Wjk0U094a3BWcms0VklBZi1waFdKSFFscHRkUDlUSWlXRVYxSnRVWHpVdnNkZHVtTzJLY0w1LVdLZThaaGhxZnpiT3NRcHN3TnZpT2w3b1VhbVlyT3NPS2c2VFFnRW03bFk4VUh6MFI5Ymh5VDF3eUVINHFBWkxxODdob0F5b1lIUjhtbG5xeDBYQXh1Rjk0dHZwWTBndm1OY1Z0ZkVpVkNPclI3SzUzQTZtRjJ4eVR5SGMzS2ZfWjdlc1FnbThlVjRPaTNDNzRsazdKOTh4RVctWDNJZnZHNHBXYXhuS2JhSkJ0WHNjcERsM0xUQkZuM0NyRUhTcUctT0ZBRHZNWkN5bFZOQTBBLUxqSC1qUnh4RmlLdXJxMC1PaWc0UW9lQlpaN2lhM3RxSkl4LTJ0Z1RQbC1UVUVzLXVSaHdaTkxCcjY2YWExZ1FYbEdURjU1T3VDVmwzQ1NRbXBDZ1hKLVFjbWd0NzVienFIM1h6M1oyNS16a0tiMG5XWnRFbEt0LThnR1lCNDVPZWF1STZBZlhJNkRHeEg0WFc4dXJURk81Y3ZoeXk1cEJFMnBoVU8xSHRNT0dOXzF2ZzhPTEF3ankwT1RxWWlQaFJEaG1yNVRBLVpEVnlNMHZjZ01lMHhwNnR4ek12a2x0cERjQlVSSEc3aFRyQmhDUjNBNGE5QUxPdzBHdFl5d3BBcXpOTDdVVGRteldjTkZCNlhES1BRTkE2T2RkZWU1OVBjV0dkbkJmV0pBeC1Ld0U5RlYxY00ycWtRem5ieHBMcmJKZGZBdmc4U3ZRem1FZ05pb2tzV0M3OFdlMU41WUVMUTVXNlpna0xxemxzMkd3RTFxVk5WNVpGVmxNSHBPd2dFbWlxZTEyZVdEZElFRXpIOFl4VWE1RUJiYWdSY1A0QmpwT3BMTTluTWRVSzhyRzVLcF9fYWRPd3U3al9INFBQSU1CMWZnOVJoSlV6WkNDOUxqdGxtaExLOWhEY1dsa2ZCVjlPaUpSQi1aRkU5TGxWN21YM0NNUGsweVZVTE9hbmduVGlZbUhfMW9pbjU2SFAxWFVBM2ZSVkV1LVhGN2xPU0xRZVFqakk0Vk9Hd0U4RExxaklNYTBJRUlwUzhfWU5CVmphbHo3WElxVXVUTVpIZXlOOXRsQ0RZWjVyYUhCUjY2Y245UVNxQUM5UVhXNjgxQ3ZXWTJVUXQ2NDlPZ0IyTWQzZkhTdnZ6WE1FNHFqYmNyWEkwQ21YdE4wbmtrZjFOa2hZdG95czBORWoyZld3NGRHb0xGVENkVjZFUXk5cldmY1I1LW9adDFXa0tpYWNGcWJPbkRQWGxYcGRoQV9DY3VWMUlnS1BrekZmOHlFcGViN19pY1NJV2J2MnkxalN1d1Y1V3gyR19wY25kYWxqM0VEZkx5UzBtVktqTHJvcVlZb3lmWDJiZzRlQVdWT2lTVk1aUlNUVmJLbllWbjIyMm9aelAxTXk2ZTREQVlURWRSU1dUQWl3eTNkN1FlaDlrUVlVQ1dTUzJEaHNNOURWNGkybk5zaHJESzB2YWpUcnVmbl9yYmFvY3U5V19hRHNXVzFEaGlDdGxFN0xJVHNGeXBBSnpxTXNzWEJNcHNaUmI5eG5aaEJubG9ITjZQS1lZVFFGdUlCbHU2eTdVNFV0c1JWdmpINS1ibEZKMnRFeEtqWWhxSzlNNlpPYlVLN1hMOC1Sa0VodTNpek43TkRFa0NHemVmckM5RDRld1EtQ1NtZGdGU0ZNQkp3c0xKSFA2RFkzaWJsMnZnLjZTQl9WRHF5WFRyX1JQMWtaVHhRLVE.kGljDemgNtz-OX4FdZ3p4OO7X-5ONoLqhjWVlurM9lqf2_IOYdhFJNLXvEyT_Ev0xFFQmaTN-S-NCYm0OH1DTFm5wzvO10Qe1SVL-jMmcyFzf-p0svr6ZXlgikEedJWYHcPoiO2Vqm7M3TgzxqN2rCEfiTwC5uNbfQcB5L7L7QzMUxiP1LyQFTjvQhStzu6LiGTDQUeD0zOqte4AQpEj0DhVKb48NyNcoEQp75BLeLO3DeIMHfoE1bix4krBCiYRoM51mpId3Fz11Ai_saJOBsLs_Z44rGMElPhNp8HAJwO7PbMLnfvQ71RbFnBO1tzWqsk3Te6EuEksehakSbT3Ig&quot;,&#xd;
 &quot;deviceInfo&quot;: {&#xd;
  &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000027&quot;,&#xd;
  &quot;deviceLanguageCode&quot;: &quot;cat&quot;,&#xd;
  &quot;osType&quot;: &quot;&quot;,&#xd;
  &quot;osVersion&quot;: &quot;&quot;,&#xd;
  &quot;osBuildID&quot;: &quot;&quot;,&#xd;
  &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
  &quot;deviceIDType&quot;: &quot;&quot;,&#xd;
  &quot;deviceManufacturer&quot;: &quot;&quot;,&#xd;
  &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
  &quot;deviceModel&quot;: &quot;&quot;,&#xd;
  &quot;deviceName&quot;: &quot;TC27&quot;,&#xd;
  &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
  &quot;deviceLocation&quot;: &quot;+41.98/+2.82&quot;,&#xd;
  &quot;deviceIPAddressV4&quot;: &quot;83A536F2&quot;,&#xd;
  &quot;locationSource&quot;: &quot;&quot;,&#xd;
  &quot;tokenProtectionMethod&quot;: &quot;SECURE_ELEMENT&quot; &#xd;
 }&#xd;
&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/ABCDEFG001/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40011 TR ID contains letters #2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;tokenInfo&quot;: {&#xd;
  &quot;token&quot;: &quot;4355053922806727&quot;,&#xd;
  &quot;tokenType&quot;: &quot;UNKNOWN&quot;,&#xd;
  &quot;tokenExpirationDate&quot;: {&#xd;
   &quot;month&quot;: &quot;05&quot;,&#xd;
   &quot;year&quot;: &quot;2027&quot; &#xd;
  },&#xd;
  &quot;numberOfActiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
  &quot;numberOfInactiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
  &quot;numberOfSuspendedTokensForPAN&quot;: &quot;0&quot; &#xd;
 },&#xd;
 &quot;panReferenceID&quot;: &quot;V-3017192484534844832027&quot;,&#xd;
 &quot;walletAccountEmailAddressHash&quot;: &quot;891BE3187FF7E64FAFC7B5872E774034F0A4E4CF4832368C6E0F25CCCD9BA3F0&quot;,&#xd;
 &quot;clientWalletAccountID&quot;: &quot;891BE3187FF900000000000000000027&quot;,&#xd;
 &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
 &quot;cvv2ResultsCode&quot;: &quot;M&quot;,&#xd;
 &quot;consumerEntryMode&quot;: &quot;&quot;,&#xd;
 &quot;locale&quot;: &quot;en_US&quot;,&#xd;
 &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09UVXdOamswTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLndjekZNQXlXQlYzYnhDWURyMGg5NGxlUzVPSklqRFhXdTk1UG95STVMZW5OT2tyQzUxOHlhZnhPNmJKSUxFQzNvNXhLWUxPZVp2V0hHR18xTDdLTFJIakFQY0VmQk9GN2xRNGwyc2N3U3Rjc042OFRCQlY5OXlVOVFGN05mb1kxVDNpX3VqV3czejA3QnZkMUQzYmRhUkF3eDR4UTdoVTJCZkNmb1dCTW9md3c1WkxPZFlYN3U3ZERUbFctNlpUempGUnlUa3pwekhhVlp5eGpPTDc4a1RJVHlGSUpURVlQaHcyR3dzZkFlSnA1WElQWEZHR0x0aERUeHcwRF9qX2Q0VFd4a1RWNk5halBhdHdNX0xFMi1UTFd4WW5vMUIzMVB4dHJXSmtST18wTlVYaUttcTIzRGtDUkpWTFZqanN5VXlYclFRNmM0QmszeVlOUlpHQmRXZy43eGV1dk5xdmdYbldfLUE3Lnc0U1picEpvM19ZRmpkVTdlcGZBYkctQWtaNGtwa2I3QXlhVXZUb3oydTh4OEpwanhRcEF0Rm00ZEZ6Wjk0U094a3BWcms0VklBZi1waFdKSFFscHRkUDlUSWlXRVYxSnRVWHpVdnNkZHVtTzJLY0w1LVdLZThaaGhxZnpiT3NRcHN3TnZpT2w3b1VhbVlyT3NPS2c2VFFnRW03bFk4VUh6MFI5Ymh5VDF3eUVINHFBWkxxODdob0F5b1lIUjhtbG5xeDBYQXh1Rjk0dHZwWTBndm1OY1Z0ZkVpVkNPclI3SzUzQTZtRjJ4eVR5SGMzS2ZfWjdlc1FnbThlVjRPaTNDNzRsazdKOTh4RVctWDNJZnZHNHBXYXhuS2JhSkJ0WHNjcERsM0xUQkZuM0NyRUhTcUctT0ZBRHZNWkN5bFZOQTBBLUxqSC1qUnh4RmlLdXJxMC1PaWc0UW9lQlpaN2lhM3RxSkl4LTJ0Z1RQbC1UVUVzLXVSaHdaTkxCcjY2YWExZ1FYbEdURjU1T3VDVmwzQ1NRbXBDZ1hKLVFjbWd0NzVienFIM1h6M1oyNS16a0tiMG5XWnRFbEt0LThnR1lCNDVPZWF1STZBZlhJNkRHeEg0WFc4dXJURk81Y3ZoeXk1cEJFMnBoVU8xSHRNT0dOXzF2ZzhPTEF3ankwT1RxWWlQaFJEaG1yNVRBLVpEVnlNMHZjZ01lMHhwNnR4ek12a2x0cERjQlVSSEc3aFRyQmhDUjNBNGE5QUxPdzBHdFl5d3BBcXpOTDdVVGRteldjTkZCNlhES1BRTkE2T2RkZWU1OVBjV0dkbkJmV0pBeC1Ld0U5RlYxY00ycWtRem5ieHBMcmJKZGZBdmc4U3ZRem1FZ05pb2tzV0M3OFdlMU41WUVMUTVXNlpna0xxemxzMkd3RTFxVk5WNVpGVmxNSHBPd2dFbWlxZTEyZVdEZElFRXpIOFl4VWE1RUJiYWdSY1A0QmpwT3BMTTluTWRVSzhyRzVLcF9fYWRPd3U3al9INFBQSU1CMWZnOVJoSlV6WkNDOUxqdGxtaExLOWhEY1dsa2ZCVjlPaUpSQi1aRkU5TGxWN21YM0NNUGsweVZVTE9hbmduVGlZbUhfMW9pbjU2SFAxWFVBM2ZSVkV1LVhGN2xPU0xRZVFqakk0Vk9Hd0U4RExxaklNYTBJRUlwUzhfWU5CVmphbHo3WElxVXVUTVpIZXlOOXRsQ0RZWjVyYUhCUjY2Y245UVNxQUM5UVhXNjgxQ3ZXWTJVUXQ2NDlPZ0IyTWQzZkhTdnZ6WE1FNHFqYmNyWEkwQ21YdE4wbmtrZjFOa2hZdG95czBORWoyZld3NGRHb0xGVENkVjZFUXk5cldmY1I1LW9adDFXa0tpYWNGcWJPbkRQWGxYcGRoQV9DY3VWMUlnS1BrekZmOHlFcGViN19pY1NJV2J2MnkxalN1d1Y1V3gyR19wY25kYWxqM0VEZkx5UzBtVktqTHJvcVlZb3lmWDJiZzRlQVdWT2lTVk1aUlNUVmJLbllWbjIyMm9aelAxTXk2ZTREQVlURWRSU1dUQWl3eTNkN1FlaDlrUVlVQ1dTUzJEaHNNOURWNGkybk5zaHJESzB2YWpUcnVmbl9yYmFvY3U5V19hRHNXVzFEaGlDdGxFN0xJVHNGeXBBSnpxTXNzWEJNcHNaUmI5eG5aaEJubG9ITjZQS1lZVFFGdUlCbHU2eTdVNFV0c1JWdmpINS1ibEZKMnRFeEtqWWhxSzlNNlpPYlVLN1hMOC1Sa0VodTNpek43TkRFa0NHemVmckM5RDRld1EtQ1NtZGdGU0ZNQkp3c0xKSFA2RFkzaWJsMnZnLjZTQl9WRHF5WFRyX1JQMWtaVHhRLVE.kGljDemgNtz-OX4FdZ3p4OO7X-5ONoLqhjWVlurM9lqf2_IOYdhFJNLXvEyT_Ev0xFFQmaTN-S-NCYm0OH1DTFm5wzvO10Qe1SVL-jMmcyFzf-p0svr6ZXlgikEedJWYHcPoiO2Vqm7M3TgzxqN2rCEfiTwC5uNbfQcB5L7L7QzMUxiP1LyQFTjvQhStzu6LiGTDQUeD0zOqte4AQpEj0DhVKb48NyNcoEQp75BLeLO3DeIMHfoE1bix4krBCiYRoM51mpId3Fz11Ai_saJOBsLs_Z44rGMElPhNp8HAJwO7PbMLnfvQ71RbFnBO1tzWqsk3Te6EuEksehakSbT3Ig&quot;,&#xd;
 &quot;deviceInfo&quot;: {&#xd;
  &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000027&quot;,&#xd;
  &quot;deviceLanguageCode&quot;: &quot;cat&quot;,&#xd;
  &quot;osType&quot;: &quot;&quot;,&#xd;
  &quot;osVersion&quot;: &quot;&quot;,&#xd;
  &quot;osBuildID&quot;: &quot;&quot;,&#xd;
  &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
  &quot;deviceIDType&quot;: &quot;&quot;,&#xd;
  &quot;deviceManufacturer&quot;: &quot;&quot;,&#xd;
  &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
  &quot;deviceModel&quot;: &quot;&quot;,&#xd;
  &quot;deviceName&quot;: &quot;TC27&quot;,&#xd;
  &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
  &quot;deviceLocation&quot;: &quot;+41.98/+2.82&quot;,&#xd;
  &quot;deviceIPAddressV4&quot;: &quot;83A536F2&quot;,&#xd;
  &quot;locationSource&quot;: &quot;&quot;,&#xd;
  &quot;tokenProtectionMethod&quot;: &quot;SECURE_ELEMENT&quot; &#xd;
 }&#xd;
&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/AABBCCDDEEFF/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40011 TR ID contains letters #3)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;tokenInfo&quot;: {&#xd;
  &quot;token&quot;: &quot;4355053922806727&quot;,&#xd;
  &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
  &quot;tokenExpirationDate&quot;: {&#xd;
   &quot;month&quot;: &quot;05&quot;,&#xd;
   &quot;year&quot;: &quot;2027&quot; &#xd;
  },&#xd;
  &quot;numberOfActiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
  &quot;numberOfInactiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
  &quot;numberOfSuspendedTokensForPAN&quot;: &quot;0&quot; &#xd;
 },&#xd;
 &quot;panReferenceID&quot;: &quot;V-3017192484534844832027&quot;,&#xd;
 &quot;walletAccountEmailAddressHash&quot;: &quot;891BE3187FF7E64FAFC7B5872E774034F0A4E4CF4832368C6E0F25CCCD9BA3F0&quot;,&#xd;
 &quot;clientWalletAccountID&quot;: &quot;891BE3187FF900000000000000000027&quot;,&#xd;
 &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
 &quot;cvv2ResultsCode&quot;: &quot;M&quot;,&#xd;
 &quot;consumerEntryMode&quot;: &quot;&quot;,&#xd;
 &quot;locale&quot;: &quot;en_US&quot;,&#xd;
 &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09UVXdOamswTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLndjekZNQXlXQlYzYnhDWURyMGg5NGxlUzVPSklqRFhXdTk1UG95STVMZW5OT2tyQzUxOHlhZnhPNmJKSUxFQzNvNXhLWUxPZVp2V0hHR18xTDdLTFJIakFQY0VmQk9GN2xRNGwyc2N3U3Rjc042OFRCQlY5OXlVOVFGN05mb1kxVDNpX3VqV3czejA3QnZkMUQzYmRhUkF3eDR4UTdoVTJCZkNmb1dCTW9md3c1WkxPZFlYN3U3ZERUbFctNlpUempGUnlUa3pwekhhVlp5eGpPTDc4a1RJVHlGSUpURVlQaHcyR3dzZkFlSnA1WElQWEZHR0x0aERUeHcwRF9qX2Q0VFd4a1RWNk5halBhdHdNX0xFMi1UTFd4WW5vMUIzMVB4dHJXSmtST18wTlVYaUttcTIzRGtDUkpWTFZqanN5VXlYclFRNmM0QmszeVlOUlpHQmRXZy43eGV1dk5xdmdYbldfLUE3Lnc0U1picEpvM19ZRmpkVTdlcGZBYkctQWtaNGtwa2I3QXlhVXZUb3oydTh4OEpwanhRcEF0Rm00ZEZ6Wjk0U094a3BWcms0VklBZi1waFdKSFFscHRkUDlUSWlXRVYxSnRVWHpVdnNkZHVtTzJLY0w1LVdLZThaaGhxZnpiT3NRcHN3TnZpT2w3b1VhbVlyT3NPS2c2VFFnRW03bFk4VUh6MFI5Ymh5VDF3eUVINHFBWkxxODdob0F5b1lIUjhtbG5xeDBYQXh1Rjk0dHZwWTBndm1OY1Z0ZkVpVkNPclI3SzUzQTZtRjJ4eVR5SGMzS2ZfWjdlc1FnbThlVjRPaTNDNzRsazdKOTh4RVctWDNJZnZHNHBXYXhuS2JhSkJ0WHNjcERsM0xUQkZuM0NyRUhTcUctT0ZBRHZNWkN5bFZOQTBBLUxqSC1qUnh4RmlLdXJxMC1PaWc0UW9lQlpaN2lhM3RxSkl4LTJ0Z1RQbC1UVUVzLXVSaHdaTkxCcjY2YWExZ1FYbEdURjU1T3VDVmwzQ1NRbXBDZ1hKLVFjbWd0NzVienFIM1h6M1oyNS16a0tiMG5XWnRFbEt0LThnR1lCNDVPZWF1STZBZlhJNkRHeEg0WFc4dXJURk81Y3ZoeXk1cEJFMnBoVU8xSHRNT0dOXzF2ZzhPTEF3ankwT1RxWWlQaFJEaG1yNVRBLVpEVnlNMHZjZ01lMHhwNnR4ek12a2x0cERjQlVSSEc3aFRyQmhDUjNBNGE5QUxPdzBHdFl5d3BBcXpOTDdVVGRteldjTkZCNlhES1BRTkE2T2RkZWU1OVBjV0dkbkJmV0pBeC1Ld0U5RlYxY00ycWtRem5ieHBMcmJKZGZBdmc4U3ZRem1FZ05pb2tzV0M3OFdlMU41WUVMUTVXNlpna0xxemxzMkd3RTFxVk5WNVpGVmxNSHBPd2dFbWlxZTEyZVdEZElFRXpIOFl4VWE1RUJiYWdSY1A0QmpwT3BMTTluTWRVSzhyRzVLcF9fYWRPd3U3al9INFBQSU1CMWZnOVJoSlV6WkNDOUxqdGxtaExLOWhEY1dsa2ZCVjlPaUpSQi1aRkU5TGxWN21YM0NNUGsweVZVTE9hbmduVGlZbUhfMW9pbjU2SFAxWFVBM2ZSVkV1LVhGN2xPU0xRZVFqakk0Vk9Hd0U4RExxaklNYTBJRUlwUzhfWU5CVmphbHo3WElxVXVUTVpIZXlOOXRsQ0RZWjVyYUhCUjY2Y245UVNxQUM5UVhXNjgxQ3ZXWTJVUXQ2NDlPZ0IyTWQzZkhTdnZ6WE1FNHFqYmNyWEkwQ21YdE4wbmtrZjFOa2hZdG95czBORWoyZld3NGRHb0xGVENkVjZFUXk5cldmY1I1LW9adDFXa0tpYWNGcWJPbkRQWGxYcGRoQV9DY3VWMUlnS1BrekZmOHlFcGViN19pY1NJV2J2MnkxalN1d1Y1V3gyR19wY25kYWxqM0VEZkx5UzBtVktqTHJvcVlZb3lmWDJiZzRlQVdWT2lTVk1aUlNUVmJLbllWbjIyMm9aelAxTXk2ZTREQVlURWRSU1dUQWl3eTNkN1FlaDlrUVlVQ1dTUzJEaHNNOURWNGkybk5zaHJESzB2YWpUcnVmbl9yYmFvY3U5V19hRHNXVzFEaGlDdGxFN0xJVHNGeXBBSnpxTXNzWEJNcHNaUmI5eG5aaEJubG9ITjZQS1lZVFFGdUlCbHU2eTdVNFV0c1JWdmpINS1ibEZKMnRFeEtqWWhxSzlNNlpPYlVLN1hMOC1Sa0VodTNpek43TkRFa0NHemVmckM5RDRld1EtQ1NtZGdGU0ZNQkp3c0xKSFA2RFkzaWJsMnZnLjZTQl9WRHF5WFRyX1JQMWtaVHhRLVE.kGljDemgNtz-OX4FdZ3p4OO7X-5ONoLqhjWVlurM9lqf2_IOYdhFJNLXvEyT_Ev0xFFQmaTN-S-NCYm0OH1DTFm5wzvO10Qe1SVL-jMmcyFzf-p0svr6ZXlgikEedJWYHcPoiO2Vqm7M3TgzxqN2rCEfiTwC5uNbfQcB5L7L7QzMUxiP1LyQFTjvQhStzu6LiGTDQUeD0zOqte4AQpEj0DhVKb48NyNcoEQp75BLeLO3DeIMHfoE1bix4krBCiYRoM51mpId3Fz11Ai_saJOBsLs_Z44rGMElPhNp8HAJwO7PbMLnfvQ71RbFnBO1tzWqsk3Te6EuEksehakSbT3Ig&quot;,&#xd;
 &quot;deviceInfo&quot;: {&#xd;
  &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000027&quot;,&#xd;
  &quot;deviceLanguageCode&quot;: &quot;cat&quot;,&#xd;
  &quot;osType&quot;: &quot;&quot;,&#xd;
  &quot;osVersion&quot;: &quot;&quot;,&#xd;
  &quot;osBuildID&quot;: &quot;&quot;,&#xd;
  &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
  &quot;deviceIDType&quot;: &quot;&quot;,&#xd;
  &quot;deviceManufacturer&quot;: &quot;&quot;,&#xd;
  &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
  &quot;deviceModel&quot;: &quot;&quot;,&#xd;
  &quot;deviceName&quot;: &quot;TC27&quot;,&#xd;
  &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
  &quot;deviceLocation&quot;: &quot;+41.98/+2.82&quot;,&#xd;
  &quot;deviceIPAddressV4&quot;: &quot;83A536F2&quot;,&#xd;
  &quot;locationSource&quot;: &quot;&quot;,&#xd;
  &quot;tokenProtectionMethod&quot;: &quot;SECURE_ELEMENT&quot; &#xd;
 }&#xd;
&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/AABBCCDDEEFF/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40011 Unsupported enum - Token Type)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> &quot;tokenInfo&quot;: {&#xd;
  &quot;token&quot;: &quot;4355053922806727&quot;,&#xd;
  &quot;tokenType&quot;: &quot;UNKNOWN&quot;,&#xd;
  &quot;tokenExpirationDate&quot;: {&#xd;
   &quot;month&quot;: &quot;05&quot;,&#xd;
   &quot;year&quot;: &quot;2027&quot; &#xd;
  },&#xd;
  &quot;numberOfActiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
  &quot;numberOfInactiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
  &quot;numberOfSuspendedTokensForPAN&quot;: &quot;0&quot; &#xd;
 },&#xd;
 &quot;panReferenceID&quot;: &quot;V-3017192484534844832027&quot;,&#xd;
 &quot;walletAccountEmailAddressHash&quot;: &quot;891BE3187FF7E64FAFC7B5872E774034F0A4E4CF4832368C6E0F25CCCD9BA3F0&quot;,&#xd;
 &quot;clientWalletAccountID&quot;: &quot;891BE3187FF900000000000000000027&quot;,&#xd;
 &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
 &quot;cvv2ResultsCode&quot;: &quot;M&quot;,&#xd;
 &quot;consumerEntryMode&quot;: &quot;&quot;,&#xd;
 &quot;locale&quot;: &quot;en_US&quot;,&#xd;
 &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09UVXdOamswTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLndjekZNQXlXQlYzYnhDWURyMGg5NGxlUzVPSklqRFhXdTk1UG95STVMZW5OT2tyQzUxOHlhZnhPNmJKSUxFQzNvNXhLWUxPZVp2V0hHR18xTDdLTFJIakFQY0VmQk9GN2xRNGwyc2N3U3Rjc042OFRCQlY5OXlVOVFGN05mb1kxVDNpX3VqV3czejA3QnZkMUQzYmRhUkF3eDR4UTdoVTJCZkNmb1dCTW9md3c1WkxPZFlYN3U3ZERUbFctNlpUempGUnlUa3pwekhhVlp5eGpPTDc4a1RJVHlGSUpURVlQaHcyR3dzZkFlSnA1WElQWEZHR0x0aERUeHcwRF9qX2Q0VFd4a1RWNk5halBhdHdNX0xFMi1UTFd4WW5vMUIzMVB4dHJXSmtST18wTlVYaUttcTIzRGtDUkpWTFZqanN5VXlYclFRNmM0QmszeVlOUlpHQmRXZy43eGV1dk5xdmdYbldfLUE3Lnc0U1picEpvM19ZRmpkVTdlcGZBYkctQWtaNGtwa2I3QXlhVXZUb3oydTh4OEpwanhRcEF0Rm00ZEZ6Wjk0U094a3BWcms0VklBZi1waFdKSFFscHRkUDlUSWlXRVYxSnRVWHpVdnNkZHVtTzJLY0w1LVdLZThaaGhxZnpiT3NRcHN3TnZpT2w3b1VhbVlyT3NPS2c2VFFnRW03bFk4VUh6MFI5Ymh5VDF3eUVINHFBWkxxODdob0F5b1lIUjhtbG5xeDBYQXh1Rjk0dHZwWTBndm1OY1Z0ZkVpVkNPclI3SzUzQTZtRjJ4eVR5SGMzS2ZfWjdlc1FnbThlVjRPaTNDNzRsazdKOTh4RVctWDNJZnZHNHBXYXhuS2JhSkJ0WHNjcERsM0xUQkZuM0NyRUhTcUctT0ZBRHZNWkN5bFZOQTBBLUxqSC1qUnh4RmlLdXJxMC1PaWc0UW9lQlpaN2lhM3RxSkl4LTJ0Z1RQbC1UVUVzLXVSaHdaTkxCcjY2YWExZ1FYbEdURjU1T3VDVmwzQ1NRbXBDZ1hKLVFjbWd0NzVienFIM1h6M1oyNS16a0tiMG5XWnRFbEt0LThnR1lCNDVPZWF1STZBZlhJNkRHeEg0WFc4dXJURk81Y3ZoeXk1cEJFMnBoVU8xSHRNT0dOXzF2ZzhPTEF3ankwT1RxWWlQaFJEaG1yNVRBLVpEVnlNMHZjZ01lMHhwNnR4ek12a2x0cERjQlVSSEc3aFRyQmhDUjNBNGE5QUxPdzBHdFl5d3BBcXpOTDdVVGRteldjTkZCNlhES1BRTkE2T2RkZWU1OVBjV0dkbkJmV0pBeC1Ld0U5RlYxY00ycWtRem5ieHBMcmJKZGZBdmc4U3ZRem1FZ05pb2tzV0M3OFdlMU41WUVMUTVXNlpna0xxemxzMkd3RTFxVk5WNVpGVmxNSHBPd2dFbWlxZTEyZVdEZElFRXpIOFl4VWE1RUJiYWdSY1A0QmpwT3BMTTluTWRVSzhyRzVLcF9fYWRPd3U3al9INFBQSU1CMWZnOVJoSlV6WkNDOUxqdGxtaExLOWhEY1dsa2ZCVjlPaUpSQi1aRkU5TGxWN21YM0NNUGsweVZVTE9hbmduVGlZbUhfMW9pbjU2SFAxWFVBM2ZSVkV1LVhGN2xPU0xRZVFqakk0Vk9Hd0U4RExxaklNYTBJRUlwUzhfWU5CVmphbHo3WElxVXVUTVpIZXlOOXRsQ0RZWjVyYUhCUjY2Y245UVNxQUM5UVhXNjgxQ3ZXWTJVUXQ2NDlPZ0IyTWQzZkhTdnZ6WE1FNHFqYmNyWEkwQ21YdE4wbmtrZjFOa2hZdG95czBORWoyZld3NGRHb0xGVENkVjZFUXk5cldmY1I1LW9adDFXa0tpYWNGcWJPbkRQWGxYcGRoQV9DY3VWMUlnS1BrekZmOHlFcGViN19pY1NJV2J2MnkxalN1d1Y1V3gyR19wY25kYWxqM0VEZkx5UzBtVktqTHJvcVlZb3lmWDJiZzRlQVdWT2lTVk1aUlNUVmJLbllWbjIyMm9aelAxTXk2ZTREQVlURWRSU1dUQWl3eTNkN1FlaDlrUVlVQ1dTUzJEaHNNOURWNGkybk5zaHJESzB2YWpUcnVmbl9yYmFvY3U5V19hRHNXVzFEaGlDdGxFN0xJVHNGeXBBSnpxTXNzWEJNcHNaUmI5eG5aaEJubG9ITjZQS1lZVFFGdUlCbHU2eTdVNFV0c1JWdmpINS1ibEZKMnRFeEtqWWhxSzlNNlpPYlVLN1hMOC1Sa0VodTNpek43TkRFa0NHemVmckM5RDRld1EtQ1NtZGdGU0ZNQkp3c0xKSFA2RFkzaWJsMnZnLjZTQl9WRHF5WFRyX1JQMWtaVHhRLVE.kGljDemgNtz-OX4FdZ3p4OO7X-5ONoLqhjWVlurM9lqf2_IOYdhFJNLXvEyT_Ev0xFFQmaTN-S-NCYm0OH1DTFm5wzvO10Qe1SVL-jMmcyFzf-p0svr6ZXlgikEedJWYHcPoiO2Vqm7M3TgzxqN2rCEfiTwC5uNbfQcB5L7L7QzMUxiP1LyQFTjvQhStzu6LiGTDQUeD0zOqte4AQpEj0DhVKb48NyNcoEQp75BLeLO3DeIMHfoE1bix4krBCiYRoM51mpId3Fz11Ai_saJOBsLs_Z44rGMElPhNp8HAJwO7PbMLnfvQ71RbFnBO1tzWqsk3Te6EuEksehakSbT3Ig&quot;,&#xd;
 &quot;deviceInfo&quot;: {&#xd;
  &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000027&quot;,&#xd;
  &quot;deviceLanguageCode&quot;: &quot;cat&quot;,&#xd;
  &quot;osType&quot;: &quot;&quot;,&#xd;
  &quot;osVersion&quot;: &quot;&quot;,&#xd;
  &quot;osBuildID&quot;: &quot;&quot;,&#xd;
  &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
  &quot;deviceIDType&quot;: &quot;&quot;,&#xd;
  &quot;deviceManufacturer&quot;: &quot;&quot;,&#xd;
  &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
  &quot;deviceModel&quot;: &quot;&quot;,&#xd;
  &quot;deviceName&quot;: &quot;TC27&quot;,&#xd;
  &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
  &quot;deviceLocation&quot;: &quot;+41.98/+2.82&quot;,&#xd;
  &quot;deviceIPAddressV4&quot;: &quot;83A536F2&quot;,&#xd;
  &quot;locationSource&quot;: &quot;&quot;,&#xd;
  &quot;tokenProtectionMethod&quot;: &quot;SECURE_ELEMENT&quot; &#xd;
 }&#xd;
&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40011 enum - Device Type)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;tokenInfo&quot;: {&#xd;
  &quot;token&quot;: &quot;4355053922806728&quot;,&#xd;
  &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
  &quot;tokenExpirationDate&quot;: {&#xd;
   &quot;month&quot;: &quot;05&quot;,&#xd;
   &quot;year&quot;: &quot;2027&quot; &#xd;
  },&#xd;
  &quot;numberOfActiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
  &quot;numberOfInactiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
  &quot;numberOfSuspendedTokensForPAN&quot;: &quot;0&quot; &#xd;
 },&#xd;
 &quot;panReferenceID&quot;: &quot;V-3017192484534844832028&quot;,&#xd;
 &quot;walletAccountEmailAddressHash&quot;: &quot;891BE3187FF7E64FAFC7B5872E774034F0A4E4CF4832368C6E0F25CCCD9BA3F0&quot;,&#xd;
 &quot;clientWalletAccountID&quot;: &quot;891BE3187FF900000000000000000028&quot;,&#xd;
 &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
 &quot;cvv2ResultsCode&quot;: &quot;M&quot;,&#xd;
 &quot;consumerEntryMode&quot;: &quot;&quot;,&#xd;
 &quot;locale&quot;: &quot;en_US&quot;,&#xd;
 &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09UVXdOamsyTlN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLjFWeEJxWVNCOTJJdV94OU5vLWJiZnY3b1JDTXM4SjRCLW15eHM4aW9JNFQwVEFsbjB6bU5iaDJIeWM1ZndwYnB0RWFGcXpGbXRySWJuNjdEb1RUenI0LVh4NDFTRlpXWjVpY2pIWU8yUDJERThrdl93NjBlWmJuZW8xR0RMOXNlT1pFaGd3WTNrejE5ZFhJaTRTWG0zeE8xWWFxclBhQnptN0pCU3Nxc0VJUkUyeGVGM3dscVNtalFNUjJlR1c4bDNEWDItdk1JM3hxR2hZVEs1QzZqalkyaFhhWEFWa2RXclFhUkZCRG9vS3lfQllkUzE2MURmdno4VVJJQmZzeWF1ZV81cDdkVWdWck91Y0lpVUtFeV93YlM0Y2xZZTZHcEtIRDQ4MWFVemtxamtYcU9XV2tPNndVRDg0UnFMVkFxU2N3MjFybnNUZDhuU1BGZXRBZFVzdy5nY2JBekpXX1pNSFVwTFlFLjM4bkFGMENDbW14WmZPZmxTc1FzY0M1SnRsTDAtVEU4SnpFakk0cXZVRHl5eEpRbGVsSF8ybWdDLXBMQ3NKX1ExSlFYOV9WdS0takNYWWVQdllfR25NTGxkWDRveVJ4eEdGa3BlcGtSZHJpWi1PWC1UUW5YMXpwaEppWE9KR3FHMGhfZlcwVDRYeU1ScXhzWlBiano4akF4TVFwRTUzSHR3SkE2OVVla0NRdjVVeU5kYi1zRENfc1ZBS3FUV1EwZkkzQ1ktbGdFYXM4Nm9aMVVtNk9VdkZlRmNWUDhsWl9LeExFRkpIYTc0WThhYTcxRVpVMlpkbzNXVE5UNU8xUFhQREllVmhjS1ZaTG1QWll6YmtfMVVxSWtaOGdzUVh6b3VMOGVnWDlxUWIzbkpmTUFITVdrWThXVFotREZnWjBlV1VWWWQzWWR4VUtycnN0OFFQdTFsU1dqWEpLUFBEU1djTVY0VHd3LW9iMWl0bExsb0pwX194bWZfUGNLSHRVZWNqb1dLX054VDBmLUJtdzVVVzBObm1MU3JOZHR0MDB4dHh3RWhQTlV2YzUwZ282TGg4eGxLMEhOVmlFVjNtZkNKMUVhdE50STctaHU0dUF5ajhENVk3MjBoSExPbVlnbXZIc2JHNzU5dnpqWDZ2MFBFQndOYm5GNmJxbEU0TDJaLTA0RnpoNVRQdVhQWTlzZnRldXotSHBIOTU1Wlg4WW9scW5XY2xLTFVRSC1zNFc0Umhjd3J5NWRZVmZ1MWVnRUdpRW53TmxaUlV0Nl90eVN2Tk5XZVVTcnE2TE84V1huclUxTzIzS1JnOUkzSkhmOEdCbEpwekk1SHV2TkxSNlJXUlIwV2ZwMmVWR3hEdHZ1dzFDVUhhNGJqa0xNenE5STFIMmNNblhMeTAwSS1rMnAtWFUzSmM1b1Qyc25KaXdwMkRIeWlyN1A4eVFTWGJIQXdMMmhGeDBYa2tsb1otUk1kc19JR0dRaVNJZkJRYnNqdFpxbzFFWjZQMThLS3lwUjlWYkR2dVhjV3JGMy14WjQya25RZnRSN2FqNERKZzFaT1pTOVZqc1M0dWhjLVdJSFRfcU0wZi1mQ1pnaDlGV0N1MFJZSUJXTVpXcmdnaVRjNExsTTNoNkQ1dXBGcGdyZFp3Y3l5b084amN5cU8zVzNBTFNFNWhRemNBdzdIQkNQUWxMMzBmRTdOUFBaUF85MEgybV9HQnJLZlUwMDJUOFRvQUdCNnUxaGNBZkVhZkpxY25EcjhQY2djUl9wY1YzV3NLQVlBRzNGQVAyZlVtc2UzWUxSSENwYktyVF9xdmpoZDBKaGhNbWx5ejJaUUlHV2NXSE5qOUloa1pyTGxObGstRnNYR2pEcEpyR18xd0E5RUZyNkhGTURuMG1fc0lqVk5Pc0xVMFFkSDlDbGVscDhyczZhOHZsM09xM3lPTlZMQi02UlJINmRtVkNQdDRnVEN2UzV1SndZc0pUMU10NEwzOXFGdFdhNTdTSmlZRUEtRV9EZzFJLU5jQ3BNX2xXdHBWNzlNX0l4SnRXLVBzTVVDQ1RtMk4tamFSU2hib0wtT3RwS3RlZVY0YnNUQS10R1dMdVFVUDFscndDdzlWSmlDbXZDdENSS0Q4RVhQTVhYUElLaVlaMEtSMXZMZkQ1M1ZOT09GVjV3WmN2bTl1ZHliWnA5bGYwWUVVSUNYSkd2Z29kUmU3ZC1ISERwRHFMNnZTVmZ4RktxdXpsb0ZtX2RkM2hXdE1SQklQMnNHWkpocUJBUTRDWWM5WkJ4M2FnSm81M2pXQ0FnSm9oX2pkUnBIV01LbmJSS2tjRVhJN0dSdW4wLVRPcG1BN3BFVnVRLkMyeTlaanpVdFVCd29nVDZoVVFoZlE.keUpynP8t-xBjabHyTfAHsFVWexALruM15Byh7EjTiLs-gnUWhp5onpG82lqdQhjFzHkFZJYxnORKwxBkEmkHwd7WpnXGAX32NatDeve6Kqg300gsFhRTyMWqLdBl-_n1fU6ir94X9hBDy40OixTZAIE7QF71t4g9qghX2xLt-XZ41xI2mOmNY-1eqTOERoccCgqZZ6oHPkfJDnDRC_eWOrq8lpacZZ6rEkCfyvNBeQQy9G4eBH0bWo3hF6BBcQXCp79R7oMP2RCzjdgN1wxFr7lNYgRPCU-7XqC-DFJn58sVYPzVmsXg6k7S0Dmbjy2Ftaee_LKct-QyQ4tMOOYmw&quot;,&#xd;
 &quot;deviceInfo&quot;: {&#xd;
  &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000028&quot;,&#xd;
  &quot;deviceLanguageCode&quot;: &quot;cat&quot;,&#xd;
  &quot;osType&quot;: &quot;&quot;,&#xd;
  &quot;osVersion&quot;: &quot;&quot;,&#xd;
  &quot;osBuildID&quot;: &quot;&quot;,&#xd;
  &quot;deviceType&quot;: &quot;POCKET&quot;,&#xd;
  &quot;deviceIDType&quot;: &quot;&quot;,&#xd;
  &quot;deviceManufacturer&quot;: &quot;&quot;,&#xd;
  &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
  &quot;deviceModel&quot;: &quot;&quot;,&#xd;
  &quot;deviceName&quot;: &quot;TC28&quot;,&#xd;
  &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
  &quot;deviceLocation&quot;: &quot;+41.98/+2.82&quot;,&#xd;
  &quot;deviceIPAddressV4&quot;: &quot;83A536F2&quot;,&#xd;
  &quot;locationSource&quot;: &quot;&quot;,&#xd;
  &quot;tokenProtectionMethod&quot;: &quot;SECURE_ELEMENT&quot; &#xd;
 }&#xd;
&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40011 CVV2 results code)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;token&quot;: &quot;4355053922806729&quot;,&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenExpirationDate&quot;: {&#xd;
      &quot;month&quot;: &quot;05&quot;,&#xd;
      &quot;year&quot;: &quot;2027&quot;&#xd;
    },&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;0&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832029&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;891BE3187FF7E64FAFC7B5872E774034F0A4E4CF4832368C6E0F25CCCD9BA3F0&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;891BE3187FF900000000000000000029&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;cvv2ResultsCode&quot;: &quot;Z&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;&quot;,&#xd;
  &quot;locale&quot;: &quot;en_US&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09UVXdOams1TWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLllxVzBmNm5nRlRuYktYYVdHcjRVeFlKbnJuZW1sdXJwRE14ekh4WU5fcHJMc0dPT3loaTE5eWc0YzdpaHJ5YlNSMy11MFFJYmZIX1ZPeFRQU1pQSDVXalNfMXZJOUJ3eldzYS1CVnBreVFPTUMzNkZPYjBFaDRoclRFeHJPYUZSYWtaX1N2UUc3aHd0UkhPQ3Q1MnlYQm9kRi1US0szamJXeExnWmxFX0JGM1k1enZTTHVTU3FsLW91OFctallkU1JZX2kySmhYWFh1VzVYejM4WkZaUnl5dE9uS0k1WlJxemkyRkVzNzhyeTJlRDVKMFQ2czZ2LU1OSEI5MXM3blE2RENEUkd4UmRWS0QwY1gwblQ2QUxjNG1JaW1Id1VxMTl3WGJYWC16RHVDSVhnaGo3MDZSSGF5UDV4OG55dmpqSmw1UFg4N0VtM29YcW5VYm82RGJFUS5HbFlsM0w3NWN3QVBuMWRhLmV1NXU4WjIzNkdVM3RiNDRvc3lOTnV0dVZ2YzF2bEVxUjF3allQb3dack5zbGVIRjdFamcwbU00ZTNJdzNEcnNrbl8tdk5WYlgwQ05pUFAtQm5jTW8xWnJSOWFOWGVBOFZyYjR0YW1mSzVWUndIWDlaMHo2bnpka2ttWUtJZDFLa1ZLb25ZVXYxSGtJYjlES0dVMWRkX2llREFyWi16V3BiVThTR0l2cjZiWnFuTWRaZ1JDbUNEckhJWXgzWlB2TXNPNVdwa2NHT2tiU0psOEN1bzdraDc5Q0w3WVBrUFNVdGRaRlh5c0JqbTE1N3haV2NaalVUZzFRZW1CYlRuMDVCMjc2a1NRWlBocUpUemxwdkhaM2dzR3pMT0FtUVZGWFFwcldHRTNvelVfYV9VTzFKZGhWSHhKUVBVNXdZb0RvTG5YMWJkVWxQbEdNOGhIUE1pQTRsa0RPS3JlcTUxTzBHZ2hUV0FaNmZUY2F5T2N2MVFIdDEzZ0ZVekxubHc0YUY2ZGhISG5UdFRvaXg1b3gxamRiMk9WSXdRSGk2R0pzZXpoVWpxSU83VzBGZnV3S1k0Y0xpN3hNVkVrX3ZIUTN4Mml5YnJJeDlUY09wZGJ2T1lSajRSRFo2c0dxVUVXVjR0cHg0Si1hWlNlSkx6WGxOeEkwUW5WMDZTTEdxQjBPdTYyMVY4VlRHd1NPc2xCQ2U0bmgtZzA3LU94RDkway1zc0ZFTEkyak5QM3Z5ZVBnZVdtY2x0LUItbTJGU3dOSVVHY1hkZnMxM2JRRE5uWDhydmV1SzZscUI5Uk13QThIVDZpaHFCWEhHUU9uLU9aclNqTTB0Q3cybHhCX2V5MXc3ckRMcmJ5RnZNNThlano0TWNCWFBwQjJOTnM0LWRkMUVTS3NmWVRwcks5VjZxcmYxQVpaSEVrTXVSeVlUazZHdU05Q1NfdTZlZjNSeEduT2plbFNYek9yeF8zOEZjUTZ1dmtEa1VwZUszei1fZUtkQmZFbUJMNUt6V0p6TGxJUnFJYW83d3pfdm9zZTVIQ2lhZmVtcldGNkxGSmxTVDBJeDJSWGdGZjFVZjlXTUdTbGJrSUViQnZiaW5xWTRyc05oVml1RFBmOFNuejlFTE5qT3gxeUZHR3FMYnlKa1hUR3pqTkhqdzR4eHhteUVPRjJYLTNIYVkxQVJuRjgwMGJCanFZWkdzdUw3TnhGakVhaS1sdDFUNGNoVG1oMnNhX0d5SzZ5ZlRZVk5BYXNIYjR6Vk5ON1RCUFNwUG1ydHl3Z2p1dGEzWWFBLXVHVTdVS0ZtWnFKX0xBUHlvZE02SUJnY094TDVyekRNNXFsN0dBRUdiOW9QVjNVUEZOU2x6YlotUUhObXdDSUhlNnBxYVFabjhJMmwtSTZkcU9MdFAtNjd2cjRDUU1QR0gzS3N3VUdmU0wxR3dUQ3d0NjJfbkJsbmhMWGFuaHdoeS1LakFqM0tmU1lhTXFXQzhQTlM3dUJMY09sWEFCRVpldTRRYlhMbzdyYnhWNEJaVGo4NGpFN1ZCRlQ0VlFWbko2VXlXSENZb21ZTlZibE1KelZHMTluVm9UVVV0bUIzUkxYWHdDRGs1M3BZc3VaTTgyUWtETzFHZElwTkdqVmw4NzJ0TGJxSlJfMU5SdmpOZjdZMUVEc0lsTE0zMld3dFVaSXR5d1NfQUFxSkVFV3Y0LWQxa1h5ZFdQU2FSbDdWNzVtX3U0NFNfWkVtTHVYYy1HQUhtMkRULTdjZU1XakJzcF84amlnSEpQZWlMU2FqLUVYVFZKbUlaOVNDcWxKU3RHTmxQdUxKWE52Znh3WGZCTjdBV1RZRHVueW5HUjVycU15aFVBLi1lRENUZE9hXzc3QnFzYkNxZ2FlQlE.hss_te7Ba-utenRUiJU8vxOlXpYGOVxYBNh2Z3EAg_Iz0qVdEloUMKqGsD7kkxuds8olxhv0b4F04m8vIdKg6NpBOfGxD-vVHpNbYLq88fM0fr3IVCoTKd_SfRgX-groIaXhPMhXg5kOjvTYDcXue-n9CWFLUHopENokSnnm0Wp4ORMz9S_5lQI2HdFURk4wBmAHdtJYVw_NsihjlyzB8H3chtm26a3Jkc2Mmykk9bcTV85Up03YyKuzJrM4rzKw3JSOqGHjE9Yl6G3I_uT0r8xtMrv5SwC2nkpaylgiXU2ec3-MoErS_bbRe7RdqRcM6tGSF1iDcHjLaetjrflBWA&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000029&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;cat&quot;,&#xd;
    &quot;osType&quot;: &quot;&quot;,&#xd;
    &quot;osVersion&quot;: &quot;&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;&quot;,&#xd;
    &quot;deviceName&quot;: &quot;TC29&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+41.98/+2.82&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;83A536F2&quot;,&#xd;
    &quot;locationSource&quot;: &quot;&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SECURE_ELEMENT&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40011 Token contains letters)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;token&quot;: &quot;ABCDEFG000000001&quot;,&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenExpirationDate&quot;: {&#xd;
      &quot;month&quot;: &quot;05&quot;,&#xd;
      &quot;year&quot;: &quot;2027&quot;&#xd;
    },&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;0&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;0&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832026&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;891BE3187FF7E64FAFC7B5872E774034F0A4E4CF4832368C6E0F25CCCD9BA3F0&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;891BE3187FF900000000000000000026&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;cvv2ResultsCode&quot;: &quot;M&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;&quot;,&#xd;
  &quot;locale&quot;: &quot;en_US&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09UVXdOamcyTkN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLkRXeDhXdjJLZ3FhMUcyNUphZGlIaTA3VUJXT19scjlzX040ZWJURm5OcnFvaGo3aUZCTEo3bWtOUFNYbmtEdEc1SXdRUC1OclQ4d0RyT3B4ZWNPemNTTGNFLXNMUi1zdGVlTUdaR0RLMFlYdmg4VnJYWGVCaXY5MTBBZ01iMDVNbEFiRlg3cHZVRHF3ZTBsTmFrSDVOOGxKZEpBaFZHYzBqYVFXSGZFcW9pdzRQT3ZSWGxZT2k1UlQ2aklxdjhSeGU5NFFlUFJlNl9DLWJSNVpsTGNUNHcyMnltUEU1cEYyMzRGTDJKbjlLSExwejdsX1pfOEdnaENYdjhBcVljWDdCN1NMdnlqWWZleEEzOFlKMmFZbHpRdkVjWERkU1hhQVM2UUJqMG5fWW1tUlJtUEF1ZTZ3N2V2REFyajIxMlVRYTRTZzRDNEZ4eFlTajlPM3h0RkhJQS5FQkNmaUNfZGYtOVZLSFZRLjhma19Wdjk1MGtIM1JQQW5Rbi1Cam13ektGdnZyUXJVYmZpUW9XT2M0MHFjRktZQXRILVhFR0ZZdkMyVUhmWDgxQkVKVGtTSG5YNlczM1dzSklyWjE5MGpudkFURVBfYzZQTnhnLWZ2QUNoR3ZlNEFvNHdWUXVqdnZoX29sQzN6MEEtbjBiMnZXclVVa3dSRW1WV3phSjh1YlJaRmlVblhtSGZMcXJMOUlic1pwbGFvTldJVU5LNFFwWnF1N25GeFY1UFQ2eWZoYkNESTM4X2JkZmdmaFM3RW1ua0xQMl9HSzRFdjlSRTZZR1d4YWNac0haa2RTRjdvN3BDR2l6aTd1NVhSS1h1YmJXSjc5dG1vblMtd0t3QnFIY0d6eE9oX1c0N1Q4SWk3TjNscFA1aWEtM2dJVWIwWXNObjQ4VklyX3ZtUElXRUViUTZCMDNtaHJid3RZd0N4VlNQdmI3dmpGS0ZLcFJjOXJtVW5naUswOXFnVGZHV1lGbWZ4WlR3em1TSnczNnZuOHJIM013TW8zVy1mUVRjT0dhRGpXMFFWOGJXVFBuMXpPQXJTenA1UTZsNGtiRk9YOTNCQjZaMTl5ZTdmUmw2cWFBcEdWZ0xnZnFldVNiblpvaWNCc0xyd2dSUkc1Q296OERrRUZsYXk4Uldoclo5UXpNb1MwZFF2U3V3WkRzZHZxbDE5T2d3Vko4dzBIeHpXakFvYVl4TGk3cklpY2tEeFgybkFEUXV2SlVsalBwVVpnbWdpVlQxd0NNSU1YaEdUcC1PT1M3aGNCamx6b3h6LUl0NUI3WGVkaXBzUzRsZ3l1dzd6MjdoNXdTN01RbGNLclU3UXZwQ0hMYWZ1cnBxcXBaN2N3c0hobFF0Z0p5S0tsczFjWlNhUEttZ19SMWgyWllvb0NYei1GSkF4ajFEcGRoU3BCQUMyODk5OGZfb1JEamxKRmJJTk9aaGdyT0xmb1FERVA5S0lOWndVNi1OcDRTcF9KRjNrcDhOTk9Qc2pxcU5kWFhFQjFQQmJzNXE4c1dnbDBGSC0tVUVaZHJxSWUySUVveXktVFB0aEFnY0NBM0xLLTZiVS13eU9pWnRHRjZ6R3JZdUJUMUlqYzRhbEdXc2RwaE4yWU1YS0VqZGVLXzRKd0UtYzlCX3FtSExpV2NRakl1LXM1OWFrcGNnQTVDZkJsS2xhaU5ra0NzY0xKNW80b1BXV0prYWt4UmtNYmRLTFRjMk9abTdqQ3RiM0dfMTl3YTk1NThMSEowUmRSajVwdEJocHZBVURyaWJpTDR2MWRVbkZPZnI5MnlvQ1dBZHVuU3h5NDRTem1xVm94QlhLbnZ5QS01U1M5MnVLa3cxaUZKelhkZmZwVkxqY19KMmtQeHpWV3YyeVFFd0JWeE53Uko5TnZUTmY2VXhpRjl3VWVNMnZ1dkQ5RDlORjBaWUVySWd2dV90V1hjakVEYjAzREIwNGUwZjZRLVZMWHl5d3RpRk1HcE05aGxld2lnc3pDeXdNWUdlTEVKb0hNaTF4LVZpXzFIUmtWblRKWV9KQ2FCZ2U1d2UtcDZyTzZtY1pCeEZNMG9oSVMxbEdZOUJSTW9XNVZuNkVvYVlOV25id3pCdUdIWVgzc091R19ZSzFvSVNPbkRPMmhKLVBydzBjaTB1dll0a0d4aV94d1k4QWRkZ0pkUHB4NGcycnZXdEdlc29adW9KUTJvWTVrUlR3dUprbWNrWURhZUZNWkRucEZ0TTYzUlplb2pqaXFGZEJ1WTExa3hWSERqWjd3UUhWZUJ1TkpLR2hFOUxmVnFPTVNlanNKdVB5ZGNYeXl0UWlnanBhbnNnZUdtMWRYaFNGV3k0Lk00MWxYQnZjcHlaSHFZMHNoaUh1REE.wHHZqu4w_P8cVrwRhIm9KtR44ng2Kp2VJA8QR-_JTwxYJMIqrQCCCPMr3-eKc6YUOK3zf1yH-ywieTknWoHtXgfbJs0zilYsAL-aFZdZKl_wdpydBM7P8I-kK8iNuVTHG8XA0sC7Xxak2LLAp9_XW5aKtB3KduxidxwaMuhglr9ol68Jd7ySNfRSeCK2enEU5un-lNKehvUr59wFPJXW7BQz6UNEH6AbKUGWqbL7J_kIU1avwstErnfqwfNtGiD-CZ5pC8119pTkznA8jinBFNNToIMb9c9_MXAZ4Gxj_YXKlb1KlRxeZZnwaOXJGjD57bi8hFgZVb359vecugIVnA&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000026&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;cat&quot;,&#xd;
    &quot;osType&quot;: &quot;&quot;,&#xd;
    &quot;osVersion&quot;: &quot;&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;&quot;,&#xd;
    &quot;deviceName&quot;: &quot;TC26&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+41.98/+2.82&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;83A536F2&quot;,&#xd;
    &quot;locationSource&quot;: &quot;&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SECURE_ELEMENT&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Missing required field - ISE40011 tokenInfo)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149300000000011&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;3D53EEB00F3E95E5C9C7C55875FC1723E9C8D8C9980C02F84A88065B96B1BFAA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;3D53EEB00F3400000000000000000011&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;ABCDEF010101000000000000000000000000000000000011&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;spa&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceName&quot;: &quot;TC11&quot;,&#xd;
    &quot;osType&quot;: &quot;IOS&quot;,&#xd;
    &quot;osVersion&quot;: &quot;7.0&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Apple&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Apple&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;iPhoneY&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+51.51/-0.14&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;127.0.0.1&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;773febb55da5453aa25a40b56fd4e07e&quot;,&#xd;
    &quot;date&quot;: &quot;2019-04-05T13:59:13.666+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-05T14:08:13.000Z&quot;,&#xd;
  &quot;actionCode&quot;: &quot;85&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNNelUzTVN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LmFkNVRwR0k1WkhOUGRhcjZ6NVRfSUVsdmhObzN0ZXkza05vOWFlQVltYTI2MTFUZ3NRRTVWWm1kcVdZVFE3OUM0bDJPQ1BOX2w1bVAxUzFnQkt2RDFILWl3OWdiWkJLMEdhbWdHYURWTlNIdDBWXzhHRmhxUWpnc1lDTVVHeFJsYURZX3ZqU1VneGU0aGJXMlpUTFlRTzFnc19jdUVCOV9hNU1lbENLWHh5RW1FV0JIREYzZFFsb3VYd2pheHpLY2NSZ093dFBzY0NobEFCZVpISjdkOGdsazJYa29VRnE5djhEM2ZfSm93U0hoX0pqcHp2bDFrSkFzN0Yxb3FwcDcwcnRLbV9tZk9xelE4c3lQSUQ4RjFCQWxKX2Y1dk9pSTdMZlg3WHJpWGkzbUdHalZ0emZocUlvR2FvU0RBMXd1d2dWMTRrU2ZuTDZvcjNybGlGSmx0QS43cUFpTkpJZ0JmdEhzay04LkFST2FqVUFMODllVUJXTkpMeU5SY3ViSTRveGFMREVWV3dUQzVyMmxjZDRJRmNZTjdEVVJ3R2ZfZmlRV0pxTG9aR2hqdENXaG9aTFlTdmV5SDlPM0pmQXJ1N0JJQ0FGUURJaU4xdllnSEJxRHNteVRUR1ZSOF9TOW5lWlpNQnppV3NRQkRZOFBETFpBU0d1c0t6eEtZUkMwcEdBNkhKTlVtMzNkN05mSEc4RXhwT1ZSeWg4TWxSREhiTjdiQ01kbHk5Y0RXX2YwbVI2VjIxTlh3UnkyeklLS082ZndIWUU4S1FXdk1vLUh0amdzc1QxRXlheWtyY3k2amh2TmNTbGZ4UlVyTlB1aW9tREdoWWp1RDJOR19aTEM4T2c2ejlaSENpLVBtMElyaW1ZSVY5MnllcmJDRzRGc1lxek1zcG1oeWlIbkJDODlVMVEwdDdNNV8xa2lURVhtZjF0Qnl4LUhBTmdOYUk5ejNnOXlOcmRjSlRRZTB4dXRDb2kyODc3aFBKUUhWempzUTZCYlFxQXl0eXI3bUFEeldqUGVDNzUtTGNTemc1UTcxSkpHZkZPZkFUWlVtX3ZSNmlEeGJ5dElfU3UyYnhkcmJCQ0ZWck9OUXNtUHhyMWdnQlA0enJLUTJLOWdDVUF4VURrSUxtOHk3SlFQR3ZraUxWMlVlbzVYTDByNklvZGluZWotdU5sdkZRUVYxRWVRU20xVUNxeFhHdHVCejBNb2FQeGdkUVF0Wm5felc2eHF2WkNDLWpJRlhSblRrb3ZWd0o4NC1jUjVlU2ZJRXJRUXVLUktSb2JjMFc3Y2RpM2lpS282SWRZWER2SUtVM3VzZ3NuYWZfM05ueGFmcXlSWkxoVjZheXRDUjcxU21LSm5McHRTVUYwM0JOV2gyTy1uRVo0X2Jfanl0UTdmeUF5STFqVTd5M0xZdldJVlplMU1HT3VyQnFrVVJBN3h2QTRxNTlvSmNaN1p3NWRWMzJNMDBBLVRWc0tnWHRtdUxETm1yUFRWZjU1RTFHV09TRm9sRE9UU1U3UzJ3VjByeUprcjlYcHhhZ05scGdncFY4WGFsNXRiQlcxdzRDQThlSE1mWVZha0ZDdW45TUtpYnlKUFN6U1pGUTJRUDBvZ3NhXzNZUXhrZ3RwV19TcmFYemNuWmJnMThZMkZhMkRHMFByYWtHVVBmWlpBMVlwbUNMdEJnRFZnVjZENEpYdVJoU0xJaHJUWEFRb0swYzJGcWtoR19Kd2xCQTlKVlpDRHZGUlNZT0xIcDJxTkJ1ZmhXenIzZ3o2cGNJU295ZmNKa1hQT1g3bHgwQTN1ZEpvYnUtQUZ5VlF5b3Q1eGF1MUFLam5wdm9abHVPbmNGZlE5Y3o5UTl3V0gwaWh3Ung5Z1VMX3N4LUZJTEJ0a1pMcHJjQkhLTDhSblNMTDhBRGhQOEdRY3pUZmtEaFJEb3liM29UbFVjaFFFQVFWVWZ5WHdST3d2REg0SVNHbWRkQXRETXVtSVlRTEUyR1QxZThiWUt3MjFvN0RkbkZYNElYR2Zqclg0QkhNYlR1Q0dpVzgtSThOaWhGZnotVTJMOUhOTnlBWjRJdzNFY3lIbTRGbEJOM0tENEFOQ0MzVHJpY3MySndZLXd2TVdRMDc5blpxa09iRVE0enJ6aEQwWC05MmpIOXl6QWJUMXlWWkVQU2R0M3k4bmxXZHJiYnpPWWxLel9relhjTmFtQVJKWjN3cE9TQnpHZFcteU5fUVNITWM4VkxPWVpfZi1MMXIyWkV5R3BqZUI5dFAyMVM2UkZydUh6c0RPZFNjM3VVOFBmcTJpeElBRUJrMHk4ZjRRYlBvc3dnSlpMZlV6d01Vb1hvQVVsRDQuQXF5dFFNd3hwcE9QR3FBRzZOUFNGdw.S_A21deGXmddfDwUO4T2cFYQwy3_SSPXJAuaSZRvVY1lh39c_a01y_-bUh1c3NybXb9gVD3aH3uxg8uHHL9d7lVqOy8hqAetqzLM0onirPb4EDBnoRM1i0h-FajAzzww6q_SD2pqRmVfWVpoNdAnD8KSHh-NGygfOeBEEblb6zIiiq9M1W30po17dF0x937Lyfah0ETU3edzkvxficO4cs8Hswn3pSy3J88LYZ6ecRqikeMw-j5BwxzhmkKNQfmyekN-5P1XzPMu3C6vmGV66rH221uZAG93x-yfhwj7ZOYvBCq6KGiCzdnu_Zv2h6IevEVInmMvUw_RkAmtofm0sg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Invalid Expiration Date - ISE40013 &quot;actionCode&quot;:&quot;54&quot; Invalid PAN EXPDATE (RC54))" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNE1EY3lPRFkwTlN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LmR0LW9BOV9rT1hHd1Y1YzkwVlhybXBReW0xT1U4Vkp3WmJTVXJLR29aWVk1aDB5Z05XemlxRGE5WEtqYk9tTnF1dFFObU0xaXZ0X3NSaEE2aWZQZlJiaExBQms4blRUcTVXUmlXa3IxSERNLUF2dnp2REs4S09oZUN5QzFPYVh6NjU5SHY2cmFsbUJlc2c2SldUUTVvRlpmbW1kcHV3eEQzM01jT0x2emJFT1RzdVFiekJqOEFUdW1TTmpnWUFTQlkzZzZobkFEUGMwaGgwWGh2MUJNYzdXc0Y0U3dyWmJ3VUpJajNCZnBjNUw4elNkdkp4ZjBna0lOUXIwU2IwbEJpWXl2OV9qTVl2aE9IeklBdFJUTDc0dmdLdHVHMzNVUjRJaHpiTzRYd3pLN0twODQzdU9YNmZaWnIwMjEyYTljTV9tVnFCLWRFazNfZ1g0QkY3aVFRQS5ndHl6dTdPdC1DNzl6NXIzLmhQSF84dUlYem45aUtlRkFWaG1kcVFyTFdnZkFsWUJBV2Z3WUFMamdjQXd1Y2tyMFIwWkZxVzA0dUZHZ2loUkZ5MndOczN3QTBOVjllTURmeDBIUndya1hRVlo4cDFrT2tmLWY2WnJETGxpejRicGxjYmtvM3F0Ym1zaEJtd3ktTmNzb0tlZmJxYy1JWUZnXy1UMjNQbDBWdS12d0ZUMEpDVW15UWpGVXFZZ3Z4S0o1MThXMl9vWG5jdUJSWWdLZG0tS0xNZFVfQWVSTnNyd1JNMENPWnduSlJSZ01adlpTUU5FT2J5bmY1blVjdEl5Q09oWXRFZWN5X2o0Z195UFFQM3laWm1kUFhFRks4QnFrUGhjWEFMb0tSV01kRGVKVXp5WmxWOFA2RVpNYWtkRjgwLTJLbWNxbmU3eEprVTFVeHk1WkhyeXBuamQyQ19Nc2JlU3JESHd3aDd4TmZoMl9sX0tBMFlEWlRXckUxQ0p0Wi1xelA1c2QyUG1nVDJLcDlocFJ0ZE9YZHlZaTNwWjFJY0h4S3ZBVUpyS21oZ0pGV2N6NmpBS1JlNG9fcDVkVGlfcXQ1ZVpRc1JaTjBGaG9YRlh6MmRDWjBEc0hlTGRUUkRtZmpkZXI2UEFEcnBRZ2xwY2hxU3RONFRnTFhpUUVsOU8weUZwMk1tb1gwU0lqTkd2cFQtVTF0Qm1MOUV2OFQ3RmdWNXF3eHBfX211RzRqbUhENlFSdmxZYjdCTTdGS21pWU1qaWZwNTZtQ21yZFBrcER3ZHJRM0IzY2I3MUJYVU9Ha0dXQlRsZGdDTzJIMmg4bW1SNWZsNC1CeENlYkhWLTlQZmJseGc3MFhtaEJpSGk0MUpuaEliOVFQdjVnN2JYNmVlcTRIUWFNMzVyd2lCZU9VblI4SWtkUWRkdkU3VHRRLVJLTWdIem9qT2I1c1YtdTBqRE5BdEZHVk95QnN4YUMwQVo1dmU1enBZeTNBM19jWlQ5WWozWl9oalZPTVdWZXdtMjdkdlc4WlJwUERmeldKd01EWGxGYktjcHlPX0NUNG1QSHMxQ3FwdUtqRXhQNFhQd1NISjlRVHBNTDB2cUkxY1RxZ0tTaThrelhlSEZUWHBNak91eEJ0bkIzRE5yZDRNd0NQc2h2T05ISnJqZEtfRDUxYXp3NnFtTVlMak5lMVhyRERETWpzaDV3aEhLQm1OSXl4a3hoR0FyTDNiZGg2Z0xOT2E4b1VNdldRQV9yT3ZsOFhhbVFPZ3ZjWWpmSzF0VVc0RWJLSE1CQ3BxWnRaWUsyRkdPWUswMUQ1b2RPWEtrRTAyWlNCbUN6dk12NW9JaFZ0amhCQnRreGFpeXNVRVQtblZiQllpYTU2MThsN0JlMTFJLVFhZ1h3T2RGQTMzTTdXLTZsM1FwSGwyT3ZCQWpCbFZSbXNZWHVYb1A4NFFvNmpSbzJNcXBVbFRSeUpnTzJzOTBRbmNXRVlDcGxaX01vNHZNemtkVkVZdHRoenhkZlI3MU90Y042em1BSEFmTnlYSFlaRkV2TEVsOGlwMVZMREdiUWlTcFJIakxWbGw4TzZQdU16ZEpnN1hKZ3hSQnVyZ0VScGJBd2N2dVlRWFRSOWdCWUJTTENjLTd5OHlvQ2Vzd3Nhd2NLMGpWWHJDUFc5LUJmRnI1Mkk3djBwdnQxd0JhdHNfSXRsZ05mSW9nWkloNmIzN3EyeVFCV1dLZXo4eWZLODE0V0g3NmlleHY0b1lEVTdYVXpVUjlpVHpqcnloS3pUNGdrNFN0SHZxdC0wMHotLXhGSTAxUHlQalVtS2xVV1Nxb2ZfZ1JQcEFWSkpoSGNnczRCMUZmRk5zVDJEVk9fWnhxbGtqRzRzeXJDUG80YW5Ua3VkUlM4TzdSQlpVVFBMM2d1a2Vodll1MHpJS0RvLmE2YmFMY0IyS2pSbE5JMVNmUEJSNUE.L7iS-1fKMA4v4ZWGNCGAK9oh1niZqfk5kvSeODJWD8BFTt3wCW1eT-RJD51GzsPM4AhP39GPdI4xVC2YDjqTt4HjarvNOWJos5uu2swej-KhmptlTZEOi4IOamNdDl-SM-cFBRl_uzaN33GUAHizvzByP4kZT8lnB_gHk199hevP9zFFRTkytwVDWbyHG1QJA4Q7_17YLX4AbvehZ0zojirBCS6TxK98eMulaHRFKlTAqTgHw2LgPGrbdV50nRohG72HdceoBURp7VGFQjwmMTZ_EnAIec58e-0b5xEovnEl2SC4YqnmahRMxXMtQtBnDv7BePbUK-XOyCv0rJdEMw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (Invalid Expiration Date - ISE40013 &quot;actionCode&quot;:&quot;54&quot; ISS_ERROR_INVALID_EXP_DATE (code=4))" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmxub3duISEhIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM01EQXlOakkyTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LlpiNnJfZS1ncWpGNFo3cEhjc0JsQ0lVdi1yMlh5Qzk2Szl0NFRfWER2VW5aMXVMT0F2ckd0cTBNVFpPTTAzczRfaGNFRGNHRDZyVEdLQXBkNEdPSmt6bDZVNWplVFotNFNQZURmWGpQZ3N2SENlWl9iQ1k1OEZwdVlKMVJaYmZiQjhxd3I1eGJvSHhJZDBjVVV4M29teFJYSE1RRFFScjM0MFZUaFpJSU80anJBa2ljV25sMk1sZzIwSG91TTZxVFBwb0JzTllKb0RaZkp6R1YyNTloWEVFa0dnOXNoZTdWMngwbHBjSGhYUVRwcWZpX0pYZjdTQ1BtbDZYLVlIN2h1enRxNmZxLWVlS1hRYmFGZjhOYkFQVWRmY1lSTEZyYXp1NnRQa2t5NTV0QndVNzlEbGFaRVJFUlcyWnZPSm01d1A5NGMzTUFEcF9uUU45ZU40Q1hDdy5kMmxwV3BfYVc1QXdlSVpQLjQwX3ZyQTFWQ0xnSW9qM2hNNnRldDhxazVQbVlZT2JjQ3Rfb3h2X1g4QzJQRFdJU1hDb3E4RktwZWhjaFI3d09lR0tPcGpzNmZIWDVrbndsbHJJYXBQVDFEZmg1SmEydy1zV2doWnlZSFhULVhkUFVmeXF1NTd1anBvaFR1cVlNWHktaTNFWWlqb09PdTdtUFFhbUtRUUp4a09NWmRkZm5raVN3NVY5bjhvQU5pbjhMc2VXZEZjZTg1RmVCV0dGRnB3MXNZby1PeVUtSnJmRkl6SEUtSEgtZExEbUxRTUtacHJYcEc2Y3g3WlpNbkIzMWx3SVJCeTJTZ2JPUHFISnhnNmg3S2NNOW5XMTc4TVJrajRRX2ZXVmdnbDVrUnZ0NDg5RVFoV2MtcElBeURoNWNMdzB0cGYxR3RJMzBGcWpDMGszLTZURXlPdXNKN2JaQ01TYW9ndVVSaENySWs4ZW5LdmpNWTZia0RaVkZCbjNpN2N4LXp5SmlabVN4Q2g0Nk5JdHowQ1dmcklSMlRIZGlxQU5TLVIzYXdobVpFeFRJa3BxVkZyeGk1VXBWcG1ZRkxYUHNMRGRpOW1HY0U2YzFCN1lXUmd3cDNKbjBIcjJBMUNYa2d4ckNjQ3NxLVUzLWhYQjRIekpWOHJ4U0pMZjhKTGpmZDRFMUF2RmVSWmJTZzRPQy1pbW9mY044Sk1Ob0FZWDFrTi1qQlZQYUpqNVVuemxnUkJWaGpRdk13M3YzQzZjRU5Rd0ItdnFlX0lSeEhDSU52MTVlSjhYX3I0c2sxeXVnWnlHR1VQMGtLT0VwWUFmdFRkcDdwMGVVU0hCODU3MHhxdFpyMGFmeDB6YWlTcFh4aWNEb3VJemN2cFpKWFhaYzRxVGNzTWszMGVFYjBMV0ZmQWtLcllpTUtkd2VhQnhtR2hBVFlJd21yZ3IybWxmS0tHcWV3eE14d3N6RDZ5MXpQM1g5ekRydkp1UDJZMjl3a0dTWG9vaG8tLUNsaXFXZmtrZjdieGlvN2x0UkNZczhUUm1lRjY3MWYwTmpNTzhLbUs5XzU1UU9IUHd4bnZSeXhqWFVYZFlVTFl6ZkVUdmRULXpkeDlzTkNLNTkyX2tRck9aSE9malBiZ01ld2tIT2ZDWHprNDAzbFBscU5JUm92aXdXbERDT0hQNTA1U3psV19NZVExOGxfemNrRWV1alJIVDA3YzlYRTdiVW5vUWhhZExpdGU4ODljZ3pBamZsbTZGbnRGNHoyWDViaW1TZTRYTWtXX0kyVmdHRmpyRVF4X1BYX01OWDhQTDNqcHZzMTNsdFU3RTVZYlpEZ25NdDczZWRVZGVHSTBfNmZRRmJHc2hhY0JVNWZDRElLWFlBR3lwMVdyTHFHZjFHZllpMWNhV211YXFVNG0tZWFqa3lzc3VsT0VkS2pVYzktQTEySF9EdWxaZ1I1Z1dRNUdwX1g3S2tVYlJLX2VXckU1ZVplSEljaWJSUktWMkc2VExKQUY3ekQ2M2xyUlI0QjRhaEI4VlRxUlFKWGs3dDB3OHRSWXdEbGExaFp3UHl0WFFmN2FhMl9WRjh2QXhKOTJqN1ltaFZYZm5sZm5ycjRJVFZ5R0JPSkpuTC0tMGE3VENZdk4yRVh1dWtNUlpKX3o1Y3Z3dGxzOG13blVkUm5oNFhnam1EYktCTzFnUGxBdzBHQ2pnNjQ4elI2V0NtZkQ0VFNNdlF2Mld1dENwSWozSlA4OGdtSHJ6M254QjY2ekxTQVhodGpHdXJ2OXFNZ1NOSWVnU2JBNjUwRVZoSFVaUmVBY1dSRmJZaXFycXRMdmdWUGJDX3NRZHE0OEZUU3hKSzBxS1lyMjJsLXM4eUxsTGhReUNiYjJZVXhfaC0wbWxqQ1Y2OU5HOVlZMk5ITDQ3Y0l2Xzc1b3lXLllIa0Z6QVNZQkNMaUlTTlFNNjZMU0E.VVD3ySH6B9YNIwU3r30-RQVAVBObzP93Ws8tufAf_zb-VPS_65oIpL6EsXdwrAE_g4Mf3JHPwqnC33L4HB7CrviTxOrfMiAAYLic0L_V64gN7SbCgvm7iuxcduLBk64hWpL5NHgl6kAu84_dP64yAyxVT_ONUctVlct_YI2AdCh-uLZ1mmOYaTgfLSnsSecp5z1pjNA-17Pp-CcfX4LvymjmQHrOO36Bse3LawDPvRjC1g-4dbqdwSgBJ0z3fCeQD5sW25uNDl0WRUQpaClprRL7UVO1-zUkGPOwAUcweTywS0sgHjlIWBY2CwgvG85hmCjQ0Ch6MabB_eRsp0vy9g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (decision=DECLINED - &quot;actionCode&quot;:&quot;05&quot;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;tokenInfo&quot;: {&#xd;
        &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
        &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
        &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
        &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
        &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot; &#xd;
    },&#xd;
    &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
    &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
    &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
    &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;deviceInfo&quot;: {&#xd;
        &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
        &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
        &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
        &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
        &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
        &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
        &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
        &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
        &quot;osType&quot;: &quot;Android&quot;,&#xd;
        &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
        &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
        &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
        &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
        &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
        &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
        &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot; &#xd;
    },&#xd;
   &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNNelF3TkN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LlYzZThfbVRhS3ZnVVZIRkJjSXdma2cwb2k0RjFNREc3bFg4RjRjaHNneVRtN3JfSG40aERsaGlmY2hpZk9Sd2gwcXRRaTd2bFBGY2N0LVdrdFMydktCakF6djl2TGhEZzB3dFV6YjkxV1VFYzc1WGp0ZXZpd2hIQ3hQeG5GN2ZSUUZBc1ZiQW55WUxfR0IzbXI5NzlrN3NRbm9LR2MwakdTbjZVcmw1NEY0NmV1b0tBa0Fnek5FenU2VDFvLWZpdzl6WTI5M2pRaFp3Tk9ZVXBlRXVPTFh6R2RybXpQejluMEd4SWI5aGZNSEdRcHZtVXlxNWc2WUlRaEtaVnJjM21ZeDRVYkZhNEJucUF0aE41b0tEdERGaDJhUDJrbVJNc09hY05BQ213czlWYklhOFFoM2tuRGhhMTMtbzNLcXVCMklDY2x3Mi1OVmdSdnQ3NklBamw1US5TcUVKRzVpLTQ1enNSZFJVLk1lZ3gzWTktdFVsTERLdUNQUXlzYUdfVVlLYnViWUY0NUtmdmE2S1Q2NkgzRVI4UHB5YUMxN204T3hCU01zNmNEMFpIOFJsRjZmLVZ0M2hmajNVTE9OTVFDbmtzb0I4M1J0STF5eWE2M25YTkhhRFJrS3NOTGpSVXBmcEVrNm9Bb3FYZHdzVnJoTzg3LVJtQlpnVTJQRjFkMGhwR0tGX1NXTVdXUGVRTXp3eU1mTmVmOF9kb1BZYklxaXhRcnMxS0pPVVNkVDlMLURyNHlvRzJjX1ZMMWpybEFDdVJENTZ4TllsXzFYdmxJV0MweDhiRnJXWTl5eGFsSTU1c2pFWkR1QlJzeHlrQV9ROGtPWnc3OXJUYmEyeERrR3p1RWI4YXdlVVItX1NueDB1LUpSR3FWNTRaX0hTWXBmRHdoYU9lNVQ2VFlNYlgwU05DbFh6cEhFcldrT01keWdFRGlYQnV2aWhBN2U1d043SnRQVnNVV1ZGVXNGeFZGWVdQTFpFNFZQSmxsaG9zMDFTUUFEamU4WGJGZjBmTHZRNUp0NjFWNkM4TnU0bmx6YUpNNTlxdW5aX3FjUF92ejNKZGJrVEF6cGJsbVF6bmFNbmJjRGNwbGtRQmFqQnJWY3d2SnRYUVNtWEQ3WVZrZEU0YlpHUmlIck5FTkZOalk0akwwOXNWSmJjdV84MlREclFFUjBpMXFkcVlDNjBuQ1VlZG93ajR0TVR4ZGpWUnhDckhzUU9yNzdyYXMyOWJvSWtGdGpHb0ZtTk5TeXlZa3NndHFrQlNRYTB6dmlhRWhJWGwxTjBHTnNQRGw4RFRLSEE1UmJ2NVZXcnRaU0lqdzFCNVRySWdHTU15WFFFX1loQzdPY0dhbUhvSHVPVjAwRzdNa1NNeVN3QzhHTDc1YVlaczFnTEVFZVg0ZnpyOS02aTg4SWtSc2l6MFlZem9rUG1IY3VBeXdyTl9GYW5fTDdhN3dnRzU0WkV5M3RtRk9lSi1GV05jbG5uenVsMnN5WGVSWjQxcUZBRVRXTU8tNXhZWGxMdEtrbUJrRHBQdkEwLTJ3bmhxcDhZT2pLVkdMQnRBck1ianA3aGJYZlFzbHRwUjlyNm9lbXJBaDFRMDB5dThidjgzWFlpVlk0b0ZQVEZHUTllbVRDT1RKRjJWNFZqaVllMmc3ZWZxY1Fjb0ZJUU5WUW1ZYVI0TU1rSGUybHZHUW9fN3R2VEJOZTdRcnZXaWdaU1FaV3VRWWZVbmdDN0FyT3Y3ZXBYcDh1cmFRWUZjcWx5TVNxLVpiWU91blRoWlYwdE1RNXhrRlpaZEJjRjJTNXQwVWhMVkt4Z1kyVjQ5N1JzODk5MmpuNUlKOUdjVE9zZzJnc2FLWTBpMU9oU0ZWTlRYc2lEbUlQR09aVmVIZGRfcGNVWHBiTmtTOTQ0dDdLTUhWaVZZQ3Fpa1A0NHhIN0tyeXRMRTZNZjlEWmJJTzd1eV9LbW1abndmcW9nczlZUFBwUmJhQ21FOHRHRDFPbjRDY25ZMEJDS2NxVEt4ZnExWXVqYjFscTdSa2UyYlVtZHhWOWJPaXdieVZWVzVyR1BnUmpGSkppWTlQRTVqWlhMUlNzdHJLYVowNmhQRmlNTDBIUkhNX01hVklJV0tjYkp4V3R2bmozV2JybmxrcF8xZlM4MllRSENiUHUwazZ0QklZR3FMTDY0dUZJemx3WXRLRGhzTkc3eWlTemg2ZjhIZ2F0a1c5V0xTM1RsbEJCZll5Ykw2WjJQVWV5VWhuSGhvM0loTHF1eGJ5RVMycUEuekhRTGsyVk96QU5paXVZOVhRaGotZw.vWECiHW1RexPeIlr2NV-5nXXQAoYmA8X-A7QIBGcmkPpG-mp_t4T3KhTVieTSQWIJd-IgOs8ca-ooHmeeGgcW_vllQqMoDnV22MVdb0ZGI7iyzM2EwVyzG6R7_6eQAau3mvm4QXF2eOmXP83QjG6TFLGuOVhFrxcN9W-IyiUYAmaaKnr32yfFmCQpRGIYXzrsoAGUcgre8fJfNAww3DqnefyfjXmAepLGLiJOCrmZUJ6hIvZ9AiKsz7cOJgmLJpxgvYpDsrkyt4ECPfFyqYuwwDHpdJvFl6aehnkPCBvdzTZE3kF8afZBXXKsPtQ-xE-g4OcfigllVPb2giKq_3-5g&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioning (walletProviderDeviceScore = 1)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;tokenInfo&quot;: {&#xd;
        &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
        &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
        &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
        &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
        &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot; &#xd;
    },&#xd;
    &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
    &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
    &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
    &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
    &quot;deviceInfo&quot;: {&#xd;
        &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
        &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
        &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
        &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
        &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
        &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
        &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
        &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
        &quot;osType&quot;: &quot;Android&quot;,&#xd;
        &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
        &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
        &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
        &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
        &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
        &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
        &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot; &#xd;
    },&#xd;
    &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNE16TXpORGMxT0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5LkdVV0FXZlpDaXJaR1JtNUdXMkEwRmJPRWg4LS0zRWFNV01DdV93bW9Hc3BxMkN1U0dqODV3V2FOOGlZdkgtUnNrbmdBempmcGxIY0hlaTM4SUJ1a1RRdFNkYmRla0lzRHBpQlhFVjk5eHYyZm5iby1BY21rbXRTTFdoLWtiZE5xbDdIZmg5eUxkdFltdTFKRTMybjZZamlHY1BjdHVJczJ0N0I3VTBKVHpfY1ZfUGxnLW1RNG42Q1FjakdEX1hCZS1rbWhTVGpIdlV2T2JRNkJQNHNQTXgxVjNhNk9CUmdfNzFqczM1cnU0UHJQZlp1a3RWelZrYkJ6a3BJakhjUkVsaGMyWFpIRnlFa2E3SHBhblNUb29BcjFsX0ZnR190b1hCb0lKdlV1aFU4U08yX2dJZjRsUXVVM1NrSGZaTDdtNFFaNUxlOTNEam5VN20wZXEtdEwxdy5DWHBJVGZ2OVZXYktYRGQ0LjkzbTZwM1VjVUJOakFLSUhreHd4T0tsS0ZKMkxpZThGazBtQ1BvWmFmaVlfYmFhUy1xVWhrWDlxUUVMYmtaUGh5QVRVcjBQeE01NkNBNHhlSDI0S3ZZOTZHbHV4eG51OHJpX1hWcmkwaDNRQ0NXS19rUlVRNm03d295WGd6MHZ0bXk1MmRJNzRKYjFkdzE1bjQyOWtuT3VGeEM4dm01aWFfY3dOR2JXdnl4Z242ZzdYTUVDZmlyaHpIWUtEaGFaUUVCQU05bHJyWTFJdkZkRGIxT0RocV9KZVRWOTU2dGlZY2RuSElwc2oxSVRWZkpWS01QcGVnT0pOM003R1FBWGlaMzNNX1plcWEwZWFlQ1lYWUxWTml6REIwS2FBUXZDTi1BNVFjTUFpWXczTXdOemRHQ1VuTlhSZWp6VFVVMVdYSnhmYW9iTkhORmNzSlFmbjR5MER2RWU2VFFWR0Y1VGQ3Y1pCTVlUVDgzYWRPUUQ3NGoyTDJEdkFLcllMYVduYzFiQ2FxZVZVck5qZ0lXTzJVQW5Mekl5VktWYl90UzJtandnSUluNmsxSFNHV293Z1FBOGZ3alhTcEptNTMxd0dwY3ZFc0FMMW9IeDZwM2NmTlhFSFU0SHkzcm53UUh3U1ZCaGlKVUJ1SmFRZDVHWDFfTmp1MUNpcFJmRDBzMTNhU0tWeTJHYzliYU55bE02Yl9nSVJlZ3dLYXdXTzNoSWNmOWp5LXlSNVJudDRSLVl0ZmFsQ1QwampuOUtyRXpkTnMwVWRkcDMxcVllbVlkbm1jMFNONzlMbHlTLTNwN2QtSFVYcG5ubk1UdUlVNEI0VmVod216ekJjWGNwNnZ5T2k0MUUxbDY2WmxIUmNSVWJILUxFbkdvbGs4TDVUcG9PTGhlSzVVZy1HNm5HeDFpR0pnWEY1bVlWVWtfV3JnaVJuQWw2c0dwa012M0JNMjRkNlJrMWtkV0U1dXY4T1pxSmMyck9oYlZNSUZjVmxiYkJPR0h6bmNFLUNmazBfVEVJSEthNmdXQW50YVVtUi1ySHcySG1kdjNzSjBERVJLWmRDN3c3TmR0d196YVBKYXVLVDVZM2tERzlDMk5TYndXT0ttVzd4M3RZM0lfaHRVdDl6bGdlN2ZQUy1xQW1rVVF3em9hYlk4MmgxUVllRThmRGR4T2FRaDB2WTZsdkdlNjFTSUJITmJXdjNMMURsZFk3SlpGU29hc1FuX2xiRVlrVHFSSjdxNkZ2bkI0NDdXZEFTWU9GaDNhblhMcjZVWUY2ekRJZm9FMVk2SjA3TC00UE5xY0FYRVprT2FYQklZZS1GNF9iT2gzM1J6bkJIdzFWWWlzcFVSR0I0LVdIRV9lUzcxclVCS1E0TzQtRTFwZ2RWVldJVXl1Y2dNVHBKYk5IZURVUWQ0cHF2WS1XemtNSkFNZTRvbE5lU0JBS1RxQ1dzMVlNZ0kzYkNJaEc5aUNScWRfcGkyMXg3M3R2VEZPTEZSWkdzclE2NkF5NkQ3aUFyRm1QVXpfaWN3dWZKZjYwei1UUVRhQzJwRTd5WFE1bzdMM01hbEVTQjY4d1ViVkZuRGZ5QV9uTlBZYjZBSXRoSFh4S0lkM2NSd29XbkFJOVpEaE1nT3ZJUkt4RHgtT0ppVURuWUJwMUsxd196OFU0RlptZ3VwN2JRd1JGQ29BeXAyczdteEUtejNVUHdkX0dERXBkVFF5S2c0SlNaVWtKQ01ORGhHVWlnWnBEM2p4VDA5eXFwdklYd1BSWVRNRTE4bmdJZThUMVh1ZUlKMW5WTjdWVjc2ZTIxeW1kNkZlaS0xbk91UkdhRzc2S1gyVGJNdFdCQXBzcUhoS3pZUXNEU3RxeXNWMnBSTFYxQi1URE9jTGozckJQYnNMUTlLNmdJV09jT3dseUJVQ2tOMGNyM3J3TmguWTVMUDM5V1pIb3RuVENZS2U1VDAwUQ.HNv4dpLTj-wZqPcIpHVvoKS0KQEMsK93cI8lwoQE8ZSB4F8JNFz21H2Km6BZOuOMR_k19Rf64pM2BKl-DU5r17iyWIJ9NCoEy1OTVT3O4_S98VRtrQffrQ7CAja0QzaUe7RpTJUVfQkfG6CeLkOerUUgnLPYEoJNnoUHO4G8gdWtDmt89u-VlXREYinrtdWoElFkL4Eoq_v7CXJfO7eVXAQzALVeEher5q2NdheCOcApbCXcEcfskAABpbnc8Jz9XxNPoq1G7gTJVsP4nCjVUMjMAY8-hRpm7CbFzFk4miZo_9kLqAAm8F00rWpyFXyv7fuTA-vSj0cCPtrGVwrdwg&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/approveProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="approveProvisioning &lt; cardholder_verification_method" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM cardholder_verification_method WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">cardholder_verification_method</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="approveProvisioning (CONFIRM_PROVISIONING) &lt;" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;CONFIRM_PROVISIONING&apos; ORDER BY id DESC LIMIT 1;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.confirm_provisioning</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object history = vars.getObject(&quot;msg_history.confirm_provisioning&quot;).get(0);

String cvmCorrelationId = cvm.get(&quot;correlation_id&quot;);
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);

boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(cvmCorrelationId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&lt;/name&gt;&lt;value&gt;0&lt;/value&gt;&lt;/code&quot;);
if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found conversationId `&quot; + cvmCorrelationId;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="approveProvisioning &lt; token_info" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int cvmSize = vars.getObject(&quot;cardholder_verification_method&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || cvmSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows &apos;cardholder_verification_method&apos;: &quot; + cvmSize;
}

int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows &apos;token_info&apos;: &quot; + tokenSize;
}

Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenRefId = token.get(&quot;token_ref_id&quot;);
boolean equalTokenRefId = tokenRefId.equals(&quot;DNITHE000${tokenReferenceID}&quot;);
if (!equalTokenRefId) {
	Failure = true;
	FailureMessage = &quot;&apos;token_ref_id&apos;: &quot; + tokenRefId;
}

String tokenStatus = token.get(&quot;token_status&quot;);
if (tokenStatus!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: is not empty&quot;;
}

String cvmPanInternalID = cvm.get(&quot;pan_internal_id&quot;);
String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
boolean equalTokenPanInternalID = tokenPanInternalID.equals(cvmPanInternalID);
if (!equalTokenPanInternalID) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: &quot; + cvmPanInternalID + &quot; = &quot; + tokenPanInternalID;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is not empty&quot;;
}

Date tokenDigitizeDate = token.get(&quot;digitize_date&quot;);
if (tokenDigitizeDate!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;digitize_date&apos;: is not empty&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Device Binding" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deviceBinding (+cvv2  cvc-expairDate)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceIndex&quot;: 3,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmxub3duISEhIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM01EQXlOakkyTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LlpiNnJfZS1ncWpGNFo3cEhjc0JsQ0lVdi1yMlh5Qzk2Szl0NFRfWER2VW5aMXVMT0F2ckd0cTBNVFpPTTAzczRfaGNFRGNHRDZyVEdLQXBkNEdPSmt6bDZVNWplVFotNFNQZURmWGpQZ3N2SENlWl9iQ1k1OEZwdVlKMVJaYmZiQjhxd3I1eGJvSHhJZDBjVVV4M29teFJYSE1RRFFScjM0MFZUaFpJSU80anJBa2ljV25sMk1sZzIwSG91TTZxVFBwb0JzTllKb0RaZkp6R1YyNTloWEVFa0dnOXNoZTdWMngwbHBjSGhYUVRwcWZpX0pYZjdTQ1BtbDZYLVlIN2h1enRxNmZxLWVlS1hRYmFGZjhOYkFQVWRmY1lSTEZyYXp1NnRQa2t5NTV0QndVNzlEbGFaRVJFUlcyWnZPSm01d1A5NGMzTUFEcF9uUU45ZU40Q1hDdy5kMmxwV3BfYVc1QXdlSVpQLjQwX3ZyQTFWQ0xnSW9qM2hNNnRldDhxazVQbVlZT2JjQ3Rfb3h2X1g4QzJQRFdJU1hDb3E4RktwZWhjaFI3d09lR0tPcGpzNmZIWDVrbndsbHJJYXBQVDFEZmg1SmEydy1zV2doWnlZSFhULVhkUFVmeXF1NTd1anBvaFR1cVlNWHktaTNFWWlqb09PdTdtUFFhbUtRUUp4a09NWmRkZm5raVN3NVY5bjhvQU5pbjhMc2VXZEZjZTg1RmVCV0dGRnB3MXNZby1PeVUtSnJmRkl6SEUtSEgtZExEbUxRTUtacHJYcEc2Y3g3WlpNbkIzMWx3SVJCeTJTZ2JPUHFISnhnNmg3S2NNOW5XMTc4TVJrajRRX2ZXVmdnbDVrUnZ0NDg5RVFoV2MtcElBeURoNWNMdzB0cGYxR3RJMzBGcWpDMGszLTZURXlPdXNKN2JaQ01TYW9ndVVSaENySWs4ZW5LdmpNWTZia0RaVkZCbjNpN2N4LXp5SmlabVN4Q2g0Nk5JdHowQ1dmcklSMlRIZGlxQU5TLVIzYXdobVpFeFRJa3BxVkZyeGk1VXBWcG1ZRkxYUHNMRGRpOW1HY0U2YzFCN1lXUmd3cDNKbjBIcjJBMUNYa2d4ckNjQ3NxLVUzLWhYQjRIekpWOHJ4U0pMZjhKTGpmZDRFMUF2RmVSWmJTZzRPQy1pbW9mY044Sk1Ob0FZWDFrTi1qQlZQYUpqNVVuemxnUkJWaGpRdk13M3YzQzZjRU5Rd0ItdnFlX0lSeEhDSU52MTVlSjhYX3I0c2sxeXVnWnlHR1VQMGtLT0VwWUFmdFRkcDdwMGVVU0hCODU3MHhxdFpyMGFmeDB6YWlTcFh4aWNEb3VJemN2cFpKWFhaYzRxVGNzTWszMGVFYjBMV0ZmQWtLcllpTUtkd2VhQnhtR2hBVFlJd21yZ3IybWxmS0tHcWV3eE14d3N6RDZ5MXpQM1g5ekRydkp1UDJZMjl3a0dTWG9vaG8tLUNsaXFXZmtrZjdieGlvN2x0UkNZczhUUm1lRjY3MWYwTmpNTzhLbUs5XzU1UU9IUHd4bnZSeXhqWFVYZFlVTFl6ZkVUdmRULXpkeDlzTkNLNTkyX2tRck9aSE9malBiZ01ld2tIT2ZDWHprNDAzbFBscU5JUm92aXdXbERDT0hQNTA1U3psV19NZVExOGxfemNrRWV1alJIVDA3YzlYRTdiVW5vUWhhZExpdGU4ODljZ3pBamZsbTZGbnRGNHoyWDViaW1TZTRYTWtXX0kyVmdHRmpyRVF4X1BYX01OWDhQTDNqcHZzMTNsdFU3RTVZYlpEZ25NdDczZWRVZGVHSTBfNmZRRmJHc2hhY0JVNWZDRElLWFlBR3lwMVdyTHFHZjFHZllpMWNhV211YXFVNG0tZWFqa3lzc3VsT0VkS2pVYzktQTEySF9EdWxaZ1I1Z1dRNUdwX1g3S2tVYlJLX2VXckU1ZVplSEljaWJSUktWMkc2VExKQUY3ekQ2M2xyUlI0QjRhaEI4VlRxUlFKWGs3dDB3OHRSWXdEbGExaFp3UHl0WFFmN2FhMl9WRjh2QXhKOTJqN1ltaFZYZm5sZm5ycjRJVFZ5R0JPSkpuTC0tMGE3VENZdk4yRVh1dWtNUlpKX3o1Y3Z3dGxzOG13blVkUm5oNFhnam1EYktCTzFnUGxBdzBHQ2pnNjQ4elI2V0NtZkQ0VFNNdlF2Mld1dENwSWozSlA4OGdtSHJ6M254QjY2ekxTQVhodGpHdXJ2OXFNZ1NOSWVnU2JBNjUwRVZoSFVaUmVBY1dSRmJZaXFycXRMdmdWUGJDX3NRZHE0OEZUU3hKSzBxS1lyMjJsLXM4eUxsTGhReUNiYjJZVXhfaC0wbWxqQ1Y2OU5HOVlZMk5ITDQ3Y0l2Xzc1b3lXLllIa0Z6QVNZQkNMaUlTTlFNNjZMU0E.VVD3ySH6B9YNIwU3r30-RQVAVBObzP93Ws8tufAf_zb-VPS_65oIpL6EsXdwrAE_g4Mf3JHPwqnC33L4HB7CrviTxOrfMiAAYLic0L_V64gN7SbCgvm7iuxcduLBk64hWpL5NHgl6kAu84_dP64yAyxVT_ONUctVlct_YI2AdCh-uLZ1mmOYaTgfLSnsSecp5z1pjNA-17Pp-CcfX4LvymjmQHrOO36Bse3LawDPvRjC1g-4dbqdwSgBJ0z3fCeQD5sW25uNDl0WRUQpaClprRL7UVO1-zUkGPOwAUcweTywS0sgHjlIWBY2CwgvG85hmCjQ0Ch6MabB_eRsp0vy9g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/deviceBinding</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-REQUEST-ID</stringProp>
                    <stringProp name="Header.value">1545333611280_1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deviceBinding (DNITHE000302000000000126)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenInfo&quot;: {&#xd;
    &quot;tokenType&quot;: &quot;SECURE_ELEMENT&quot;,&#xd;
    &quot;tokenAssuranceLevel&quot;: &quot;&quot;,&#xd;
    &quot;numberOfActiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfInactiveTokensForPAN&quot;: &quot;&quot;,&#xd;
    &quot;numberOfSuspendedTokensForPAN&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;consumerEntryMode&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceIndex&quot;: 3,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmxub3duISEhIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM01EQXlOakkyTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LlpiNnJfZS1ncWpGNFo3cEhjc0JsQ0lVdi1yMlh5Qzk2Szl0NFRfWER2VW5aMXVMT0F2ckd0cTBNVFpPTTAzczRfaGNFRGNHRDZyVEdLQXBkNEdPSmt6bDZVNWplVFotNFNQZURmWGpQZ3N2SENlWl9iQ1k1OEZwdVlKMVJaYmZiQjhxd3I1eGJvSHhJZDBjVVV4M29teFJYSE1RRFFScjM0MFZUaFpJSU80anJBa2ljV25sMk1sZzIwSG91TTZxVFBwb0JzTllKb0RaZkp6R1YyNTloWEVFa0dnOXNoZTdWMngwbHBjSGhYUVRwcWZpX0pYZjdTQ1BtbDZYLVlIN2h1enRxNmZxLWVlS1hRYmFGZjhOYkFQVWRmY1lSTEZyYXp1NnRQa2t5NTV0QndVNzlEbGFaRVJFUlcyWnZPSm01d1A5NGMzTUFEcF9uUU45ZU40Q1hDdy5kMmxwV3BfYVc1QXdlSVpQLjQwX3ZyQTFWQ0xnSW9qM2hNNnRldDhxazVQbVlZT2JjQ3Rfb3h2X1g4QzJQRFdJU1hDb3E4RktwZWhjaFI3d09lR0tPcGpzNmZIWDVrbndsbHJJYXBQVDFEZmg1SmEydy1zV2doWnlZSFhULVhkUFVmeXF1NTd1anBvaFR1cVlNWHktaTNFWWlqb09PdTdtUFFhbUtRUUp4a09NWmRkZm5raVN3NVY5bjhvQU5pbjhMc2VXZEZjZTg1RmVCV0dGRnB3MXNZby1PeVUtSnJmRkl6SEUtSEgtZExEbUxRTUtacHJYcEc2Y3g3WlpNbkIzMWx3SVJCeTJTZ2JPUHFISnhnNmg3S2NNOW5XMTc4TVJrajRRX2ZXVmdnbDVrUnZ0NDg5RVFoV2MtcElBeURoNWNMdzB0cGYxR3RJMzBGcWpDMGszLTZURXlPdXNKN2JaQ01TYW9ndVVSaENySWs4ZW5LdmpNWTZia0RaVkZCbjNpN2N4LXp5SmlabVN4Q2g0Nk5JdHowQ1dmcklSMlRIZGlxQU5TLVIzYXdobVpFeFRJa3BxVkZyeGk1VXBWcG1ZRkxYUHNMRGRpOW1HY0U2YzFCN1lXUmd3cDNKbjBIcjJBMUNYa2d4ckNjQ3NxLVUzLWhYQjRIekpWOHJ4U0pMZjhKTGpmZDRFMUF2RmVSWmJTZzRPQy1pbW9mY044Sk1Ob0FZWDFrTi1qQlZQYUpqNVVuemxnUkJWaGpRdk13M3YzQzZjRU5Rd0ItdnFlX0lSeEhDSU52MTVlSjhYX3I0c2sxeXVnWnlHR1VQMGtLT0VwWUFmdFRkcDdwMGVVU0hCODU3MHhxdFpyMGFmeDB6YWlTcFh4aWNEb3VJemN2cFpKWFhaYzRxVGNzTWszMGVFYjBMV0ZmQWtLcllpTUtkd2VhQnhtR2hBVFlJd21yZ3IybWxmS0tHcWV3eE14d3N6RDZ5MXpQM1g5ekRydkp1UDJZMjl3a0dTWG9vaG8tLUNsaXFXZmtrZjdieGlvN2x0UkNZczhUUm1lRjY3MWYwTmpNTzhLbUs5XzU1UU9IUHd4bnZSeXhqWFVYZFlVTFl6ZkVUdmRULXpkeDlzTkNLNTkyX2tRck9aSE9malBiZ01ld2tIT2ZDWHprNDAzbFBscU5JUm92aXdXbERDT0hQNTA1U3psV19NZVExOGxfemNrRWV1alJIVDA3YzlYRTdiVW5vUWhhZExpdGU4ODljZ3pBamZsbTZGbnRGNHoyWDViaW1TZTRYTWtXX0kyVmdHRmpyRVF4X1BYX01OWDhQTDNqcHZzMTNsdFU3RTVZYlpEZ25NdDczZWRVZGVHSTBfNmZRRmJHc2hhY0JVNWZDRElLWFlBR3lwMVdyTHFHZjFHZllpMWNhV211YXFVNG0tZWFqa3lzc3VsT0VkS2pVYzktQTEySF9EdWxaZ1I1Z1dRNUdwX1g3S2tVYlJLX2VXckU1ZVplSEljaWJSUktWMkc2VExKQUY3ekQ2M2xyUlI0QjRhaEI4VlRxUlFKWGs3dDB3OHRSWXdEbGExaFp3UHl0WFFmN2FhMl9WRjh2QXhKOTJqN1ltaFZYZm5sZm5ycjRJVFZ5R0JPSkpuTC0tMGE3VENZdk4yRVh1dWtNUlpKX3o1Y3Z3dGxzOG13blVkUm5oNFhnam1EYktCTzFnUGxBdzBHQ2pnNjQ4elI2V0NtZkQ0VFNNdlF2Mld1dENwSWozSlA4OGdtSHJ6M254QjY2ekxTQVhodGpHdXJ2OXFNZ1NOSWVnU2JBNjUwRVZoSFVaUmVBY1dSRmJZaXFycXRMdmdWUGJDX3NRZHE0OEZUU3hKSzBxS1lyMjJsLXM4eUxsTGhReUNiYjJZVXhfaC0wbWxqQ1Y2OU5HOVlZMk5ITDQ3Y0l2Xzc1b3lXLllIa0Z6QVNZQkNMaUlTTlFNNjZMU0E.VVD3ySH6B9YNIwU3r30-RQVAVBObzP93Ws8tufAf_zb-VPS_65oIpL6EsXdwrAE_g4Mf3JHPwqnC33L4HB7CrviTxOrfMiAAYLic0L_V64gN7SbCgvm7iuxcduLBk64hWpL5NHgl6kAu84_dP64yAyxVT_ONUctVlct_YI2AdCh-uLZ1mmOYaTgfLSnsSecp5z1pjNA-17Pp-CcfX4LvymjmQHrOO36Bse3LawDPvRjC1g-4dbqdwSgBJ0z3fCeQD5sW25uNDl0WRUQpaClprRL7UVO1-zUkGPOwAUcweTywS0sgHjlIWBY2CwgvG85hmCjQ0Ch6MabB_eRsp0vy9g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/tokenRequestors/40010030273/tokens/DNITHE000302000000000126/deviceBinding</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-REQUEST-ID</stringProp>
                    <stringProp name="Header.value">1545333611280_1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deviceBinding" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;locale&quot;:&quot;en_US&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;merchantInfo&quot;: {&#xd;
  	&quot;test&quot;: &quot;test&quot;&#xd;
  },&#xd;
  &quot;tokenUserInfo&quot;: {&#xd;
  	&quot;test&quot;: &quot;test&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/deviceBinding</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deviceBinding {&quot;errorCode&quot;:&quot;ISE40000&quot;,&quot;actionCode&quot;:&quot;05&quot;}" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokenRefId&quot;: &quot;DNITHE000302000000000001&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;40010030273&quot;,&#xd;
  &quot;panInternalId&quot;: &quot;1203&quot;,&#xd;
  &quot;lang&quot;: &quot;en&quot;,&#xd;
  &quot;paymentAppInstId&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;device&quot;: {&#xd;
    &quot;deviceIndex&quot;: &quot;2&quot;,&#xd;
    &quot;deviceId&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/deviceBinding</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deviceBinding &lt; cardholder_verification_method" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM cardholder_verification_method WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">cardholder_verification_method</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deviceBinding (CONFIRM_PROVISIONING) &lt;" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;CONFIRM_PROVISIONING&apos; ORDER BY id DESC LIMIT 1;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.confirm_provisioning</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object history = vars.getObject(&quot;msg_history.confirm_provisioning&quot;).get(0);

String cvmCorrelationId = cvm.get(&quot;correlation_id&quot;);
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);

boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(cvmCorrelationId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&lt;/name&gt;&lt;value&gt;0&lt;/value&gt;&lt;/code&quot;);
if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found conversationId `&quot; + cvmCorrelationId;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deviceBinding &lt; token_info" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int cvmSize = vars.getObject(&quot;cardholder_verification_method&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || cvmSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows &apos;cardholder_verification_method&apos;: &quot; + cvmSize;
}

int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows &apos;token_info&apos;: &quot; + tokenSize;
}

Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenRefId = token.get(&quot;token_ref_id&quot;);
boolean equalTokenRefId = tokenRefId.equals(&quot;DNITHE000${tokenReferenceID}&quot;);
if (!equalTokenRefId) {
	Failure = true;
	FailureMessage = &quot;&apos;token_ref_id&apos;: &quot; + tokenRefId;
}

String tokenStatus = token.get(&quot;token_status&quot;);
if (tokenStatus!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: is not empty&quot;;
}

String cvmPanInternalID = cvm.get(&quot;pan_internal_id&quot;);
String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
boolean equalTokenPanInternalID = tokenPanInternalID.equals(cvmPanInternalID);
if (!equalTokenPanInternalID) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: &quot; + cvmPanInternalID + &quot; = &quot; + tokenPanInternalID;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is not empty&quot;;
}

Date tokenDigitizeDate = token.get(&quot;digitize_date&quot;);
if (tokenDigitizeDate!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;digitize_date&apos;: is not empty&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Check Eligibility" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility (kid=FASTTACK)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVORGd6T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnFMSnlvczJZWmQ1OFA4RFg3ZGJVMENWLWVNTlIyQTNXbFUxX19nZEZMLU9Vcll4ZlZ3OXM4ME83RlRvWHFUTGlPc2FBNGxoNHA1SzJMVDFuLThMRE9rOHVFZDMyWXVaR0Z0QmhKTFkyeEdpLXJHc2dfTXJKNjMzR25ZX2FMOUo2S01NSDItWVUtR1BNbG1wR1lsRXJaa2sycmxNbXV4ZF9JaTFiZHhhSkJKMzA0NnotZG1DYU52WWxTU2x5UHRtNGNhMmF1QlZjaXVNMHNNbXQwYjJmQnN3dDZmTGNUcVJ3NnVRbUYtZWNUaFBOUnlGaUpGSXl3dE5rcWFTV3VjM0k3N1M5QkZpb2xQSXRNSlpoUWNzUDlHenllMk92cE5NUTAxV0UzcFJCRnZqTGkxMWY4dHE1aTFlblJlaF9kdmRNWEpsQ0xxOXFXdG5faVp0bDlkLVZEZy5SMWUzR3NJZmJwUnJaNmNoLnB1VmZ0d0FtTmNtWVhFVHdQVXAyLXIybGtCOTVjQ0RPcnhNNm1Za0h5RFV2Si1USHNOcnJDbkxaam9TOVh5eG0yalVyRjZndFk1RjVSMDBTZUJKQzE3MWFkNW96U0NHQWx5ck1DMVByaU9ocjN0X1lGSEc0T25uZnhkaFpXOGlSNUpCTHVHN2JORUlxS3BkOTVOMS1pTlFfeUJYeTZrM0lCMklxei1IOHlrRXJPZ3AxQ09RUk9TTmQ3amFsSDF5c1FvRksyQW9ES0xZTkc1dGxLUVUzX2Y1N19OVHZMSjlKZ09sVkpublhqTWtCaWFMT21jN2pzd0ZKR05sZ3c3WGxNWGlrSUhVank1SGduVzBsVEFQc2lFcDd1MXJ0QkpmYmVKUl9JdkF2cjYzNHBRLi1yVUtGaWJsSF9BV0Z0OGtHR3BxYlE.iGTzBAwMnhgy2F-oOj6uwdQTpcMuHMyyGmzNYv1akYnsRJBdbEGqzOrVniyifcy0zQOzJ5vW0U650v1WxLuSzHGJ1kvgmi06fCYujK4GCA-l9Zg_M6F5vgA59t98JuVuaMer8P0iB0v8adlGr4w_GtvTGFNpUHFVzdzA6uYf8ReAOiMN4bEMnsfEWtbSFjD4_syVTZmEeft66ZutV8gUunPcKSWJdKI2Z1FH5rbnuSdFr1RsRhJyeYEJGohhursQbXEeo2FIH-iMT1uyhI1AFggDW4KWqoe-Zpo-miNcV8XaGbQFXtdcWZRp8u8mTSSGuP0kmBGStBBCDZDraM3-AA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def profileID = response.cardMetadataInfo.profileID;
if (profileID!=null) {
	props.put(&quot;profileID&quot;, profileID);
} else {
	props.put(&quot;profileID&quot;, &quot;###_NOT_FOUND_PROFILEID_###&quot;);
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Failure response cardMetadataInfo.profileID: is empty&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility (kid=FASTTACK) TEST encryptedData" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU16WTJORFF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LkVQMTUwMTBBUTJmRERqRkQtd1BiUl9vNkdHemZRNUhSS3RSSlhFZDFVa3NTYlJVb2RqWVM4UHk5aWRRandYN2piejhIQnhGMVNkVE10VnVwWXl4MjAtSUNLRlBQdXppOVZhbzJkZ0dlQTRNZW1aaVotazNVRjQzenBEN2JZQzVxdGZDbC1oSjMwdkFGbHFQRjNza2ZuQ1R1dnVSTTVsNEtvMTljSWpVdkZES08yQXN0RHJxeFgxb25GeXFEVmhiN0xwV3BzUDNXdnIwcW9ULWF4SE9Cb3BnekxJeGFNUVZwX0t5bkFtUXQyMVlpQ2tJWmxnX0FaeUdxbEN0MWdrRldKYWpMa2ViVmhkUG1QMG1IREY3RkZsRXZlTlM1Yk5BMWF1RGVMVUs3RlZ4UGRSMkxnemlseG9OeFBDX3VQSVRWbE81TDdhOG5fLUJBTG9TMnVvVGZOdy5hZVhqOE9pU19uOXZSU0I2LmI3XzYtVmNRRkNFamRCQkozTUV1X2lDM2lrX2VRQzhIUFNUYzJwOFRnXzRBS20weHBtMXQySV8zU2Z3dFZueDZ4UExJQ3kyck5zYU1OcTduNEF6Y3czT3lEQnV0UmtvNWgyRkFzUElRN0lHMDZfaG5PZnFjUHRJVWhMWFA3Wlo1ZFl5VHlqRDVpR182ckNETzlxejV6MFRkZjl6TktsZHN1VjV5dk8wb1J1WFpFc1ZHb1YtRFd1NVNmaXZlb0huN2RtVlBQcUxVYjNsY1BuQUw5QjQtNERtSnRoRUpyYWxBYzd2RzMxUml1dnFnc2FJcVdOVFYwT1RuWlBFZW5TUE9zejFiT0N6VUpZQTJLTktlS1pfQ3FfVVlGbWFORGdSRnYzblNjVzZIUy1PQnpRLkdvUzRWSm1feWZLWjh2RjVXdVU3aEE.GCOlrVR1YB1J37QOtWc0nJ2k_QwCZ86M2XjgjIRA_WfZlDml3sYe15AIy6wG2n_eQza0nh8l8BApKN9SsVob18UaaZVdt_SqtC12rM1rP6aeoIJkQGKlAljhpVyl0tCaTBjDjKapIu3rwJDzWM_drNZBbGa4-YjzfztoXefFf5ODBbKlucLI-EV8Y-JTIPTLp4Sm8gbLVKNktgIrRAx5qn-6WTVXno2m-mg_tEgziIGXtqoetSAWvC8hjrXD3qdL5WcsPfZI6dD2yUZlBKUxAgl1ddnTCkJ7kgGuWpK_rcinDkK_y520WiLDPoaWjc3350k8z9fu2O0Rviy1hY4SUw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def profileID = response.cardMetadataInfo.profileID;
if (profileID!=null) {
	props.put(&quot;profileID&quot;, profileID);
} else {
	props.put(&quot;profileID&quot;, &quot;###_NOT_FOUND_PROFILEID_###&quot;);
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Failure response cardMetadataInfo.profileID: is empty&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility ([115] kid=FASTTACK)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVORGd6T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnFMSnlvczJZWmQ1OFA4RFg3ZGJVMENWLWVNTlIyQTNXbFUxX19nZEZMLU9Vcll4ZlZ3OXM4ME83RlRvWHFUTGlPc2FBNGxoNHA1SzJMVDFuLThMRE9rOHVFZDMyWXVaR0Z0QmhKTFkyeEdpLXJHc2dfTXJKNjMzR25ZX2FMOUo2S01NSDItWVUtR1BNbG1wR1lsRXJaa2sycmxNbXV4ZF9JaTFiZHhhSkJKMzA0NnotZG1DYU52WWxTU2x5UHRtNGNhMmF1QlZjaXVNMHNNbXQwYjJmQnN3dDZmTGNUcVJ3NnVRbUYtZWNUaFBOUnlGaUpGSXl3dE5rcWFTV3VjM0k3N1M5QkZpb2xQSXRNSlpoUWNzUDlHenllMk92cE5NUTAxV0UzcFJCRnZqTGkxMWY4dHE1aTFlblJlaF9kdmRNWEpsQ0xxOXFXdG5faVp0bDlkLVZEZy5SMWUzR3NJZmJwUnJaNmNoLnB1VmZ0d0FtTmNtWVhFVHdQVXAyLXIybGtCOTVjQ0RPcnhNNm1Za0h5RFV2Si1USHNOcnJDbkxaam9TOVh5eG0yalVyRjZndFk1RjVSMDBTZUJKQzE3MWFkNW96U0NHQWx5ck1DMVByaU9ocjN0X1lGSEc0T25uZnhkaFpXOGlSNUpCTHVHN2JORUlxS3BkOTVOMS1pTlFfeUJYeTZrM0lCMklxei1IOHlrRXJPZ3AxQ09RUk9TTmQ3amFsSDF5c1FvRksyQW9ES0xZTkc1dGxLUVUzX2Y1N19OVHZMSjlKZ09sVkpublhqTWtCaWFMT21jN2pzd0ZKR05sZ3c3WGxNWGlrSUhVank1SGduVzBsVEFQc2lFcDd1MXJ0QkpmYmVKUl9JdkF2cjYzNHBRLi1yVUtGaWJsSF9BV0Z0OGtHR3BxYlE.iGTzBAwMnhgy2F-oOj6uwdQTpcMuHMyyGmzNYv1akYnsRJBdbEGqzOrVniyifcy0zQOzJ5vW0U650v1WxLuSzHGJ1kvgmi06fCYujK4GCA-l9Zg_M6F5vgA59t98JuVuaMer8P0iB0v8adlGr4w_GtvTGFNpUHFVzdzA6uYf8ReAOiMN4bEMnsfEWtbSFjD4_syVTZmEeft66ZutV8gUunPcKSWJdKI2Z1FH5rbnuSdFr1RsRhJyeYEJGohhursQbXEeo2FIH-iMT1uyhI1AFggDW4KWqoe-Zpo-miNcV8XaGbQFXtdcWZRp8u8mTSSGuP0kmBGStBBCDZDraM3-AA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.1.115</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/vtis/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def profileID = response.cardMetadataInfo.profileID;
if (profileID!=null) {
	props.put(&quot;profileID&quot;, profileID);
} else {
	props.put(&quot;profileID&quot;, &quot;###_NOT_FOUND_PROFILEID_###&quot;);
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Failure response cardMetadataInfo.profileID: is empty&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility (Missing requied field-PAN)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;tokenRequestorID&quot;: 40010075001,&#xd;
    &quot;tokenReferenceID&quot;: &quot;DNITHE301934753090029942&quot;,&#xd;
    &quot;panReferenceID&quot;: &quot;V-3019347529503803777446&quot;,&#xd;
    &quot;panSource&quot;: &quot;ON_FILE&quot;,&#xd;
    &quot;deviceInfo&quot;: {&#xd;
        &quot;deviceLanguageCode&quot;: &quot;eng&quot; &#xd;
    },&#xd;
    &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM056UTFNVFUxTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LnFGalg3MklHejBrYkhOdVpsakhIcG5FT1lKR25iaWE1Vmo2NWpweDhUdW5zWnhULTcwUzl3RHZxeWl6b0l6ZWE5QjNZZkdZZU1Zc3RTU3pBN2NZUGFLY05hcWlEbVV1Q09GZ2xHZEUxTFoxTUotOW5rLTQxTGhrcG1NcHVuWmV6WEIyR3NkYVcyQnhMMEV6NG1qMDZEN20td0x1bkxUNTVzNmllRXZZbW5uOWQ4bGNMcEdISDFfeTlENHVLcl9RcGpaeGpacWtMbkd3NjRZWVFvX2xEOFU1UnI1ZURTVWVsZjRDdlEyUEMyTWZKTkNTdFJlb2hTZDRVakZaZGlnRDhoMVk3NDRnQ0VzdHFlMkYxSDg5X0FTYUg1ZnR3bDJ6N1ZGeVNwQ0lObFdSQ3ZxMlRieU0xT0UzWGJnbXdpbE1rVThfUmZfbkYxM3ViUFcwYTZhVWx2US5CRnZmdzQtRjJjanNLYW84LnYwaG00UTJ0THVlUFhVdjVUWktfdU5DaEdtMEZybUhlckRma2pESGFjWTFONEVmbll3WmpHdEo3ZTluWVh1OVpGelhwdnFFM2UtX0VyZExZeHhCSC1pdklIRFBkeG1VWUlRSGpsNjJiYjhpdWxnR3EybmpHUkhXb0hqTTFZQUppeGc2dWpqNFNudHJsMnZxdjk2RUIwdDR6WnpySjZSU3NWSG15SDJvR0dqbUFEcmt6b2ZaXzloNFo5Tlk4ME5tSW00bndiWkVBNFNJNGdDYlJZekllWTVHMk5neGd5VUlQUlF3N0FhR2ZJaURGRDJUanI1RUpQNC1zeUxTT2syQ21faWZQd3VJVHlWLUNIUmpST2I1alg1cVhuX1lFaEo4cjFQS09wTWRPOUc0aWEwVmFnVm43d2dQei1tTmFPZWVWbG5uM2RqQmcwSVdpSVdBWlNJWVM1bmZiY2xMT0gxeW5QTGN0NHp1SFI1YTZpV3ZyeVFpOF9hVlV1TDFyN2kzVW5PMzNJMzI1bUhWQVVEUTZaTHFEcnU1WjR1TXdGbUdnZWpYZkxybmpIZENxWXJ1STRCaEJXaktMNk1UMkdJRUtTY3ZhbG04aXBvNmF5c1h1ZE5BSTI5N0tBOXZLQUVKX2tSa2N2akZNdTgtcVV1MVYzOEZVR1Y5a0h0bTEwWnNpcTBSQmwydlB2NEliT3JiZjF2MXMwSkx0QlF6cHVTTl9kS2xqNDFqSjhpd2pQTFdVaDlOcWZzU0NuS3BHT2VJUUxkcDQ3R3dSUmxPXzViZWpPS2twYjV1N0pSbl9PTFpTTmpYRFpLMkh1NFBjdzNFWWhHSldPUFJWV0hFYzhaQ2FfTGd1NTZIOEFSUU9xNmxJRTVmYnlvN0NXb1VJUE85LUQ3MWxJTlFoZFhJNVNuZ0dLZHY4bnA3Ujd2OUk3VFBnWnM2R1MtbUdPbldDNEdlSXVWanhoVjZzc2wtSExrQmptNnN0bE1qOGNzQ1p0SE5EX0licXdJajdTSkFuUlNhc09FejNTbl8tTHZOYmVKelY0YkRaYTdpTHFsNkR3ZFlINGJwS0wxX1RSaVNVZV80WURkWUpkTlZZcmJ4MUZhVlVSMGJRdWdFLWNzdFRvV1YzXzcycV8xelVrR043MWp0VGJWd0hEXzdYOGRNNXB5WG41WkV6dXJsaGRtcTU1eDNidmJRcmV4UGxNVkRxNTVLNmVLOTF4eDRyTmtZcUszaEYtYjNiaWxyNEN6WS0tWDFjWEVNUHNTbFRIZnoxUFRENHg3UXBXU0hZbUk0bmJvbVlZQjVOOUdJbV9CbjFUU01ad2xRXzI1NGRUREg5Y3dvOWFNRklxaFc5MGItTlBrYXpneEZYZ0J1TEZidDJleWp6S21YRHFhS0ZPblVGTUxkNlBnWXptR1pQNWNlYkdpSk5KQ2Jrb01RQ1hCcUZoUWlMV3hRbmkteUoxNWlDb3ZvdEF1UFhQMlRSOHZtbGJ0Tl9ZTm5XM3dqSUhGWFBlaDJLS2RpREk2YVkwRTJlYkJTcENJTm1QRDhJMjRSOU1HbUt0VDhpNXh6MWlpTjlUY3R1WGMtazJmX0FtN2VNZF9xR3FUVlRodHVPcEtUSEdVaDFUUVR6clZFREk3SXYxcXlGSjlnT01vWEhjRnZTY3JSc0ZEOFVFN1dYQU9mSjUyeUEyaVhuR3FEX3FMbGwxY2JVUnhkbXNsdmVfRXZSWUZLa19RSWtCS21WS2RSLTgxb1hKdnhxNHZLM0ZqTWt0dXNGOVFKVFZZRFpLVGZ1NDZvbjBGVW9zd2JlLUhaVjZ3emZ4ZzJReWEwNDg0cFlMZHdyUEEuLUw4S1hna3dZYjJZZjhETXhPUWdrUQ.F80UZMVP4ju79rAQI3DBW9WrKVzzzixjy8vDCi9tNG969_90ClAWp344KBS2ru8lsAa2jKEoeu7uVDmTt0eeh-06TqLyRdMgoX4SqPmo4f5YPLrX9J86yh5Xjqgx9lU1924efnoXsvcoBhvy7yDDIVW5Hcgq05104qH2Zff_MW2tf6bEDyUEPCipXvoZ2qt9rR4NSww_yMAxh2Lr_ez4ZNEimjr0BUbESJb6W7JDoZ6MT5kohkLK0b6UnWAtw5faUjpEYX3X1XDiJXZ7bTl3oYDyk6k_-O0u2iQIKoS9TbpJjyRlhOph0mC0iHrUUwL8_4_zNrpfxffyfZrVHuskCA&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def profileID = response.cardMetadataInfo.profileID;
if (profileID!=null) {
	props.put(&quot;profileID&quot;, profileID);
} else {
	props.put(&quot;profileID&quot;, &quot;###_NOT_FOUND_PROFILEID_###&quot;);
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Failure response cardMetadataInfo.profileID: is empty&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="checkEligibility (GET_CARD_INFO_SHORT) &lt;" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;GET_CARD_INFO_SHORT&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.get_card_info_short</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object history = vars.getObject(&quot;msg_history.get_card_info_short&quot;).get(0);

String profileID = props.get(&quot;profileID&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
/*
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;productConfigID&gt;&quot; + profileID + &quot;&lt;/productConfigID&quot;);
if (!equalHistoryMsgRawOut) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_out&apos;: not found productConfigID `&quot; + profileID + &quot;`&quot;;
}
*/</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility (kid=ypylypen)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVORGd6T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnFMSnlvczJZWmQ1OFA4RFg3ZGJVMENWLWVNTlIyQTNXbFUxX19nZEZMLU9Vcll4ZlZ3OXM4ME83RlRvWHFUTGlPc2FBNGxoNHA1SzJMVDFuLThMRE9rOHVFZDMyWXVaR0Z0QmhKTFkyeEdpLXJHc2dfTXJKNjMzR25ZX2FMOUo2S01NSDItWVUtR1BNbG1wR1lsRXJaa2sycmxNbXV4ZF9JaTFiZHhhSkJKMzA0NnotZG1DYU52WWxTU2x5UHRtNGNhMmF1QlZjaXVNMHNNbXQwYjJmQnN3dDZmTGNUcVJ3NnVRbUYtZWNUaFBOUnlGaUpGSXl3dE5rcWFTV3VjM0k3N1M5QkZpb2xQSXRNSlpoUWNzUDlHenllMk92cE5NUTAxV0UzcFJCRnZqTGkxMWY4dHE1aTFlblJlaF9kdmRNWEpsQ0xxOXFXdG5faVp0bDlkLVZEZy5SMWUzR3NJZmJwUnJaNmNoLnB1VmZ0d0FtTmNtWVhFVHdQVXAyLXIybGtCOTVjQ0RPcnhNNm1Za0h5RFV2Si1USHNOcnJDbkxaam9TOVh5eG0yalVyRjZndFk1RjVSMDBTZUJKQzE3MWFkNW96U0NHQWx5ck1DMVByaU9ocjN0X1lGSEc0T25uZnhkaFpXOGlSNUpCTHVHN2JORUlxS3BkOTVOMS1pTlFfeUJYeTZrM0lCMklxei1IOHlrRXJPZ3AxQ09RUk9TTmQ3amFsSDF5c1FvRksyQW9ES0xZTkc1dGxLUVUzX2Y1N19OVHZMSjlKZ09sVkpublhqTWtCaWFMT21jN2pzd0ZKR05sZ3c3WGxNWGlrSUhVank1SGduVzBsVEFQc2lFcDd1MXJ0QkpmYmVKUl9JdkF2cjYzNHBRLi1yVUtGaWJsSF9BV0Z0OGtHR3BxYlE.iGTzBAwMnhgy2F-oOj6uwdQTpcMuHMyyGmzNYv1akYnsRJBdbEGqzOrVniyifcy0zQOzJ5vW0U650v1WxLuSzHGJ1kvgmi06fCYujK4GCA-l9Zg_M6F5vgA59t98JuVuaMer8P0iB0v8adlGr4w_GtvTGFNpUHFVzdzA6uYf8ReAOiMN4bEMnsfEWtbSFjD4_syVTZmEeft66ZutV8gUunPcKSWJdKI2Z1FH5rbnuSdFr1RsRhJyeYEJGohhursQbXEeo2FIH-iMT1uyhI1AFggDW4KWqoe-Zpo-miNcV8XaGbQFXtdcWZRp8u8mTSSGuP0kmBGStBBCDZDraM3-AA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/*
def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def profileID = response.cardMetadataInfo.profileID;
if (profileID!=null) {
	props.put(&quot;profileID&quot;, profileID);
} else {
	props.put(&quot;profileID&quot;, &quot;###_NOT_FOUND_PROFILEID_###&quot;);
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Failure response cardMetadataInfo.profileID: is empty&quot;);
}
*/</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility (Cryptography error – unknown)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmtub3duIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVORGd6T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnFMSnlvczJZWmQ1OFA4RFg3ZGJVMENWLWVNTlIyQTNXbFUxX19nZEZMLU9Vcll4ZlZ3OXM4ME83RlRvWHFUTGlPc2FBNGxoNHA1SzJMVDFuLThMRE9rOHVFZDMyWXVaR0Z0QmhKTFkyeEdpLXJHc2dfTXJKNjMzR25ZX2FMOUo2S01NSDItWVUtR1BNbG1wR1lsRXJaa2sycmxNbXV4ZF9JaTFiZHhhSkJKMzA0NnotZG1DYU52WWxTU2x5UHRtNGNhMmF1QlZjaXVNMHNNbXQwYjJmQnN3dDZmTGNUcVJ3NnVRbUYtZWNUaFBOUnlGaUpGSXl3dE5rcWFTV3VjM0k3N1M5QkZpb2xQSXRNSlpoUWNzUDlHenllMk92cE5NUTAxV0UzcFJCRnZqTGkxMWY4dHE1aTFlblJlaF9kdmRNWEpsQ0xxOXFXdG5faVp0bDlkLVZEZy5SMWUzR3NJZmJwUnJaNmNoLnB1VmZ0d0FtTmNtWVhFVHdQVXAyLXIybGtCOTVjQ0RPcnhNNm1Za0h5RFV2Si1USHNOcnJDbkxaam9TOVh5eG0yalVyRjZndFk1RjVSMDBTZUJKQzE3MWFkNW96U0NHQWx5ck1DMVByaU9ocjN0X1lGSEc0T25uZnhkaFpXOGlSNUpCTHVHN2JORUlxS3BkOTVOMS1pTlFfeUJYeTZrM0lCMklxei1IOHlrRXJPZ3AxQ09RUk9TTmQ3amFsSDF5c1FvRksyQW9ES0xZTkc1dGxLUVUzX2Y1N19OVHZMSjlKZ09sVkpublhqTWtCaWFMT21jN2pzd0ZKR05sZ3c3WGxNWGlrSUhVank1SGduVzBsVEFQc2lFcDd1MXJ0QkpmYmVKUl9JdkF2cjYzNHBRLi1yVUtGaWJsSF9BV0Z0OGtHR3BxYlE.iGTzBAwMnhgy2F-oOj6uwdQTpcMuHMyyGmzNYv1akYnsRJBdbEGqzOrVniyifcy0zQOzJ5vW0U650v1WxLuSzHGJ1kvgmi06fCYujK4GCA-l9Zg_M6F5vgA59t98JuVuaMer8P0iB0v8adlGr4w_GtvTGFNpUHFVzdzA6uYf8ReAOiMN4bEMnsfEWtbSFjD4_syVTZmEeft66ZutV8gUunPcKSWJdKI2Z1FH5rbnuSdFr1RsRhJyeYEJGohhursQbXEeo2FIH-iMT1uyhI1AFggDW4KWqoe-Zpo-miNcV8XaGbQFXtdcWZRp8u8mTSSGuP0kmBGStBBCDZDraM3-AA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.1/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility (ISE40001)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVORGd6T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnFMSnlvczJZWmQ1OFA4RFg3ZGJVMENWLWVNTlIyQTNXbFUxX19nZEZMLU9Vcll4ZlZ3OXM4ME83RlRvWHFUTGlPc2FBNGxoNHA1SzJMVDFuLThMRE9rOHVFZDMyWXVaR0Z0QmhKTFkyeEdpLXJHc2dfTXJKNjMzR25ZX2FMOUo2S01NSDItWVUtR1BNbG1wR1lsRXJaa2sycmxNbXV4ZF9JaTFiZHhhSkJKMzA0NnotZG1DYU52WWxTU2x5UHRtNGNhMmF1QlZjaXVNMHNNbXQwYjJmQnN3dDZmTGNUcVJ3NnVRbUYtZWNUaFBOUnlGaUpGSXl3dE5rcWFTV3VjM0k3N1M5QkZpb2xQSXRNSlpoUWNzUDlHenllMk92cE5NUTAxV0UzcFJCRnZqTGkxMWY4dHE1aTFlblJlaF9kdmRNWEpsQ0xxOXFXdG5faVp0bDlkLVZEZy5SMWUzR3NJZmJwUnJaNmNoLnB1VmZ0d0FtTmNtWVhFVHdQVXAyLXIybGtCOTVjQ0RPcnhNNm1Za0h5RFV2Si1USHNOcnJDbkxaam9TOVh5eG0yalVyRjZndFk1RjVSMDBTZUJKQzE3MWFkNW96U0NHQWx5ck1DMVByaU9ocjN0X1lGSEc0T25uZnhkaFpXOGlSNUpCTHVHN2JORUlxS3BkOTVOMS1pTlFfeUJYeTZrM0lCMklxei1IOHlrRXJPZ3AxQ09RUk9TTmQ3amFsSDF5c1FvRksyQW9ES0xZTkc1dGxLUVUzX2Y1N19OVHZMSjlKZ09sVkpublhqTWtCaWFMT21jN2pzd0ZKR05sZ3c3WGxNWGlrSUhVank1SGduVzBsVEFQc2lFcDd1MXJ0QkpmYmVKUl9JdkF2cjYzNHBRLi1yVUtGaWJsSF9BV0Z0OGtHR3BxYlE.iGTzBAwMnhgy2F-oOj6uwdQTpcMuHMyyGmzNYv1akYnsRJBdbEGqzOrVniyifcy0zQOzJ5vW0U650v1WxLuSzHGJ1kvgmi06fCYujK4GCA-l9Zg_M6F5vgA59t98JuVuaMer8P0iB0v8adlGr4w_GtvTGFNpUHFVzdzA6uYf8ReAOiMN4bEMnsfEWtbSFjD4_syVTZmEeft66ZutV8gUunPcKSWJdKI2Z1FH5rbnuSdFr1RsRhJyeYEJGohhursQbXEeo2FIH-iMT1uyhI1AFggDW4KWqoe-Zpo-miNcV8XaGbQFXtdcWZRp8u8mTSSGuP0kmBGStBBCDZDraM3-AA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def errorCode = response.errorCode;
if (errorCode != &quot;ISE40001&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response errorCode &apos;&quot; + errorCode + &quot;&apos;&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility (PAN value contains letters)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTJPREUyTml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LmN3d1VYYmFyQ0IyclhtV1hjbHl0VGM5bFVyb2lwM2ZJSVRkYzBZR01UT1l4WnNxaktNVDZvT3liN182c2RCaVgxcmhUbmVXNGZfVFRiMW5qZ21iR2gzQV9VTVY4am9vVGpOSHJUbGtmSmVQLWNVUm9jN21RTzhydmdQcW1BRzNSb0tsc1lmNkc5MWxWQUQxaHpIaC1uNmx5N3B5UmEwNmlWN201UC0yZ2pZNUdfZG5JWG9HSENUOHMtck8yaWo4ZVZVeXAycTBxY3hGaWRYR1BvTzlhU0RQUGoyb0U2Qmo0V3YydjZIcjBlOHZQblFwNVFUSFA4aFJJd0xNblVRMEZpU01CWkhrN1NUdWJua1ZlX2Z6TVJSbUcxZHhSV01DUTN1NFU5WXEtTG11Rms1OE5WNDA1YTlpbkN2MXNQVHZubHlkZ3EwVlgtSjVsRzhyY09nNW54QS4zX0JHZ2RKVFFGSHEwMHFHLmxRU05OTjZTODZuYk5YQmdjbTJHWHdWN0VCeUFZMUtXNTJfUnRuVXpUbDFvOHNnRElpbEptdDYtN1h1WEp0UzFIT24xTHQ5WHNvQzduTllVRDNnOW1qQUJ5SlVWcllEdDBfT3NFM1ZPMkp5ZVU0T1hWV3QyYldBdmVUTzJUUkllZHp5UGtGbi1IUTVNY1pLQWNoaFhPNy1fU2w3Z0xkSlNPTEhtbEZOZUpVVnBnSlIzVVphM2hRdy1wVWpzcUI1dGdnLS1zdDdaZUdCMVBnLTNyQzVNLlFCaS1XZ1VrUEpMSVRsRVVSVENSU1E.jozMG6N7BscZV1HBxptyrDT4oQrvjaWNQ3b3LpO5BiUr58HMTXnFk9SzbvETDgW0zrpKQlwoE2YShGLAhKAA2DmkK1wlRcdLRYAfPDsOQHiegdznlKX9djqrufS6KcMYmaYy6Y--znwmCd8iZZDBd43DTYdXGix6VSjgOX_pD9qrWS6NvDh_sfxM8Se7EiYiRhBPTLJ3gzSr4Sd3RV2SjGRP_TARupPJzZb_MRuOon7dkhziNLeAVyM_zoEh6nGbWwxwMszKXHIpJ87ScgX5pAtZXxXoEN3E1fNvaSRa03D-PA92kweTHOErb7pKz6Sov6y7Szhe3T9tuUil6SGqEg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.1/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def errorCode = response.errorCode;
if (errorCode!=&quot;ISE40006&quot;) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Failure response errorCode: &quot; + errorCode);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility (Invalid Json payload in encrypted data)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;:&quot;V-3017192484534844832016&quot;,&#xd;
  &quot;clientWalletAccountID&quot;:&quot;6Gt02SAokOGBxPoKPuP62016&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;:&quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
	&quot;deviceName&quot;:&quot;GnusmasGlxy$#$16&quot;,&#xd;
	&quot;deviceID&quot;:&quot;04312E7B342C80014328036811932950DA075B1C4DC42016&quot;,&#xd;
	&quot;deviceType&quot;:&quot;MOBILE_PHONE&quot;,&#xd;
	&quot;deviceNumber&quot;:&quot;8616&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTJPREUyTml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LmN3d1VYYmFyQ0IyclhtV1hjbHl0VGM5bFVyb2lwM2ZJSVRkYzBZR01UT1l4WnNxaktNVDZvT3liN182c2RCaVgxcmhUbmVXNGZfVFRiMW5qZ21iR2gzQV9VTVY4am9vVGpOSHJUbGtmSmVQLWNVUm9jN21RTzhydmdQcW1BRzNSb0tsc1lmNkc5MWxWQUQxaHpIaC1uNmx5N3B5UmEwNmlWN201UC0yZ2pZNUdfZG5JWG9HSENUOHMtck8yaWo4ZVZVeXAycTBxY3hGaWRYR1BvTzlhU0RQUGoyb0U2Qmo0V3YydjZIcjBlOHZQblFwNVFUSFA4aFJJd0xNblVRMEZpU01CWkhrN1NUdWJua1ZlX2Z6TVJSbUcxZHhSV01DUTN1NFU5WXEtTG11Rms1OE5WNDA1YTlpbkN2MXNQVHZubHlkZ3EwVlgtSjVsRzhyY09nNW54QS4zX0JHZ2RKVFFGSHEwMHFHLmxRU05OTjZTODZuYk5YQmdjbTJHWHdWN0VCeUFZMUtXNTJfUnRuVXpUbDFvOHNnRElpbEptdDYtN1h1WEp0UzFIT24xTHQ5WHNvQzduTllVRDNnOW1qQUJ5SlVWcllEdDBfT3NFM1ZPMkp5ZVU0T1hWV3QyYldBdmVUTzJUUkllZHp5UGtGbi1IUTVNY1pLQWNoaFhPNy1fU2w3Z0xkSlNPTEhtbEZOZUpVVnBnSlIzVVphM2hRdy1wVWpzcUI1dGdnLS1zdDdaZUdCMVBnLTNyQzVNLlFCaS1XZ1VrUEpMSVRsRVVSVENSU1E.jozMG6N7BscZV1HBxptyrDT4oQrvjaWNQ3b3LpO5BiUr58HMTXnFk9SzbvETDgW0zrpKQlwoE2YShGLAhKAA2DmkK1wlRcdLRYAfPDsOQHiegdznlKX9djqrufS6KcMYmaYy6Y--znwmCd8iZZDBd43DTYdXGix6VSjgOX_pD9qrWS6NvDh_sfxM8Se7EiYiRhBPTLJ3gzSr4Sd3RV2SjGRP_TARupPJzZb_MRuOon7dkhziNLeAVyM_zoEh6nGbWwxwMszKXHIpJ87ScgX5pAtZXxXoEN3E1fNvaSRa03D-PA92kweTHOErb7pKz6Sov6y7Szhe3T9tuUil6SGqEg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.1/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def errorCode = response.errorCode;
if (errorCode!=&quot;ISE40006&quot;) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Failure response errorCode: &quot; + errorCode);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility (encryptedData=?)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def profileID = response.cardMetadataInfo.profileID;
if (profileID!=null) {
	props.put(&quot;profileID&quot;, profileID);
} else {
	props.put(&quot;profileID&quot;, &quot;###_NOT_FOUND_PROFILEID_###&quot;);
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Failure response cardMetadataInfo.profileID: is empty&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkEligibility (?)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832001&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42001&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ESXdOemczTWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LkxaUmVTcmVyWFo1aTVhbmRDVURKcWFLaGk2Q3hwV0lCam1FMDV1b1NObWNMQk5hTzkzNjc4cXU5cDIwa1FsclAtV3FKQzhWYVdsZW5OcFh0QjU0VTVTZkZfbEI3SkViUWNOY2I2NUM2RHRoZF9QbmlicmxfU1dtSDExRVc2Y0NxOHIyS1RoZ0lySzFOODdDc1JlcjZVNV9oRmM0LWtnWWpOdkVNbXh3RjljeVZuSG5HUm1XYjU0WVk5dEkwUFdIR0pWdnhodkp2ejQ5aWlfTUdQTURUX0g3emp4Q3VYSTFDU3RYZjZVb01qR3VkNGY4S0duWTRDZ0tkWXdUblNkUDdnX2pTbzNIR0N3UThiNjM3c0xYdDNwakprNXlmSS1kdTQ5Y0t3OXk2NWpQejZZNTZvenVncWhnQlYwLWt3RG53TWFKWTVfenV5emVlbXF0RWlIaUlKdy5uTzhURzhuNjZSV3hvMEFHLm5jR1pRR3FqSnA3Q1dPc2VFQ19VN3h4dnlUR2NodUhYdHcwZEFVMnpkNE1FbDRoWGZMbFJJeUo0TDVCZ3BZUkdPUEpzLXZ6QVZERmtGU3U3T1VaZ0c0VWdvb2JzNlpmbUUyM1ZqaXA4cFlqZF9UZW4wM0laaklQaFFVTHFwRFM1bVYwRW83c1V4UGw1VDBkcW05LUo5Vm41U0tXc1BmdUVyYS1jSXNoM0lhQUxsMXozd3Y4aUZPSmQuX0M0eEZ1aVlIeFI5dWUxRXpqZFVrdw.vs7BotfYwP-NnaXyz_hTEJk5kjLRS_uG1Vbr-01jP4xK-jpfVv_KJ6hhDEt5QzfWZEACLNJ3YRl6hr66HWz__z2ACqv8K-ZHKZsZI4K11zljoFelLU5QkTd5neK83Lq8x2Tp6fIu1A5pPcrIeAb9RTRYNMxeVy-dn1b2EElIbMqa5BYhj1ej8AiQR6xdHsiSt8E9lZe8Du-XaSyhZG-ODHvlnfiFgN4zKlxsK7Vd-ByrDLUoFpw51CXsbvimsPn6CDL6ePt1UwSm_VxymFC7j5YyGhZC9JY3qfx4K8GIJbTzK2XxwxldFmX3i4N4N9FxpT4r-L6OA7ugdIrWHqbMPg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def errorCode = response.errorCode;
if (errorCode != &quot;ISE40001&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response errorCode &apos;&quot; + errorCode + &quot;&apos;&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1326 - Case 15 = 400) new (&quot;Request contains invalid Json payload&quot;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832015&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP62015&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$15&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42015&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8615&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTJPREV3Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5Llo1bGtZdWsxV1gwalFJZ0U1bVNZRnRfYTkwb2hHUXF5czBOTlk2czZsOW9Xclp4SlJGNGdpa3kzMmVaa1NkMXBUMk15a0FDM0lvZHJXSnY3cVZyRmRMeHBQX2NrdTNocDBGOHp3ME56cExNSTJLSEx2YnY5YTNFRy10dHdTV08tejhnT25Ha2tpaGNZMUVVNXRHZkR3UkJza0RsOTNKVGNwOXdGbHhFaG80dXNfY2RjMjdoeUw0SzNNUHk1c3VRYllTRkhVUDd0TThidEg3Sl80WTFUSExDS2Q2QmFfOTdmNmZoSEM1RGtCa01sTEdFZWVDdGw1MWZhemdHMlNmaHVqdVlWa2FiYlRUWXZqRFRCWFpNbVpPM0FNLWJVU0dQc2tpQWREWHZSVmp1cVdEeXIzX2V0SnNLLUNRUEhETXJfN2hpTTVJZTlKLTFEUTRIOEFCMjdxUS5RYmNKZVU5dmZOUVdicThpLnEwcGtTNDJTWUp4eE1PS0FfNzRjNGtsQ0V5eF82bC1Kc2VrMkRQbEFLd1FPak9WcG5UajhEbWhxbGZxRldBQ3M2eW5xZUhZcEtGYnNNcGxGTk1fWVE1R19UOU5IQVdQM21nT0NpS3pkUTZvSk94RTVnRTVuTlk1d1lGOHJLeWhWQV9yQnhjUzdSa0FWLXQ0aldUSnQ1T3p2TWp3MlJNc1dFeTBZZlhWeDB6RmtlSG9MVVQ1MDBWeldfQS5VWW1KYTIyRVZPWWFKR19YVGxHbEZR.bOZPorHEoYhEFQTWz9Iv6KneULkGdKIUfDfDLoqpfcKcEStiNy-QANJZ18RakN7SjIc-u0x2K1CUOvCq5Fq3U9Fdrzu8DSUl6EIxcj_JpIXa0EZtHyxRSlJaMTVTFTQUuX3e4nKhQW_lLw5ERciYLnGwPQBiJJUwTLZdATN5x5yl0aomy663a4CP1wvDJscuc-Zxe_r0GK1ScQMVP3th7kRsm54t3hPDJjwbxsN8oJkPqWPjceScgntsmSdkEmX6NXUbywxh-8-cJgZiZSP-XJtgfvQIfnxgAbL6wWt2qlfwaMNvVfP7B-oU9VXOqmO4bJn9TknLjnlr72b1Xs5FHg&quot;this_is_invalid_json&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.6/v1/checkEligibility</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Approve Provisioning Stand-In Notification" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="approveProvisioningStandInNotification" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3020003291118627884807&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;3030303030303030303030303030303030303030303030303030303030303030&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;ONG07v5iEK1YSVAiZDY1w6Ax&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJraWQiOiI3MTVFQTI1NyIsImN0eSI6IkpXRSJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2SWpFMU56azNOalUyTVRraUxDSmhiR2NpT2lKU1UwRXRUMEZGVUMweU5UWWlMQ0pyYVdRaU9pSTJVRmxSVHpkSVVWSXlSa1pRVWxCV1VFeEVTekV6UTNCamNVWTFSbXRvU3pseVFVSlZlV0phYWxCUVVHdHhWbnBSSW4wLmVTNDJnX29jQTdpd216bl9jekE0RG8tU05mYTZzNjNBckluX2VUVGtXZ1pnSGQwS2E3LVByYURiYVFsQ0pYVWk0Yjg0UHY1Y2p5ZjdUcU1JUUxCeW5qQ3FzNXZIMjNXQzVBQXBpTnFPNE42WTBtQmNmbGdGa192ZDBhX3dERUJCeTB1VTdBeldzV3VubEMzM05hbnBiREN0by01bHJncjVkeF9Sc2llUTRXZnJudEp3RF9vY3drWndET09XQ3ZDbU9vT1V4dENQTnRBU1NYanFqX1dTRi15YU1TRUNnb1dsQngwTFpOaWJHdmRkQXNudmxNQjlhclZHcElYWUFudmZRLUVlLVRlRkIzNjlQWlFKY1o5WVFwbTMwQURFa3U3MlBrUzQzNjA1QTAtVDd6UnFFOHMtWkRCSVk2STFEeGVLSGRfNnZBMzNfVVBhSnBlRGFxdDRtQS5YeEtqZVhmZElzZW1pMU10LlBobHZ1bGd5T1ByWmc4NXJfRzhiaEFUSDNISmV0RTc0M0lRaFpVb2Q3aFkwZVlLOWJ4ZHNaQ1N0T3BEUXBTc3NRNVl3b0YtNFBWc3pkQjk5OFJoUnhZSmdhdkFlSmdLcGlBUGFPUDFhdjhWZExoU0JKVFBRR2NPSnlxMXRVTGRFaV9VbkRKRFI1dlF3a1FaMHRERWYyaVdLMHAxYVVSLUZmcGp5dUk0X1ZxNXR2ZEpvSDVUZGRxRFZlZTJCbHVTQjA5RTlDeGlnNkdDSVZsZm5Scnp3bGF1OF9MOVE5OGMtWGl5YjlleHJtVEVDQmVMU1VneDV2dW9veDQ1RFduMHp5VUlLWHEzb0Z2a0VBeEtmdS1BTkVYZG0zYjFfWmdOTTZRU3ZaOVZpNGtoTmFfY2NoU1AwOWxLdllfR2pNS2FBQ2R4NFhacC1vQ1ozOFBuNkVacE9WYUYxMnlGcXVYN25WVC1KUzBrdThhTHRnYlJhSW1QRW5rU3NoMktGSTRIUjdXbEkweW9GRG5Qc04yZVJQTkRVc2JvMXZYZ2VucmNRZldVOWtvRkxyUEZLTEhBMEIyUWVoY19VZnhJeEhVbEt1UWJoc2t3TnMtV1YwekIzZHd6OXdYS2UyX0RPLUdGSkd5ZTNURU5ZLU10ZGh1bHdjUGtTX2Z4TVhyYlg5ZEc0dEI5Nmg2NEVJQXpmanhRbW5OZ2R2X3Z5RmhfbWpMam9HbXVySDhQWFdNelpBOWFiY3pnMWJCdTRlRlljdmxKLWwzYW5OV3lyMV9qbDQxU09nZjVuWFo2T0x3aW04RkpORWJ3RXdhTWFOdmlBcHppem5LNm80TmxNeFc4Ny1LSTR4SnRGb0xBUFNVS0FJckRBQVBTRlR4VE9FdEVsSllrd1hBLkZ3MTV0a1pFMXBRT21jdEJPdUpwOHc.ewfB3pRmx6rHn6AlXvK2txQjXqmK9R5ic8IEEEvLDoNkMDBgVSpMxxsFsQUMcWlLm_NO9BITTQthtZpeVn8T5lbkxALTgO0zPZQ8QTbRjAP020fXoLLBw2ywLVFB7_gWBvqycZ0MGHJb84r8BOG4SFDkU9Mi51dATCsFgcSj7Kc4TMjK_7NhvRHo3ta0jE5lcZRi_AS46NcGA19ZzUi8SdyS1J7QHoAXDCp8AXkA_3_HpQLXmPjG759tV5c1vEwI2WSguCXWoUXymqzxJoAAysUh_62cfs9HKbqf6FXo82tAQS4Ok7RR5kI8PIEoNNiXDOOTtSOZm1gTCuc9otw&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;fT-SMxNUm_JJg1jMsyhoM3tM&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceName&quot;: &quot;ZGVmYXVsdA..&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+1/+103&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;198.241.211.21&quot;&#xd;
  },&#xd;
  &quot;lifeCycleTraceID&quot;: 300023280021674,&#xd;
  &quot;stipReasonCode&quot;: &quot;9027&quot;,&#xd;
  &quot;actionCode&quot;: &quot;05&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2020-01-23T07:46:58.000Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000001/tokenChanged?eventType=TOKEN_ACTIVATION_STIP</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">//def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="approveProvisioningStandInNotification &lt; cardholder_verification_method" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM cardholder_verification_method WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">cardholder_verification_method</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="approveProvisioningStandInNotification (CONFIRM_PROVISIONING) &lt;" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;CONFIRM_PROVISIONING&apos; ORDER BY id DESC LIMIT 1;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.confirm_provisioning</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object history = vars.getObject(&quot;msg_history.confirm_provisioning&quot;).get(0);

String cvmCorrelationId = cvm.get(&quot;correlation_id&quot;);
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);

boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(cvmCorrelationId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&lt;/name&gt;&lt;value&gt;0&lt;/value&gt;&lt;/code&quot;);
if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found conversationId `&quot; + cvmCorrelationId;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="approveProvisioningStandInNotification &lt; token_info" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int cvmSize = vars.getObject(&quot;cardholder_verification_method&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || cvmSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows &apos;cardholder_verification_method&apos;: &quot; + cvmSize;
}

int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows &apos;token_info&apos;: &quot; + tokenSize;
}

Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenRefId = token.get(&quot;token_ref_id&quot;);
boolean equalTokenRefId = tokenRefId.equals(&quot;DNITHE000${tokenReferenceID}&quot;);
if (!equalTokenRefId) {
	Failure = true;
	FailureMessage = &quot;&apos;token_ref_id&apos;: &quot; + tokenRefId;
}

String tokenStatus = token.get(&quot;token_status&quot;);
if (tokenStatus!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: is not empty&quot;;
}

String cvmPanInternalID = cvm.get(&quot;pan_internal_id&quot;);
String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
boolean equalTokenPanInternalID = tokenPanInternalID.equals(cvmPanInternalID);
if (!equalTokenPanInternalID) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: &quot; + cvmPanInternalID + &quot; = &quot; + tokenPanInternalID;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is not empty&quot;;
}

Date tokenDigitizeDate = token.get(&quot;digitize_date&quot;);
if (tokenDigitizeDate!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;digitize_date&apos;: is not empty&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Token Create Notification (pre)" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (DeviceInfo=UNKNOWN #1)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU9EUXpORE0wT1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5Lno1Nm5Na3g1bldhU0RwNS1NcTNsaXlTT3lNdzBFa3VMaXNSbkNHMlV6SVAtWkpqVjNvNklYYjRCVzIxbFNzLW53S3FTQUt3ZzFGUkZZZmZFdG4tb3RmLVpGVDNvM1JNTk52dENLYmFKcnh0d3dkTGhqNGFoUzY2RlV0VGtMdm5YZm1Yc0U1dFhaV3lQQTlGUll3aS1jZHR0dGhjQWFkSjBETmM1VEFIS1E3Tk9BdWVRU1d2THRRZ2haVXpCSHJheExqUzV2empMTEhxOGJ5aExEVllILVZZSVVFVVpLQXRUWGk1d3N5bDVPNDZXN2VWRjc1b1lOS3Q3bWthdm1BX2drOWpnTWpaREVER2pUenUxclF4ZUtyai1EVmdYT2dKbk82cTlFZDcxRUJGaHdQXzBiajRVTXFlQVd4d2lMS0ZmdFJtNm9PVDR5eE9QLW5hQXB3cDVfQS5oQ0UxLVEzSmdhRkNqMEhtLldTYkxjRjI2MFpLVkx0OEktdmR5cUZQNmQ5ZVk5ckxENUhLNS1mcWNfalFUREdZRkV6Q1J6SG1DNHV1YkhWYm1aX1RGNlVOc2xhRmhTRWprWHVLU1Nwal81dGpiNThfbkNhZkk2UTU5ZFVzeFpUM3JYVnZ5NXAtZG5rS0R0dVZ6eTdfMzExQmY0LVVlWFFSd0l3TVNlSHVGbkEwU2t4R2dmNlpSeFdneUltczBlTjFXRFZMYWxINVotTEFJTjV1UmhXTk84cWNhenp4MUxxbUtRUFVEcmQtU1NmcmRPMVNnTGVUYUpGbkhrbDZZZ3FWdlFUMmV5WUxLaGxyODNJRGFOQXlsSmItWGpfLS1VRmhmV3NOWmMtRUctQ3BQSDZULUxqYm5RYW5ZbFVGQkJvUndLc0ZwM2dUa3M4SU5UQ1k5Z0pacnJOTUtFMFpmQVFVRFJHLTlycXdZUnVOSVN3clFkbUEyTWozNVFCUTVQMnlFOEtoMFRHYVFHZmU1b2tBSEptUjRzajVCNVBnajZpUGZseWZaNE9CVURGWldtS2l4SEQ5dmJNSFlfU0lteTFvMEhaMDJjXzlRdDFZZGhweko4dGlhWms1MDJPUXF4Q3h0ZW5ZeTZaU042dGk3NzVVNmtlcGZ3dWlWZlRnRWdUbmdsaTVnbUpyYjdUejZUSlVUblBhOU5fMFhfMktHMHlnRS1pX2FXWTBwOFFvNW9RZW1YcmNsR2hxRGZwTVhOQWVZeHpZSEVrOWlmcy1WTXNHa1NrOFM0cHotRHRqZHZVc2E3TUxiQmRFWmtDc2tfTDgtWHZFUGtHMVVrSjRTZEcyU0FybDN6YzZaV3VlZnlWbWR0RElYQnRDdklYYV9fZUt5R01WVkRkN2ZuSFlGSVNTVGdlaS1rcHFDY1pmWVdyNnhIeG5YTDJkUlFFQk56X0MzazltT09zRDZDbzZWYTNicExJZEhBcldGUmV6VGltSTh2QVNJdG9GQXdHaUs1bGdCaE1YZk5UWTEyTHBZN0NzRnRuOExEZi1RV3JKZDFoaTBCdWs1Z2tGaWhtVEtqVlA1Q2ZwMDVSZ1kzNVUzYVI5RDg3U1U3UWF4ekQ0Uk55UjUwT21Hai1hNzhwc2xUb2pfa2lEa2w0SXNXWS1nRkx3dm5STENRakJBSkkwWm90enk1dzdHQTJLaE1YUm03R0JxYnJHbnN2bGZfYVA3aDdHWnVGeUdRTExhQTViMm9jTEVrcmFJaHhlQ2MwS2JUQ3cteHBKWEs0Y1FfdFhQdDJEeXNDVURnWlBXeGVZUmp6dERPZHVTeXdzeENmNFM3eXJJNXlGemRMa0lTWXAxTXhqOHpiTzRSVmZVWHhqOHNSNi0tMzNrLTZ0ZEhzNVdPeUl6ejJoRHpVekMtM09uQkhtVUtiemhmSV93ZEFpdDlGNkN0RmhsS003SlVWbkZsVU5neWl4R3J4S1lTQVByNG9sN2NTLVVySjlwUW9SNkdSVHJGN29yenBHcXh6YUt6cVZqZHJhS25YbXBTS1diYlRVUENOUVhyQmZQOWZUZXFrc1NXcTEyRlR6cTFPcVpjN3NodEtFT0NUSjVSX3lSUUdGbHkyTi1NTHQwd2w4cGNzdkJJUTdYblpfWkUtM21lSDFYZE1DNzcwQ215ZVkwdEh1RTZ2VFBZanU1ME9vNXpNWXQ0N0YwcW1SRHdzN3JZNDBHTE5rUDBJY2dEYjVPMDh5NGR4ZndFcjZKQl9rbnlZQnR5LVNNS0tXWFpSZ3Yxb3RQWVhfOF9NbnAtclg5N0trTExOeHRvdlpfYkpPWm4zb2xvVVlRUmNsbWRhNFR3TUFvOVA5RDhaLURZekJIeXRoY28zdVA0dDI5UndET2F2SGVXVkgzZjFYVlNzb0VOTU53YWpMb1ZqTjluOWVoQ1d1S3oybW9lUzBpdkctVVcwaVI1OWxhWVV3Nk1nZjFuYTlUUjhlVTJBNEo5YWs0a3lRQ3BybmtvSHVQZUpfWnpCQXFqOUk2anNHOWhMeWg4SzRTZVR0N0lZemFJdjhyZU5UQkllenFFX2NfMUt2UDctYlg2NkhONndpQ2t0RzRnMDFfcDhaVGh5T1RpNk1xLUtVVjdlMk11eGV3YlBHaTk5d2NQNjZwdFJHNElGX0hpYWo2WlVXTmlzMTNBaHZvWHA4aHJ5M0QyTWFDMzZUTy1sS2dXUmx3NDBpNmQ0RlhZNXZLOHIzdWRoUDNacUV2bEZNQThPdkVscmZRVkRtVHRjcDFlYXJlNHZSSTdCcS1mNnNicTBIX0wzeWtXczU1cnozQ3pzSzBFMXJvcnk5Z2ctTWRySHlhU0xzbDd0QVEwSXB0dFlTUFpkeVMzOXd4bE9lNHpEQjhfbl9DVVhJSFNBX1F1NGh0Z2pjc3ZuMUs3Y0dERmt5WWszTDlmQ0t6ZndrTGhTb3g1MllrNG41RG05SEhOR2JBZlJGcGtycEhNX1RYem5xRE4xSV9fTUFDVGRqZ3o1OGdiUklJdFJ6bzRncFNsWmlwV0lVNzhyNXZwcFNTVDFxSFpGSFpGejQwZ2V5bnNhSUhSX3BneTUyeC1SSGNhNFF3MkQtR3llWEN6b09rRUdoU04xQldkQlhfcHJkV3RTR2FOeTlPQ3Z1bHZ2VUdDbkQwOXVtcjdJNjFEQTRGZVlPaEtOOGVVc1I0QjJocTNyR28xdnVyNmE2MFhwMjlKaHVMbEhhcm1LbkZJOXlSdHUzNHJVRVltVEFXRUtmeDEyOEpJVUFRUWM4QmJtQ0F0b1VmandRTGhuODRra0IwX2o5eUpGdmNXTjZWdVR2cUljNXRJR1NRc2RFakdZM1luOS1QZl9HZnFmUFRVS0NuelZQVkY2V19nZTdiYUdHa29BSXNBY0RoX01IZVhRYkN5Vm5jbnBFbkNHclNLd0t2WjcxTEZtYldrVkowTnJpdS1BSmZNOFlwSU9XV0xqMjVPVml5UFJLRFlaSGVBZWtnaG54TVVqdFJtd0Z4MndFM1owTjF3dGVpM28yZVZ0QjhHR0pGLUp2YmVFd3F5MUl4STZvc2RxeVFXandKcFpvSDcxUHFlS0c3aHVjS3ZCc1pLRjhaUmx4QkR1SlBjZnBSb3BWWHNpTVNxRUNfUmZLZFdQYmdVUGRYN25ZYWZVMkN4YzM0MGNSaDVTWm5aNklLQ2l1c05kcVRoV2JONkZzb0dsaXo2N1drTDFBNXBKdjBnZTlPdWNuVlcyU2kxdkE5aDdEUXhJOVlZblVIUkZaeGFUTDI1blQxSUxGbG00WXVBM2JXcHJmVjNhdDBBV09DTWZDZU9WeGVkd2p3VXp3ZFM1YjhwNy12dkhxUDBYNlgyMUVLZDd6X1htS3NjZ2J4eWhCRWpDcEIyY2JIbXFfX25UZHpaakdjemNac0IzYjhrbmFUU1B3YnlzYkNoaU0wOW41QnVvM3lKWFlBaEp5NHFxb1RCZUIzSWZIZkI5Ul9CNXhaMmw5QWMzdlV5bGE5WUkybHlHUmxfbU5KRkZaZUJjTzlYeUptMVF2ZUtYWjZXZVRlY2NfVkVSR1Z2MkM4Q3hPSFV5RTVyVEhjOTNOc29odlA0VURFRERGYzYwSFd6VXBYMjJCaEJla1VOMVFLbzI1T2tXT2dmZUdHNnZQYmE0eHJnY2Q0R09oNjhhRm81dzE0emlBcURLcE92b1FOV2o4OWVpZVhrMnQxbHhnWFQ1WHpTOGZEaFQtbmJGdTkyRjZDT081aDQ5QTE3dzhoYWwzSHl3d2F4WHF3bUVvcVhhOUxVRkxtdUFNWUxlbTBDSUlNUURtRmtGUG9KMXRfYUFEbGhpSzRJRzB1T3kzRzVlR016ekt5VGVnNC5WNVc4SlU5bGNmbVpOVVlmTjFVa01B.TrBOk81h8G5jnodBg5ICPNciIsJ0n0VHlWwmT7WAxyVRvsaTVngQIbMy7x2sAMjx-0Nn1n9jrZu_H1qemyxVYJQL0IpqOt_wSiO8j9XmhcvFZ7Etl1PEZWJlTvQRa5WF3RsAFZAWSer4vFkz5gaOMuSkdTvLpj24NR2dfuu5dWoy6ys5kyAyuzEIAB2frgBOQxdujGluFjfFcBiGDuksDeg4Qmo6hFb1ouAtfyUy0PzCmwBd5c0ky-QqXeW4B5XUz8j20BYhoalVQtjS04CyNspg3RXyOqvHV5PfppifZUR8DjVGfPcirnuCk72RHCB7qgWaDJGTi4lCXjHMeB54Dw&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;0414103B864980018088017685946200D290CAE7D7860CA7&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceName&quot;: &quot;RXVnZW4ncyBpUGhvbmU.&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380952711598&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+52.14/+4.51&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;171.33.134.77&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (DeviceInfo=UNKNOWN #2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU9EUXpORE0wT1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5Lno1Nm5Na3g1bldhU0RwNS1NcTNsaXlTT3lNdzBFa3VMaXNSbkNHMlV6SVAtWkpqVjNvNklYYjRCVzIxbFNzLW53S3FTQUt3ZzFGUkZZZmZFdG4tb3RmLVpGVDNvM1JNTk52dENLYmFKcnh0d3dkTGhqNGFoUzY2RlV0VGtMdm5YZm1Yc0U1dFhaV3lQQTlGUll3aS1jZHR0dGhjQWFkSjBETmM1VEFIS1E3Tk9BdWVRU1d2THRRZ2haVXpCSHJheExqUzV2empMTEhxOGJ5aExEVllILVZZSVVFVVpLQXRUWGk1d3N5bDVPNDZXN2VWRjc1b1lOS3Q3bWthdm1BX2drOWpnTWpaREVER2pUenUxclF4ZUtyai1EVmdYT2dKbk82cTlFZDcxRUJGaHdQXzBiajRVTXFlQVd4d2lMS0ZmdFJtNm9PVDR5eE9QLW5hQXB3cDVfQS5oQ0UxLVEzSmdhRkNqMEhtLldTYkxjRjI2MFpLVkx0OEktdmR5cUZQNmQ5ZVk5ckxENUhLNS1mcWNfalFUREdZRkV6Q1J6SG1DNHV1YkhWYm1aX1RGNlVOc2xhRmhTRWprWHVLU1Nwal81dGpiNThfbkNhZkk2UTU5ZFVzeFpUM3JYVnZ5NXAtZG5rS0R0dVZ6eTdfMzExQmY0LVVlWFFSd0l3TVNlSHVGbkEwU2t4R2dmNlpSeFdneUltczBlTjFXRFZMYWxINVotTEFJTjV1UmhXTk84cWNhenp4MUxxbUtRUFVEcmQtU1NmcmRPMVNnTGVUYUpGbkhrbDZZZ3FWdlFUMmV5WUxLaGxyODNJRGFOQXlsSmItWGpfLS1VRmhmV3NOWmMtRUctQ3BQSDZULUxqYm5RYW5ZbFVGQkJvUndLc0ZwM2dUa3M4SU5UQ1k5Z0pacnJOTUtFMFpmQVFVRFJHLTlycXdZUnVOSVN3clFkbUEyTWozNVFCUTVQMnlFOEtoMFRHYVFHZmU1b2tBSEptUjRzajVCNVBnajZpUGZseWZaNE9CVURGWldtS2l4SEQ5dmJNSFlfU0lteTFvMEhaMDJjXzlRdDFZZGhweko4dGlhWms1MDJPUXF4Q3h0ZW5ZeTZaU042dGk3NzVVNmtlcGZ3dWlWZlRnRWdUbmdsaTVnbUpyYjdUejZUSlVUblBhOU5fMFhfMktHMHlnRS1pX2FXWTBwOFFvNW9RZW1YcmNsR2hxRGZwTVhOQWVZeHpZSEVrOWlmcy1WTXNHa1NrOFM0cHotRHRqZHZVc2E3TUxiQmRFWmtDc2tfTDgtWHZFUGtHMVVrSjRTZEcyU0FybDN6YzZaV3VlZnlWbWR0RElYQnRDdklYYV9fZUt5R01WVkRkN2ZuSFlGSVNTVGdlaS1rcHFDY1pmWVdyNnhIeG5YTDJkUlFFQk56X0MzazltT09zRDZDbzZWYTNicExJZEhBcldGUmV6VGltSTh2QVNJdG9GQXdHaUs1bGdCaE1YZk5UWTEyTHBZN0NzRnRuOExEZi1RV3JKZDFoaTBCdWs1Z2tGaWhtVEtqVlA1Q2ZwMDVSZ1kzNVUzYVI5RDg3U1U3UWF4ekQ0Uk55UjUwT21Hai1hNzhwc2xUb2pfa2lEa2w0SXNXWS1nRkx3dm5STENRakJBSkkwWm90enk1dzdHQTJLaE1YUm03R0JxYnJHbnN2bGZfYVA3aDdHWnVGeUdRTExhQTViMm9jTEVrcmFJaHhlQ2MwS2JUQ3cteHBKWEs0Y1FfdFhQdDJEeXNDVURnWlBXeGVZUmp6dERPZHVTeXdzeENmNFM3eXJJNXlGemRMa0lTWXAxTXhqOHpiTzRSVmZVWHhqOHNSNi0tMzNrLTZ0ZEhzNVdPeUl6ejJoRHpVekMtM09uQkhtVUtiemhmSV93ZEFpdDlGNkN0RmhsS003SlVWbkZsVU5neWl4R3J4S1lTQVByNG9sN2NTLVVySjlwUW9SNkdSVHJGN29yenBHcXh6YUt6cVZqZHJhS25YbXBTS1diYlRVUENOUVhyQmZQOWZUZXFrc1NXcTEyRlR6cTFPcVpjN3NodEtFT0NUSjVSX3lSUUdGbHkyTi1NTHQwd2w4cGNzdkJJUTdYblpfWkUtM21lSDFYZE1DNzcwQ215ZVkwdEh1RTZ2VFBZanU1ME9vNXpNWXQ0N0YwcW1SRHdzN3JZNDBHTE5rUDBJY2dEYjVPMDh5NGR4ZndFcjZKQl9rbnlZQnR5LVNNS0tXWFpSZ3Yxb3RQWVhfOF9NbnAtclg5N0trTExOeHRvdlpfYkpPWm4zb2xvVVlRUmNsbWRhNFR3TUFvOVA5RDhaLURZekJIeXRoY28zdVA0dDI5UndET2F2SGVXVkgzZjFYVlNzb0VOTU53YWpMb1ZqTjluOWVoQ1d1S3oybW9lUzBpdkctVVcwaVI1OWxhWVV3Nk1nZjFuYTlUUjhlVTJBNEo5YWs0a3lRQ3BybmtvSHVQZUpfWnpCQXFqOUk2anNHOWhMeWg4SzRTZVR0N0lZemFJdjhyZU5UQkllenFFX2NfMUt2UDctYlg2NkhONndpQ2t0RzRnMDFfcDhaVGh5T1RpNk1xLUtVVjdlMk11eGV3YlBHaTk5d2NQNjZwdFJHNElGX0hpYWo2WlVXTmlzMTNBaHZvWHA4aHJ5M0QyTWFDMzZUTy1sS2dXUmx3NDBpNmQ0RlhZNXZLOHIzdWRoUDNacUV2bEZNQThPdkVscmZRVkRtVHRjcDFlYXJlNHZSSTdCcS1mNnNicTBIX0wzeWtXczU1cnozQ3pzSzBFMXJvcnk5Z2ctTWRySHlhU0xzbDd0QVEwSXB0dFlTUFpkeVMzOXd4bE9lNHpEQjhfbl9DVVhJSFNBX1F1NGh0Z2pjc3ZuMUs3Y0dERmt5WWszTDlmQ0t6ZndrTGhTb3g1MllrNG41RG05SEhOR2JBZlJGcGtycEhNX1RYem5xRE4xSV9fTUFDVGRqZ3o1OGdiUklJdFJ6bzRncFNsWmlwV0lVNzhyNXZwcFNTVDFxSFpGSFpGejQwZ2V5bnNhSUhSX3BneTUyeC1SSGNhNFF3MkQtR3llWEN6b09rRUdoU04xQldkQlhfcHJkV3RTR2FOeTlPQ3Z1bHZ2VUdDbkQwOXVtcjdJNjFEQTRGZVlPaEtOOGVVc1I0QjJocTNyR28xdnVyNmE2MFhwMjlKaHVMbEhhcm1LbkZJOXlSdHUzNHJVRVltVEFXRUtmeDEyOEpJVUFRUWM4QmJtQ0F0b1VmandRTGhuODRra0IwX2o5eUpGdmNXTjZWdVR2cUljNXRJR1NRc2RFakdZM1luOS1QZl9HZnFmUFRVS0NuelZQVkY2V19nZTdiYUdHa29BSXNBY0RoX01IZVhRYkN5Vm5jbnBFbkNHclNLd0t2WjcxTEZtYldrVkowTnJpdS1BSmZNOFlwSU9XV0xqMjVPVml5UFJLRFlaSGVBZWtnaG54TVVqdFJtd0Z4MndFM1owTjF3dGVpM28yZVZ0QjhHR0pGLUp2YmVFd3F5MUl4STZvc2RxeVFXandKcFpvSDcxUHFlS0c3aHVjS3ZCc1pLRjhaUmx4QkR1SlBjZnBSb3BWWHNpTVNxRUNfUmZLZFdQYmdVUGRYN25ZYWZVMkN4YzM0MGNSaDVTWm5aNklLQ2l1c05kcVRoV2JONkZzb0dsaXo2N1drTDFBNXBKdjBnZTlPdWNuVlcyU2kxdkE5aDdEUXhJOVlZblVIUkZaeGFUTDI1blQxSUxGbG00WXVBM2JXcHJmVjNhdDBBV09DTWZDZU9WeGVkd2p3VXp3ZFM1YjhwNy12dkhxUDBYNlgyMUVLZDd6X1htS3NjZ2J4eWhCRWpDcEIyY2JIbXFfX25UZHpaakdjemNac0IzYjhrbmFUU1B3YnlzYkNoaU0wOW41QnVvM3lKWFlBaEp5NHFxb1RCZUIzSWZIZkI5Ul9CNXhaMmw5QWMzdlV5bGE5WUkybHlHUmxfbU5KRkZaZUJjTzlYeUptMVF2ZUtYWjZXZVRlY2NfVkVSR1Z2MkM4Q3hPSFV5RTVyVEhjOTNOc29odlA0VURFRERGYzYwSFd6VXBYMjJCaEJla1VOMVFLbzI1T2tXT2dmZUdHNnZQYmE0eHJnY2Q0R09oNjhhRm81dzE0emlBcURLcE92b1FOV2o4OWVpZVhrMnQxbHhnWFQ1WHpTOGZEaFQtbmJGdTkyRjZDT081aDQ5QTE3dzhoYWwzSHl3d2F4WHF3bUVvcVhhOUxVRkxtdUFNWUxlbTBDSUlNUURtRmtGUG9KMXRfYUFEbGhpSzRJRzB1T3kzRzVlR016ekt5VGVnNC5WNVc4SlU5bGNmbVpOVVlmTjFVa01B.TrBOk81h8G5jnodBg5ICPNciIsJ0n0VHlWwmT7WAxyVRvsaTVngQIbMy7x2sAMjx-0Nn1n9jrZu_H1qemyxVYJQL0IpqOt_wSiO8j9XmhcvFZ7Etl1PEZWJlTvQRa5WF3RsAFZAWSer4vFkz5gaOMuSkdTvLpj24NR2dfuu5dWoy6ys5kyAyuzEIAB2frgBOQxdujGluFjfFcBiGDuksDeg4Qmo6hFb1ouAtfyUy0PzCmwBd5c0ky-QqXeW4B5XUz8j20BYhoalVQtjS04CyNspg3RXyOqvHV5PfppifZUR8DjVGfPcirnuCk72RHCB7qgWaDJGTi4lCXjHMeB54Dw&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;0414103B864980018088017685946200D290CAE7D7860CA7&quot;,&#xd;
    &quot;deviceType&quot;: &quot;UNKNOWN&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380952711598&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED () DNITHE000302000000000126" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU9USTRPVEEzTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS50eFZMVjNRTHEyaXRXckV3VnNDZmlOcWhmem5IVmFZcnZqR1JaeGdTTm0zQVdycEVrRlRxVXhHWnUycW1nWHhwNUZUV3NiRVF0ZnNEcXB1UlVQLWxqd2otS083WkplMzFMXzNLY0hQTExPSEJ3MGU2Y3U1R3dZTHFMYnRuaU5HUWx2TjRKQ1B1bFBGX2EtMlM0YmRhcFc0R21sUi0zcnhESkRRMHBURkkxT1hzQjNaYjlkQXhGcGNEWTA2d0syQ2FFczBteUZGV0ZPNGt2MHROSlcya25BaDZSZ29TNlY0UTJmdjFvMzEzUXZsSHlXaFB6WENHQmxkMXg3ZWpGS3ByZC1rUV9TNXg1R2I0WGVNRkxJVjl5N2plVE5fQ3RDZXlPdzJlaXg4NHRybEd5dzNXQUxON3EybExWOXhXejN5eXZFNnRhR0hqVjZjekZ1c01QeVdJOGcuWF9WY1RObjY0U1pVc0FiVC41S3hLWG5BU09oYnpxbHhFX0FTbVlkSEVGUnFMeXE2WF9tWi1zaEZaYXlRWjN5Xzl6dXRMOHhHbk1UcW45dU1OdjdmRldlUXkwdHIwYm5jRHlCSklzcWFBU1NQMmRwTi1nWE1NYjAtbzBpbkhKQlk4Ym1aTUFpbUtxWDgySTA0clR4Mkh2WWI1S2cxRjRDMnBna0xySlRncnpta0t5MHV0emxicUhqS1h1Vy12VDBZU1owTk00UFg0enZiR2NwMndlQWpBUTlNS01ld0s5UDdTWmRGcUhMOWRzUlNsNkF5cHMySU1XRDY1dFdWdmxjX3hvWjF3dHRyR1JTcTAxR1dVMGNwOEpxMEg4aUxoaEdvZXJKZjNFR1AxQTEzZzY5Z0IyVU16cDRwS191UWoxYmtFc0N2NVFZM3M2aTljbk04TG12VWlOZ3hoMzZ0UDVfdTkycWlzUHlkanBtdDQ5TDJBQklxUTlvSUtLMTFWbXJJRHV3VEFQME45U3RBODF1bkZETnk1c1N6UEE5TzktMGd5VmJoaUdsOE5mbm51SnNIR1NRRnl0SXk1T0ROanF6N0JUOV9mc2tsTld2LWVsUXVtTERWeWgzRDhHYmJFbUxIODlMdkhkU3RsMFBoTHlnZzJDcGJsSHlRYkM1RzYxSUNwSkhybWxWcFFJM3RjUFFiakNJNlBVSnItaVpmQkRfS28yQTVXUHFhR0FQYlhHNHdndnY2MWRlY1ZCUVlLUURfV1hVV1lSYmEtcFFYY2FtLU93bW9GTnlKWXFCMk1RVGxzN3ZOajctNjUzdmFpTm5qNVJLb013eEltaV9rVl9jWEM0YlB6NjRGQVh5UlB4ellPd3RkcFVPaTEzNGdGUFgyeFpRa1F1N19UYmVXWjZUWm5DVGNaUG1RRDhCNkY4VEhMNGJQZ1lPcnowTVhlX2lOczJzQTdyaVFFUXJjUWpWZ0tWV3hjSlhGUWhsdmNLb3hVQ2JMT3VSTndwLWhUazdEOGpodzlubm1lYkpRbXEzSWVOMEIyRWFXdkJwYUNMUVU0RGRSbkRSOVYyLWh0ZHBZWFZkamlOTkNsOHJYNmFLLTBXWjI2aWJ0UEtGVzhjQlVfXy1Kb0NuYXRDZWR6Y1pLMTQ0QnctaXo4aFFkY2lKUVRXUmMxOGx1QURGLW9meTNyNUUyMm9rTGxqcUVSeVpSYTlZeXpON2lRVWdkb2tLZFctTS1TMkpobDVaenp3TTRrZVhqQUoxWXllUnBOMUhFYldlbzB4anFzQndJYTBwN2ZBOTAwczRvVi1IQnhzWHVPNmFzTWpRazY3VndfZ0xrQUtQSGNLVDI3NnlUdlpsSkhUOU9SRm4xZFNsclhLdDRxcVM1X1lnZW1BZEpRaU5VbklRdldESnZBdXMyUHhycTJkQk81QVdMZEdRMWN0WmYtSjM3cE9TWWtwV2tFRWNDZU5xZVBnUFVQeG8xVFRpcW0wc0JlTTRoR0JVSGxQNmtuYjcwdEJDdFl4TVJmVW1CUWhZNmhhaG1iN3lmcTV5bVZjWnVKT29hOFh1NnF6V2VadGZiNHpCaHpoSm5ZMER5bmhyQzNTQjIyY0hGb0NoZlYzUEhqYTB2dHNpUkVjSVU3R01MRklzUnR1SVdmd0RjMmd0ZlBjUWp0UjgzOUJkRTc5eVpWTWVPdzNWbkpoWndVaU40RzNuYTF1VVdiWUFtWm1pNEdhZVRNQ0xJUTVtcTBxaG5xbmxzZmgzLV93SmpDSXRSbkdCcV8wenJKd1ktcFBJYmxERkd5MEo0T0dNbm1TcWU1TEZsbVZJMzBuM1BybWJURndfQlNncjR2bU1pZXVJWjNobThUZV9LV1NkblZfN1dPWTRRYkFMYjdoRXc3ZHhLYjI5MmpUSTRRcURDOUNpSndpU3JPd3hvSHJUSmUybkI3WXotUTQ3XzB1WXBmLXc0NVVOTm5IeHZmNjM3cUpCNzdtejBjTUhZTDVaUzBzR2hjeW5hREZ5MjRyWHN4Q0hrY3NGZU9sajVBOGVEM01rOUtnbS1JVnBEY3lhWUhvWnFZZlctdm1QWjJoWktFMGVid2NsdzVidENGQXpDb0QwQjFQd3JDN1Q0SjVJZldURHFvVjJ1MU5hbkFrQ0ZNeEp5R1IyOHdwQ3hkdUVNbk91TEhibFNsSEtGSGdIUldyeGMtTDFEVTgxUF9VM0ZWdWdaZ0NPWE8zM1Zac0oxQnc0b3htQmtfa1hqa1lnNTNMSDBxaFctb1Q3N3lNNFFGdVpRVjJwR0JTU0hCSlY2b25JMU4tcWUwZWFQaTI1UnNaaUYxdjd2aVBaYVV4UEg2aXpoOXd0UFJOdFJ0RlBzZklidjRLaVRDNWswNUtQdFVGbHFpbk9tdHBid3UwSHZLUWMwdk5ZUlFuZXVXaDBrdTV2ak1QcHVfQXdLMlFQd3FGbnN4d3B0b1ItYWJuRkpFVmF5Y2F1S1N0RlhJa0FrZ0Y0VUE4Mk4zVkZ4djc3TGdKaWxFZUxsRVdvNEtZQ1BhZ2wzeDRRZ0lwUml5Nm94a2gxeU1jSHdVWUhyNDRfTGFIWEE0WVN0N29NY2M2Y0FSOVBNVEhwaWVHSFI1LThaOGlON3VQdnJfUHdfQTVpUFhqbFg0Zkw3MWNVcmpSQWFxUXIzejB0VDZpTjVjN0YxN2RKTFpOMkJmLVpjczN0LU1zRGVCSFdObUJPVUpuNWNlUjRuRUNEZmJ0SGRMWWtSS2EzNFg2dlNRMHIxZDNZc0F5MmdKWGxLcm1MS0d4Tmw1MU9Oek02YjV3MHhKbnNBOExNaG5TRWdxdHcweFdmR0M3cmNCdFVtdF9jaU5KRGROcm10LUpsSXpVTFVkcEFCWGZ2TVpJczlPR1FQOC12YlVDWDRxX3Z2aXNnWmgtcks5anI3Z0JNMERlSzBoTFZHTnNaanJ2OGI3cTZHV2FOX245cjQxM29jeFpabG8yYXliUlZ6Wks3emV4OUxpY3BtTFp5Y1ZVckRtaUdEMEhlWnRQQ2tLM1hhdlhuTnNmWUg0cjNuZUdGTDV2MjMyaTVFLWJ4LVlici1ma2JrSS16VVJRenkwVkhleTdiaUhEMzJNMkxkMkIyR1FFczdiNXV6SHd4S1czN3U4cG1NU0ZhcEdwZTB5eUlTQ3BiX0ZyMldlQWJEbDNjMkJxeExtMl9GSC0zVTNiY3VCNGkzSjI2QkdON29URDQ0MXU4ZWhkMlU2N1pPSV9lenNaSUVWTVI0anptR0RFYXFzeFZKZU55ZlM0T3lMS044U09ZQlBnOG1FdThiSF85UHJKMkx1bGFPTFZ4V3F6T2RQTFhPMXhjUEM3UUVra3hkTDh6c3hTb0UzV3BrWE1zWTVvRzhUUGpqVEo5VkxidUFOcmlySjNHSnJncG81OWpjTTZzQ2dJVWtRYkpDQVk1Sk5JaUtCaHR6US1qZEF6cXNaYVJscllKaVFjYTFXdmJXWEJZRW9PVHVuaFJncDdwMXZCRlZLYlhCTk9JRzRpUU8tQ3pobzdRQk5oT2pxZGJfT09GV2NnT3BCYlJtdUFMNEc4OXN2Y19zU1FZUVNZbVd5RjBlSDFBbXQ4Rk1CZ3IxS2x4MDVGQ0w0M1ZlUHhBaUh0d1N3bFFSQ2tVdE0zYXhjWTFqWDJnN0V4c3N3ZmhKdGFYNExQbHlCY0I1OGtTRGN2X1AxcElWOFpUc2NVYXZieVVMR2NmNTFtQVdMM1UzVEhMY2pCQ1JNZ1V2bmxzUkZyV1NRaXFKOFFQOUtkeE5acFM0NEw4N2dDS0tPSDVlVjgtSnVpLUdybUZOOUV1cDE4VjNjc1BDcHNKSHI5UllWR2NsVDNOYU8wc0NoUjhJZVBHODQtUS4zRU1aWGZQcTgtQ0s2andjeVFNSGlR.vEYEa_liINproo-kfLftV-1xUDP93CFTAsdbfD40bL8-cV9PLlRN9hAwS_cXZm1DaVakXNYePUt8_FZtFKsJHnv4VCEO6Xd9C5HnHdahRiO1xNd_LPVezw7nUNFHQjSkx4cdaJunZ_byhT-NCp1ZbY0ueKdBx37T0mS6aha4kcr1VZUUVpbUpqf2FNblzOBZQkpGeJlJnNmiQ8gcQEbTFcACitpsEPmK_AOfXxLg2i2Yr11YwimOMKwp3fGNYkrt6yyFgO5IseFki00mlUEQDgQObJDrnHkFakpZZR_dDeVAVXoqipoNHI6lFGsf0jaJ0WSBl7jNukLriLrjbRWHBg&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2021-08-18T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2021-08-18T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000126/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (DeviceInfo) DNITHE000302000000000126" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU9USTRPVEEzTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS50eFZMVjNRTHEyaXRXckV3VnNDZmlOcWhmem5IVmFZcnZqR1JaeGdTTm0zQVdycEVrRlRxVXhHWnUycW1nWHhwNUZUV3NiRVF0ZnNEcXB1UlVQLWxqd2otS083WkplMzFMXzNLY0hQTExPSEJ3MGU2Y3U1R3dZTHFMYnRuaU5HUWx2TjRKQ1B1bFBGX2EtMlM0YmRhcFc0R21sUi0zcnhESkRRMHBURkkxT1hzQjNaYjlkQXhGcGNEWTA2d0syQ2FFczBteUZGV0ZPNGt2MHROSlcya25BaDZSZ29TNlY0UTJmdjFvMzEzUXZsSHlXaFB6WENHQmxkMXg3ZWpGS3ByZC1rUV9TNXg1R2I0WGVNRkxJVjl5N2plVE5fQ3RDZXlPdzJlaXg4NHRybEd5dzNXQUxON3EybExWOXhXejN5eXZFNnRhR0hqVjZjekZ1c01QeVdJOGcuWF9WY1RObjY0U1pVc0FiVC41S3hLWG5BU09oYnpxbHhFX0FTbVlkSEVGUnFMeXE2WF9tWi1zaEZaYXlRWjN5Xzl6dXRMOHhHbk1UcW45dU1OdjdmRldlUXkwdHIwYm5jRHlCSklzcWFBU1NQMmRwTi1nWE1NYjAtbzBpbkhKQlk4Ym1aTUFpbUtxWDgySTA0clR4Mkh2WWI1S2cxRjRDMnBna0xySlRncnpta0t5MHV0emxicUhqS1h1Vy12VDBZU1owTk00UFg0enZiR2NwMndlQWpBUTlNS01ld0s5UDdTWmRGcUhMOWRzUlNsNkF5cHMySU1XRDY1dFdWdmxjX3hvWjF3dHRyR1JTcTAxR1dVMGNwOEpxMEg4aUxoaEdvZXJKZjNFR1AxQTEzZzY5Z0IyVU16cDRwS191UWoxYmtFc0N2NVFZM3M2aTljbk04TG12VWlOZ3hoMzZ0UDVfdTkycWlzUHlkanBtdDQ5TDJBQklxUTlvSUtLMTFWbXJJRHV3VEFQME45U3RBODF1bkZETnk1c1N6UEE5TzktMGd5VmJoaUdsOE5mbm51SnNIR1NRRnl0SXk1T0ROanF6N0JUOV9mc2tsTld2LWVsUXVtTERWeWgzRDhHYmJFbUxIODlMdkhkU3RsMFBoTHlnZzJDcGJsSHlRYkM1RzYxSUNwSkhybWxWcFFJM3RjUFFiakNJNlBVSnItaVpmQkRfS28yQTVXUHFhR0FQYlhHNHdndnY2MWRlY1ZCUVlLUURfV1hVV1lSYmEtcFFYY2FtLU93bW9GTnlKWXFCMk1RVGxzN3ZOajctNjUzdmFpTm5qNVJLb013eEltaV9rVl9jWEM0YlB6NjRGQVh5UlB4ellPd3RkcFVPaTEzNGdGUFgyeFpRa1F1N19UYmVXWjZUWm5DVGNaUG1RRDhCNkY4VEhMNGJQZ1lPcnowTVhlX2lOczJzQTdyaVFFUXJjUWpWZ0tWV3hjSlhGUWhsdmNLb3hVQ2JMT3VSTndwLWhUazdEOGpodzlubm1lYkpRbXEzSWVOMEIyRWFXdkJwYUNMUVU0RGRSbkRSOVYyLWh0ZHBZWFZkamlOTkNsOHJYNmFLLTBXWjI2aWJ0UEtGVzhjQlVfXy1Kb0NuYXRDZWR6Y1pLMTQ0QnctaXo4aFFkY2lKUVRXUmMxOGx1QURGLW9meTNyNUUyMm9rTGxqcUVSeVpSYTlZeXpON2lRVWdkb2tLZFctTS1TMkpobDVaenp3TTRrZVhqQUoxWXllUnBOMUhFYldlbzB4anFzQndJYTBwN2ZBOTAwczRvVi1IQnhzWHVPNmFzTWpRazY3VndfZ0xrQUtQSGNLVDI3NnlUdlpsSkhUOU9SRm4xZFNsclhLdDRxcVM1X1lnZW1BZEpRaU5VbklRdldESnZBdXMyUHhycTJkQk81QVdMZEdRMWN0WmYtSjM3cE9TWWtwV2tFRWNDZU5xZVBnUFVQeG8xVFRpcW0wc0JlTTRoR0JVSGxQNmtuYjcwdEJDdFl4TVJmVW1CUWhZNmhhaG1iN3lmcTV5bVZjWnVKT29hOFh1NnF6V2VadGZiNHpCaHpoSm5ZMER5bmhyQzNTQjIyY0hGb0NoZlYzUEhqYTB2dHNpUkVjSVU3R01MRklzUnR1SVdmd0RjMmd0ZlBjUWp0UjgzOUJkRTc5eVpWTWVPdzNWbkpoWndVaU40RzNuYTF1VVdiWUFtWm1pNEdhZVRNQ0xJUTVtcTBxaG5xbmxzZmgzLV93SmpDSXRSbkdCcV8wenJKd1ktcFBJYmxERkd5MEo0T0dNbm1TcWU1TEZsbVZJMzBuM1BybWJURndfQlNncjR2bU1pZXVJWjNobThUZV9LV1NkblZfN1dPWTRRYkFMYjdoRXc3ZHhLYjI5MmpUSTRRcURDOUNpSndpU3JPd3hvSHJUSmUybkI3WXotUTQ3XzB1WXBmLXc0NVVOTm5IeHZmNjM3cUpCNzdtejBjTUhZTDVaUzBzR2hjeW5hREZ5MjRyWHN4Q0hrY3NGZU9sajVBOGVEM01rOUtnbS1JVnBEY3lhWUhvWnFZZlctdm1QWjJoWktFMGVid2NsdzVidENGQXpDb0QwQjFQd3JDN1Q0SjVJZldURHFvVjJ1MU5hbkFrQ0ZNeEp5R1IyOHdwQ3hkdUVNbk91TEhibFNsSEtGSGdIUldyeGMtTDFEVTgxUF9VM0ZWdWdaZ0NPWE8zM1Zac0oxQnc0b3htQmtfa1hqa1lnNTNMSDBxaFctb1Q3N3lNNFFGdVpRVjJwR0JTU0hCSlY2b25JMU4tcWUwZWFQaTI1UnNaaUYxdjd2aVBaYVV4UEg2aXpoOXd0UFJOdFJ0RlBzZklidjRLaVRDNWswNUtQdFVGbHFpbk9tdHBid3UwSHZLUWMwdk5ZUlFuZXVXaDBrdTV2ak1QcHVfQXdLMlFQd3FGbnN4d3B0b1ItYWJuRkpFVmF5Y2F1S1N0RlhJa0FrZ0Y0VUE4Mk4zVkZ4djc3TGdKaWxFZUxsRVdvNEtZQ1BhZ2wzeDRRZ0lwUml5Nm94a2gxeU1jSHdVWUhyNDRfTGFIWEE0WVN0N29NY2M2Y0FSOVBNVEhwaWVHSFI1LThaOGlON3VQdnJfUHdfQTVpUFhqbFg0Zkw3MWNVcmpSQWFxUXIzejB0VDZpTjVjN0YxN2RKTFpOMkJmLVpjczN0LU1zRGVCSFdObUJPVUpuNWNlUjRuRUNEZmJ0SGRMWWtSS2EzNFg2dlNRMHIxZDNZc0F5MmdKWGxLcm1MS0d4Tmw1MU9Oek02YjV3MHhKbnNBOExNaG5TRWdxdHcweFdmR0M3cmNCdFVtdF9jaU5KRGROcm10LUpsSXpVTFVkcEFCWGZ2TVpJczlPR1FQOC12YlVDWDRxX3Z2aXNnWmgtcks5anI3Z0JNMERlSzBoTFZHTnNaanJ2OGI3cTZHV2FOX245cjQxM29jeFpabG8yYXliUlZ6Wks3emV4OUxpY3BtTFp5Y1ZVckRtaUdEMEhlWnRQQ2tLM1hhdlhuTnNmWUg0cjNuZUdGTDV2MjMyaTVFLWJ4LVlici1ma2JrSS16VVJRenkwVkhleTdiaUhEMzJNMkxkMkIyR1FFczdiNXV6SHd4S1czN3U4cG1NU0ZhcEdwZTB5eUlTQ3BiX0ZyMldlQWJEbDNjMkJxeExtMl9GSC0zVTNiY3VCNGkzSjI2QkdON29URDQ0MXU4ZWhkMlU2N1pPSV9lenNaSUVWTVI0anptR0RFYXFzeFZKZU55ZlM0T3lMS044U09ZQlBnOG1FdThiSF85UHJKMkx1bGFPTFZ4V3F6T2RQTFhPMXhjUEM3UUVra3hkTDh6c3hTb0UzV3BrWE1zWTVvRzhUUGpqVEo5VkxidUFOcmlySjNHSnJncG81OWpjTTZzQ2dJVWtRYkpDQVk1Sk5JaUtCaHR6US1qZEF6cXNaYVJscllKaVFjYTFXdmJXWEJZRW9PVHVuaFJncDdwMXZCRlZLYlhCTk9JRzRpUU8tQ3pobzdRQk5oT2pxZGJfT09GV2NnT3BCYlJtdUFMNEc4OXN2Y19zU1FZUVNZbVd5RjBlSDFBbXQ4Rk1CZ3IxS2x4MDVGQ0w0M1ZlUHhBaUh0d1N3bFFSQ2tVdE0zYXhjWTFqWDJnN0V4c3N3ZmhKdGFYNExQbHlCY0I1OGtTRGN2X1AxcElWOFpUc2NVYXZieVVMR2NmNTFtQVdMM1UzVEhMY2pCQ1JNZ1V2bmxzUkZyV1NRaXFKOFFQOUtkeE5acFM0NEw4N2dDS0tPSDVlVjgtSnVpLUdybUZOOUV1cDE4VjNjc1BDcHNKSHI5UllWR2NsVDNOYU8wc0NoUjhJZVBHODQtUS4zRU1aWGZQcTgtQ0s2andjeVFNSGlR.vEYEa_liINproo-kfLftV-1xUDP93CFTAsdbfD40bL8-cV9PLlRN9hAwS_cXZm1DaVakXNYePUt8_FZtFKsJHnv4VCEO6Xd9C5HnHdahRiO1xNd_LPVezw7nUNFHQjSkx4cdaJunZ_byhT-NCp1ZbY0ueKdBx37T0mS6aha4kcr1VZUUVpbUpqf2FNblzOBZQkpGeJlJnNmiQ8gcQEbTFcACitpsEPmK_AOfXxLg2i2Yr11YwimOMKwp3fGNYkrt6yyFgO5IseFki00mlUEQDgQObJDrnHkFakpZZR_dDeVAVXoqipoNHI6lFGsf0jaJ0WSBl7jNukLriLrjbRWHBg&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;0414103B864980018088017685946200D290CAE7D7860CA7&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceName&quot;: &quot;RXVnZW4ncyBpUGhvbmU.&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380952711598&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+52.14/+4.51&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;171.33.134.77&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2021-08-18T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2021-08-18T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000126/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (Test1-2 #1)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU9USTRPVEEzTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS50eFZMVjNRTHEyaXRXckV3VnNDZmlOcWhmem5IVmFZcnZqR1JaeGdTTm0zQVdycEVrRlRxVXhHWnUycW1nWHhwNUZUV3NiRVF0ZnNEcXB1UlVQLWxqd2otS083WkplMzFMXzNLY0hQTExPSEJ3MGU2Y3U1R3dZTHFMYnRuaU5HUWx2TjRKQ1B1bFBGX2EtMlM0YmRhcFc0R21sUi0zcnhESkRRMHBURkkxT1hzQjNaYjlkQXhGcGNEWTA2d0syQ2FFczBteUZGV0ZPNGt2MHROSlcya25BaDZSZ29TNlY0UTJmdjFvMzEzUXZsSHlXaFB6WENHQmxkMXg3ZWpGS3ByZC1rUV9TNXg1R2I0WGVNRkxJVjl5N2plVE5fQ3RDZXlPdzJlaXg4NHRybEd5dzNXQUxON3EybExWOXhXejN5eXZFNnRhR0hqVjZjekZ1c01QeVdJOGcuWF9WY1RObjY0U1pVc0FiVC41S3hLWG5BU09oYnpxbHhFX0FTbVlkSEVGUnFMeXE2WF9tWi1zaEZaYXlRWjN5Xzl6dXRMOHhHbk1UcW45dU1OdjdmRldlUXkwdHIwYm5jRHlCSklzcWFBU1NQMmRwTi1nWE1NYjAtbzBpbkhKQlk4Ym1aTUFpbUtxWDgySTA0clR4Mkh2WWI1S2cxRjRDMnBna0xySlRncnpta0t5MHV0emxicUhqS1h1Vy12VDBZU1owTk00UFg0enZiR2NwMndlQWpBUTlNS01ld0s5UDdTWmRGcUhMOWRzUlNsNkF5cHMySU1XRDY1dFdWdmxjX3hvWjF3dHRyR1JTcTAxR1dVMGNwOEpxMEg4aUxoaEdvZXJKZjNFR1AxQTEzZzY5Z0IyVU16cDRwS191UWoxYmtFc0N2NVFZM3M2aTljbk04TG12VWlOZ3hoMzZ0UDVfdTkycWlzUHlkanBtdDQ5TDJBQklxUTlvSUtLMTFWbXJJRHV3VEFQME45U3RBODF1bkZETnk1c1N6UEE5TzktMGd5VmJoaUdsOE5mbm51SnNIR1NRRnl0SXk1T0ROanF6N0JUOV9mc2tsTld2LWVsUXVtTERWeWgzRDhHYmJFbUxIODlMdkhkU3RsMFBoTHlnZzJDcGJsSHlRYkM1RzYxSUNwSkhybWxWcFFJM3RjUFFiakNJNlBVSnItaVpmQkRfS28yQTVXUHFhR0FQYlhHNHdndnY2MWRlY1ZCUVlLUURfV1hVV1lSYmEtcFFYY2FtLU93bW9GTnlKWXFCMk1RVGxzN3ZOajctNjUzdmFpTm5qNVJLb013eEltaV9rVl9jWEM0YlB6NjRGQVh5UlB4ellPd3RkcFVPaTEzNGdGUFgyeFpRa1F1N19UYmVXWjZUWm5DVGNaUG1RRDhCNkY4VEhMNGJQZ1lPcnowTVhlX2lOczJzQTdyaVFFUXJjUWpWZ0tWV3hjSlhGUWhsdmNLb3hVQ2JMT3VSTndwLWhUazdEOGpodzlubm1lYkpRbXEzSWVOMEIyRWFXdkJwYUNMUVU0RGRSbkRSOVYyLWh0ZHBZWFZkamlOTkNsOHJYNmFLLTBXWjI2aWJ0UEtGVzhjQlVfXy1Kb0NuYXRDZWR6Y1pLMTQ0QnctaXo4aFFkY2lKUVRXUmMxOGx1QURGLW9meTNyNUUyMm9rTGxqcUVSeVpSYTlZeXpON2lRVWdkb2tLZFctTS1TMkpobDVaenp3TTRrZVhqQUoxWXllUnBOMUhFYldlbzB4anFzQndJYTBwN2ZBOTAwczRvVi1IQnhzWHVPNmFzTWpRazY3VndfZ0xrQUtQSGNLVDI3NnlUdlpsSkhUOU9SRm4xZFNsclhLdDRxcVM1X1lnZW1BZEpRaU5VbklRdldESnZBdXMyUHhycTJkQk81QVdMZEdRMWN0WmYtSjM3cE9TWWtwV2tFRWNDZU5xZVBnUFVQeG8xVFRpcW0wc0JlTTRoR0JVSGxQNmtuYjcwdEJDdFl4TVJmVW1CUWhZNmhhaG1iN3lmcTV5bVZjWnVKT29hOFh1NnF6V2VadGZiNHpCaHpoSm5ZMER5bmhyQzNTQjIyY0hGb0NoZlYzUEhqYTB2dHNpUkVjSVU3R01MRklzUnR1SVdmd0RjMmd0ZlBjUWp0UjgzOUJkRTc5eVpWTWVPdzNWbkpoWndVaU40RzNuYTF1VVdiWUFtWm1pNEdhZVRNQ0xJUTVtcTBxaG5xbmxzZmgzLV93SmpDSXRSbkdCcV8wenJKd1ktcFBJYmxERkd5MEo0T0dNbm1TcWU1TEZsbVZJMzBuM1BybWJURndfQlNncjR2bU1pZXVJWjNobThUZV9LV1NkblZfN1dPWTRRYkFMYjdoRXc3ZHhLYjI5MmpUSTRRcURDOUNpSndpU3JPd3hvSHJUSmUybkI3WXotUTQ3XzB1WXBmLXc0NVVOTm5IeHZmNjM3cUpCNzdtejBjTUhZTDVaUzBzR2hjeW5hREZ5MjRyWHN4Q0hrY3NGZU9sajVBOGVEM01rOUtnbS1JVnBEY3lhWUhvWnFZZlctdm1QWjJoWktFMGVid2NsdzVidENGQXpDb0QwQjFQd3JDN1Q0SjVJZldURHFvVjJ1MU5hbkFrQ0ZNeEp5R1IyOHdwQ3hkdUVNbk91TEhibFNsSEtGSGdIUldyeGMtTDFEVTgxUF9VM0ZWdWdaZ0NPWE8zM1Zac0oxQnc0b3htQmtfa1hqa1lnNTNMSDBxaFctb1Q3N3lNNFFGdVpRVjJwR0JTU0hCSlY2b25JMU4tcWUwZWFQaTI1UnNaaUYxdjd2aVBaYVV4UEg2aXpoOXd0UFJOdFJ0RlBzZklidjRLaVRDNWswNUtQdFVGbHFpbk9tdHBid3UwSHZLUWMwdk5ZUlFuZXVXaDBrdTV2ak1QcHVfQXdLMlFQd3FGbnN4d3B0b1ItYWJuRkpFVmF5Y2F1S1N0RlhJa0FrZ0Y0VUE4Mk4zVkZ4djc3TGdKaWxFZUxsRVdvNEtZQ1BhZ2wzeDRRZ0lwUml5Nm94a2gxeU1jSHdVWUhyNDRfTGFIWEE0WVN0N29NY2M2Y0FSOVBNVEhwaWVHSFI1LThaOGlON3VQdnJfUHdfQTVpUFhqbFg0Zkw3MWNVcmpSQWFxUXIzejB0VDZpTjVjN0YxN2RKTFpOMkJmLVpjczN0LU1zRGVCSFdObUJPVUpuNWNlUjRuRUNEZmJ0SGRMWWtSS2EzNFg2dlNRMHIxZDNZc0F5MmdKWGxLcm1MS0d4Tmw1MU9Oek02YjV3MHhKbnNBOExNaG5TRWdxdHcweFdmR0M3cmNCdFVtdF9jaU5KRGROcm10LUpsSXpVTFVkcEFCWGZ2TVpJczlPR1FQOC12YlVDWDRxX3Z2aXNnWmgtcks5anI3Z0JNMERlSzBoTFZHTnNaanJ2OGI3cTZHV2FOX245cjQxM29jeFpabG8yYXliUlZ6Wks3emV4OUxpY3BtTFp5Y1ZVckRtaUdEMEhlWnRQQ2tLM1hhdlhuTnNmWUg0cjNuZUdGTDV2MjMyaTVFLWJ4LVlici1ma2JrSS16VVJRenkwVkhleTdiaUhEMzJNMkxkMkIyR1FFczdiNXV6SHd4S1czN3U4cG1NU0ZhcEdwZTB5eUlTQ3BiX0ZyMldlQWJEbDNjMkJxeExtMl9GSC0zVTNiY3VCNGkzSjI2QkdON29URDQ0MXU4ZWhkMlU2N1pPSV9lenNaSUVWTVI0anptR0RFYXFzeFZKZU55ZlM0T3lMS044U09ZQlBnOG1FdThiSF85UHJKMkx1bGFPTFZ4V3F6T2RQTFhPMXhjUEM3UUVra3hkTDh6c3hTb0UzV3BrWE1zWTVvRzhUUGpqVEo5VkxidUFOcmlySjNHSnJncG81OWpjTTZzQ2dJVWtRYkpDQVk1Sk5JaUtCaHR6US1qZEF6cXNaYVJscllKaVFjYTFXdmJXWEJZRW9PVHVuaFJncDdwMXZCRlZLYlhCTk9JRzRpUU8tQ3pobzdRQk5oT2pxZGJfT09GV2NnT3BCYlJtdUFMNEc4OXN2Y19zU1FZUVNZbVd5RjBlSDFBbXQ4Rk1CZ3IxS2x4MDVGQ0w0M1ZlUHhBaUh0d1N3bFFSQ2tVdE0zYXhjWTFqWDJnN0V4c3N3ZmhKdGFYNExQbHlCY0I1OGtTRGN2X1AxcElWOFpUc2NVYXZieVVMR2NmNTFtQVdMM1UzVEhMY2pCQ1JNZ1V2bmxzUkZyV1NRaXFKOFFQOUtkeE5acFM0NEw4N2dDS0tPSDVlVjgtSnVpLUdybUZOOUV1cDE4VjNjc1BDcHNKSHI5UllWR2NsVDNOYU8wc0NoUjhJZVBHODQtUS4zRU1aWGZQcTgtQ0s2andjeVFNSGlR.vEYEa_liINproo-kfLftV-1xUDP93CFTAsdbfD40bL8-cV9PLlRN9hAwS_cXZm1DaVakXNYePUt8_FZtFKsJHnv4VCEO6Xd9C5HnHdahRiO1xNd_LPVezw7nUNFHQjSkx4cdaJunZ_byhT-NCp1ZbY0ueKdBx37T0mS6aha4kcr1VZUUVpbUpqf2FNblzOBZQkpGeJlJnNmiQ8gcQEbTFcACitpsEPmK_AOfXxLg2i2Yr11YwimOMKwp3fGNYkrt6yyFgO5IseFki00mlUEQDgQObJDrnHkFakpZZR_dDeVAVXoqipoNHI6lFGsf0jaJ0WSBl7jNukLriLrjbRWHBg&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2021-08-18T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2021-08-18T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (Test1-2 #2)  CRYPTOGRAPHY_ERROR" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU9USTROelkyTWl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS5naGVSc0wydGxDVWhMYWVfYkJCZERFVV9zYmVhYW5YY1RuaGZmRVFIcmptRy1oc2lTb2FjeHpyTkUxV2w4VWFJRS1VaUJoLWZHWVVMTUwwMEpacm91QjR1S1RpdEZBU0VBeWhvdXJWcDJ1QVhtbDdnR0lhRmc5dW9HcDAwb0xVbUIxS3lrSUNXbUx4Tm9XT1d6bnF6NV93ZG5fbldUMzFjTWpfNUZZcVhod2loVU9kdm82Z05lX21jeklROEZXZk5FdVVFcGJJbVQxczc0MElUdmZROU8zVmN0VGltam5jalZwU0JyY2kxYVpRenlUMjg5RUJYczMwUGpucm5SSzQxTGJraXltMjR2Nm9Wd1R1T1cycVJKeHhHRUpfS3Vob2NXZHlXTVRucjM5OW9Sd1FzdENlOWVHWDlUeUkzeElYZVdpbURPeWNxOFFJTm85S2huVmF2TFEuQmNRUFdOM1R4Mm1zbGoxbi5ySGJlWGxmek9XNi02ck5UanAzd20xWUMyZDU2OURQLXU5SE9pMlFRajhWaldQVEhlT2Q3bm5CZTZfemJ1WjI0aVV1NzQtTXZYVnl1aGdUVmN4Vk90WFA3TjVvTEdmeWRaQzRzd0daaXNLREE1M2VETGxvM1pnUTNVNGhXd3BfNkk3aVFsVnhFamlSX2NpbEJEWHUzNHJrcTl6STg1VEF3d2taMTVBQjJEOGlMVXZMUUx6Zk5GenM3WlVFcDZuQ25Fb29CdG9hQXBxWGtWY3BQZU9DWG1MYVNJdkQzNm53dXlNTGFHeDRUWTNxV0tJM3pzTVhNZmtWS2RrSnFyb3E4SVhYZ1lwbkYxZmJjXzd4SGtSX2ZxTEZXMmJkd0tzTklIRWhSSUtOQ3pQZG9KU0s0d2twVW5LeXgzc0x0V1A0ZHJ2Ry0waFRkYkp5cHpkTVZyNzZCUjU0Z2tid3oxR0pSS1lQbzdlTEVVRVFPREpiTlZYaTdtaVR2bk5Ram1EdXRYb2dLYjc4Z1ZTcml6UzVQbW1iX082bmtGMzhFNkplS1Y3cXRfQWpZc2FSeEYtMVBQZmdHUWgtdUlhS2ZXQk1NRm5sdnRHWGY2NFNfTHBsU05hTjFnYy1lN3ZzUU9JUXJERmpqTzhjNjdHQUczYmlGT1gwWGg4TWZMQjcwTnRJbXJBdVVkWklKdE51am84R2F3bjZHVjdZS01DYkV5ZkJCT3FQMGZ5Q0JEN3A3c1licUU3MXFXTm9JelhlWHRONnhGeHRGMWVNZjJaZ1pHdWNuYUZ3LXByVjZLQlo1enZHQkFUNTdIbGF6S2otZ0pMUS1jU3VvbW5KSXZOZmxEZkluOTdWT0xoSTZROFcyVzZCREdzTmk0U1cwQmlCUkVBX1dSbzJ0c0N2cUdUVFF1WWhraFNIUFBEVEVLaG8xTnQwNGVNeUsybjVGT29wX1N5V3dYcExQRWJ5NzBqcGZiaTZQREplUmxIdm5LT1hURTRoRWhDQUxQa1FCdkhCUy00blQzMFdtZVVYSmhLZEMtdldLUXBSMHBNRGttNF9VV1Jkd2pOVVJvbTZ0cmZRcVFOaWQxWl9qRmw2RXZxRUpUTy1QZzVFT052WnlzUTFXNTNTc3lSQmJxS0FXRzlNN3pyOVNsZjJhejhUWHhKS242X1cyOFpyb0ZOWlhuWm5CZ1hienlmZGlBM3ZFQlRLbTdwWktrXy1pNVBTQzREcDdRZHItVjd1Z0lDN19Oc3NHdWtGWm9XWFFVdjFwdE03VUhZbTBpZko4Q29tMlQzNUZobFd4WEhwSmFsME5QTkUtTVBHd240cXhSallNRG5pdmFLVzlhdTJSakdvQU5Ia2ZrQUxTakFXamttbDZFNlBEbHFKX0M3YUdGMTdicTdzNS1rQ3V2S25vZ3JZOE84NGJwWEllVEtEZkE1LTdzeHEwY1YtLWk4aVUxZFRNdmJJaFVQWjRnTlR4bURvN3F0VUxJb0tKUFBHMjM0RlY2MFktcU95LWFuMjNUQW53QUZkMlBmMEUzalAxM19DMm1vU19ESnRYR19janVVaXNtR2xZellKa25UZmI5VHpHcmJvUTMxQ3h0aEhnajBHNWEwMHl4WmJOck42Y1dzMkcwRzh6VVJVYm5kcVN5eVBRTkk0SlZnWERLUVJwTndRcjNnNnc0R3dVZHBmR0VxVmR2MTBoWTFtbG1Mck03UG5pUWJKbjkxd0kwcEY1RjdCSkZyLUxidHRTeDZ0Y3hHc3FoZXlzTEVhak5lcFNob21PRC1tSEItOG1INWJPZHdPaUI3azlPWXFHRmM2QXdNV1dzSzRmZXlNRDFjaTU1UTlHSWNDUmM0OHlZNzRFdGljZnFJamJyZTFEM1Q4NFpHZThqOHNWZFBlVWMwTld3V0dQTkxpQWpVYWJnSWdPZF81bml0Uzl6VEM5TDdjNnRqVExNeEkxMGFTdUNUV2h2YVZrMjA2TDFPbG9MWEtEcnhNT05fNzJQOUoxRXFtLWhSY292NGRJc1BsRjdBb3RqRFJvbS1wZkEtVmVaT1ZDSWxqLXpzSFBMOFNtem5nck9yV0RhQW5FR2xvNlJiWmpGNzNJZzNYZFBUWUJUQWhVRFFfX3l3NEQtNDRFYlV3STczVW1mZVRXNzFSZGhUM2tKbzhmMGo5bkE3RnJKNF9wd2FIeEhidmxvcWM5UENaR25iTWVyS0dhdWNiWWlpVW5mN2JuZG14MjNBWDYzdDhwVFJGUE9uUExlMmJiRmhoQ20xQng2NXpDLW5JLTFPWS1NZkFTVGtYX0RYMUJDSFF5dUhHckt5TktJREdndmNWLUpTam9rQ3l6NVZZaUVWRmdpZXJVZlI2NGFtZ2Y1dWdraGtXSVlMbjh0d2RrSWNvbnMzVjdoMXU3Wl84NEdIdk1WNXJldXdtcklDeXZlSFdOR2pmb1dnempYZXBZOGpEMVRnOF8yQWJ4YUpYVnd2YU1kdHd3VXNsaVFpSHBTZ1lUM0NmeGpHRjRWYW5NZmdiWU5WX19ZSjkxTkFKSnFSRmphcHk3M2NvaGdIa3d5SHlGbUJoVEt4NXB6NFUxT01TcHp2NEt3YUxHQjIxN1R3VzRxeUo0bmIybmFzZ2xSQWtkYl83aXIyVEZmdC1HNnRoaHc4UU4tajFiejFZSl9IdmZTa2NlU1R4Yk8wVm8zVENPSVpKU1BGMEtPcllNUko2T3d2anZ3T283V2R5ekRsZXRBM3dpeExNUGNHS2xkSDhuNUhGd0ZfS3ROU1BhaEEtemNtdjRkQnk3eDBCTW14bnpqcUJjQTR2VHZJajR5ME9HMDY5MTlQRDRYTWVZWlRqOTBCc2VaNVl3blRrTUpFWnctLWxEOG5tajdrOXdnaV83Ujg5R0N3QWxWRkk5RnNkTlZOc2xUSG53RmNKV2RhNmZyd09zLTdmTldQVzNLY244RGtkazVsbmNVV2RSQTB4LTVJbEx6ZVN2UkFhMmZrWW9UVVpYc2RZd25OMG1SbXFIQU5aYlZpVGUwbHpHeVEzUDIwQmNWNGJ2MF9jUVpiLU42b1NpVGxoeThaNkQwMTVJU0tUdDdwQ1h4QjQwd0xhYmxqdmN0dEVCQ3Z2aF9DWDV1U040TU5VWUh2WjR5bjh3T0t0MkxsX0tackpoa2xsbTlYaDJwaXdKUS1IM0JDaE1OdXpUeVh0UnJQbk8yVEhpMnNPeFBncE1RR0twOE82eVN1RHZaSEdpSl93c2ZGelI5cnF2dm9JeDZpVnJTSUVjb2pmM0tMSURRXzltX25MUEZxQ202Mm9KRlcweExiYVF1eWtsRm1MbUdxdmYwSlV6dXcxMnRIazM5TE9pTEZnc2lJMkZHbjJ0NnFSV1lBNzlfTDFNdVFDUzdidlN5Y3FNSUNwUUtwRmpETTFDX3kycFdUTFVrT2dxOGdqZUxxUHFtMW1vUHB5T0NCUmFhX0FOZ0dHLXl2MHZZcURhaGk1MkZQcUdrR2xoRVJFdXZpenBtMF9DRG82NC1UdEJ3SGVlcE1rQXB2OUxURzJQOXpjLVZoLVhzdGdnLTNvZlZhR3lNc0paUTYwb3VLS2dVVzZrenc0RGJFX3FqZDJrUnRsQjl3XzZPZmNzQXd2emwyNzFFemFvZDJ3ZmRXem5QTnI0S3dOSmR2MHlZUS02c0RPQlgwWVJmTUpoVDVVeXktSkJvVWh4OUdWTld4WjJFMEZSS0JtQkVCa2xOamExYnMzcmo1dUVNc2xMSVBlR3lGcFkyU3drTG1raWVIZzZwYTU5b2ZUVEkwUDR2THpSZy00ckpxQWlfWkFmNHoxLTlBdEVmajM2aEZ3TGlpOVVRc2J3dExrYWZDbExhUWZmSWR2b3Bsc1pXOFZxVVFWbjF6Z0VOdy5uc2FtZTJWQVZYT0VnelRoNDJiZl9B.p5jkCrOQt_k5e8PdoBtuX3lrqsRacqfzXm9XqPx3OsMHzXAT1lehAp1b1PBXFthbLZ5XsaYGqeWhpC4A9ANVZGLt8CXtcn2Vx6qQEV2SDf_1UEwIpuCdnnuDe1q9PIuZ_itHQ5yUS_0x9sfW9Xl6s054hLe0SXybfjLd8HF69JC5FToI9KjOl741L14frS_6cRCV8alwV1swQsTiSHRxOA8HVOu_9nrAmcyo646ae3DiKzE4paInPOVi5TanVEjjinGc8bVj0sRbwBW4yoajizXtZ2xCaXHWMaaaSZmw746MnxaAHsmlewhJ5faopbO-9yYEwuCx7OP8Q-TLjwLlug&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TOKEN_CREATED (CARD_TOKENIZED) &lt;" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;CARD_TOKENIZED&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.card_tokenized</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object history = vars.getObject(&quot;msg_history.card_tokenized&quot;).get(0);

String tokenRefId = &quot;DNITHE000${tokenReferenceID}&quot;;
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(tokenRefId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found tokenRefId `&quot; + tokenRefId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TOKEN_CREATED (SEND_NOTIFICATION_TO_CUSTOMER) &lt;" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;SEND_NOTIFICATION_TO_CUSTOMER&apos; ORDER BY id DESC LIMIT 1;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.send_notification_to_customer</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object history = vars.getObject(&quot;msg_history.send_notification_to_customer&quot;).get(0);

String tokenRefId = &quot;DNITHE000${tokenReferenceID}&quot;;
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);

boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(tokenRefId);
//boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;\&quot;code\&quot;:\&quot;0\&quot;&quot;);
if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found tokenRefId `&quot; + tokenRefId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TOKEN_CREATED &lt; token_info" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenRefId = token.get(&quot;token_ref_id&quot;);
boolean equalTokenRefId = tokenRefId.equals(&quot;DNITHE000${tokenReferenceID}&quot;);
if (!equalTokenRefId) {
	Failure = true;
	FailureMessage = &quot;&apos;token_ref_id&apos;: &quot; + tokenRefId;
}

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;A&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

String tokenActiveTokenCount = token.get(&quot;active_token_count&quot;);
if (tokenActiveTokenCount==null) {
	Failure = true;
	FailureMessage = &quot;&apos;active_token_count&apos;: is empty&quot;;
}

String tokenTokenType = token.get(&quot;token_type&quot;);
if (tokenTokenType==null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_type&apos;: is empty&quot;;
}

String tokenPanSource = token.get(&quot;pan_source&quot;);
if (tokenPanSource==null) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_source&apos;: is empty&quot;;
}

String tokenPanInternalGuid = token.get(&quot;pan_internal_guid&quot;);
if (tokenPanInternalGuid==null) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_guid&apos;: is empty&quot;;
}

boolean equalTokenPanInternalGuid = tokenPanInternalGuid.equals(&quot;CardID00000000000004&quot;);
if (!equalTokenPanInternalGuid) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_guid&apos;: &quot; + tokenPanInternalID;
}

String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
boolean equalTokenPanInternalID = tokenPanInternalID.equals(&quot;CardID4&quot;);
if (!equalTokenPanInternalID) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: &quot; + tokenPanInternalID;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate==null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is empty&quot;;
}

Date tokenDigitizeDate = token.get(&quot;digitize_date&quot;);
if (tokenDigitizeDate==null) {
	Failure = true;
	FailureMessage = &quot;&apos;digitize_date&apos;: is empty&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Retrieve Step Up Methods" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods ( tokenRequestorID = null )" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: null,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods ( tokenReferenceID = null )" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: null,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods ( responseCode=TOKEN_DEVICE_BINDING )" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;ON_FILE&quot;,&#xd;
  &quot;otpReason&quot;: &quot;TOKEN_DEVICE_BINDING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZd05EVTNOVFEzTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5LkVZenRIWUxkQUpFZWliaDhJQ1JDSmVfZWdkQy15bkEycnMtalo3Q2VERVFlbVY2Y0dpN3g3YkNMaTVLYnlfQVg5MDlVWHNCNVJiMHZ5a3JiZWtaWWZVTXJJVzRjcTNnLThlcUJkYWZuVWtMRE9XZTQ3VExOVEZTdExJVVFPVG4wNFlkOG42d1d2VmxsQnl0Y2RmUl9lTUhvYW9NQ1JHcHVwTkFjX2UxTEM0NE5PVVNieXVuS0xIUWNTZlVfaDdSd3VkdzdVb2RIY1RvY2dWaWJTc1UtOWxJMXJNVE4zNmE2TlZkOG9mSk91YlVhNUVDcVZFNjd1UzVSNldpOTUtUExOOTdsLWNCYWhtUlJnUE8tbVc2UE9pOUVmQVVaQ2U2OU1ERzlvMi1ibFBVTnJoOHdud1cyODFhZkNnTmEzcWl5SThMOFZCbUpIVHRRZDBpZUdtRzdoQS5XNnhZdUNCZ25xNlhNQnZaLkV0MUhlTEpkYzBubzlVelMwTi10d0I5Nmw3aGoyT0FoX0o4ZnRFcXA5bFRYZE5IMUZvLXhJemlzbFVoOWw3cTBHcVNobll2YzRGbHN0RjJ4eFlnNEFRTjVuSGsuQ2lROEs1WVdrbGJlVFNleGV0dXdmZw.WsGaogApZuUPZEQtHSKRy488L0Y-QcEAlZ7XsUxTDC7IrrbOy2jKBwLm4qmJrr1HKkgzZWgk9sb4ZUlmXAsU2mG2WOnPv5gHvhjLKR5srAO1ekEYwM4sP9iRGr-Wx0vIr0fjib7v914UshynZ_XLHP4vkX2dr1xCzKFy-U3CNcfe9vxWM1QzWrbQSsEFxCuh0z0nb4HvRPFaaPx9XJRoi3t6HuKTb1fW0uL7JaYTxX1vo7FZxdoX9J1PU1S4zvQSN2w4vV-AyXy1bNZ_pbUKl5ZMSTNc048uunwMOB65UDNB3J-_dG1M4wV53Gw0uml5efIKstbi2PZqU99D2rB1bw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods ([115] kid=FASTTACK)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.1.115</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/vtis/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK #2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010075001&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE301733846921832017&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832017&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP62017&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$17&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42017&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8617&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09EVXdNakEyTkN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5Lkg5dlIxaF92X01PeGg3NW5qTTUxYkJjMVo1X2ljOG92b2Z4ZlRwTGs3dklFRm1wWjRQZnI2Sk1sRzlzWUxORXphdTUwM0d6YjdDeE0tcmVNZDVOTFR4RFdRR2NnWWJ6OEVRbV9MSU9aaHlNcW1xLU00X1RCSEhPZWM2WEdWN3kwQkNFcG9mc2dQVTd5VXJkWXlSVmE2N25KalYzdDcydTNVV1Q4emVpU2pCV1hmb0dzU1hneFJUY3lVTWJoTWRiRE44c0w2ZkI0YXhqT3VPM2tWakNGZmUyQ3lybGs3RXoxTFdONzhrRmRXU1VMRFNBc3V2Z3c4ZWxfSjktMk9DNTJhR3I0NEVWYkxwNTRXYUZlM3M3V0Rfay1NOFBFYXZMclRUdzhJRkRuZlB1Q3NjM0lRYWNXTlRyb1VfUFQtUGsxSkVqUUNZUVRNQjZ2OWNObzl1TENsQS55X2hlY0pwdjZ5U2phREtkLmhyMnlSQXlaT1Jzc0RTOGpHYnVpV3VRY1NFdmRYYmM0YWwtd0dlUFlZUWhWMldrU2hiQVNWRWNPNEJkZmU5bElBVlJEbzcxeUZudTJ5aWY3MjdqWmhNUG1vM3I0R0haWU1kb0ZiaGtGOEhvNTlpcEZ1NDB2Njg2eVBVVjhacFB2eE42TVpvNG1NUlhHdjZ6bnNlU2NMcDBxU2habE4tY3Z5MEp2VmF1VTctRHcyLVpfVEFZcmhPTFYzeHVZWUhLMXZrMmpkdi1rM0EyTGZkRER2ZVF2UXB2Y2ZlWVVHTDYtWWFPRk5BaUpvRHZZTm1iYTFzWHNWQ2JpaGNlSE9UUm1ubHV4SlNPeWhpaE9YS1FYU2hXOEpORS1PLV9xSTJwZFFZeUxqbnVDSUVhSUFrUGsxOW9QaXNjci13RDdBTmlHVDVtLXE2UkF2b0ZxV09FV1VzRWFqNTFZS3ZFSVNrVTMyMjNnTU9aaWN2ZVRmOUt5ZHhMelpZYXVMeEdzTTBXTTR5eFBFalJ6TkFNQWk5UEZsRHJIZmxHMk5RRjJvdWVETlJZazVFQlp5U3YtZTNrY0VpMDhPYVFzREtYbkJlZU82OEtiSGNxY2pLLVV2OExqMmlMdFJxVlE0a3I2Uy1Vc1Q0cExxOVJTSVYzR2s0QVlZU0ZrU29MSEdjSU1Yakg3a211N2t4a0NoaTBOOGNONmZkaGVmMG9neldCdlhsNm1NYjNqSDVFVEpDWjNNZXdNZ1gxenNRRXJVcFhmM3pZSmlUOThJcnRGUks5LVhyOGh3ZjVyRHZSbENJRDFLRzFFWE9ENzFtdXlyRWpFeENWUW03MTlFUllSeTVGYWR1MWhQeHozUDVfczBFQkhpemViLU9QcW1fVGpoWnJrNmVJNzJGS2dYR1VndXNsZDNTWnFEZm1QeVItdVpzUWZSQWNUbUxWVTBTXzNNSFRQc2NxUFdHX1lfVUR6dF8xczBUQi14UFctRFpGXzVNaF9fVHlRb2lKM2ZLMHFiLVdQTzVvYUlhaUNBcWJKMjEyRGtRU2EwT3ZDbkx4d294aWNoX2h2ZG8xa0NOWmcyMW1pTDRGcHd4SzFyc2VLWmlHWm0wcllHREVRMGs2YmZwdmgtX25EeWdpS2NmNkJFM0N5RmoyMGV1WVN1WnhkVHNRRXNYQ3ZITk5qWTFGNmk4RGhHTWZSZG5YcXRtZlNPU3hHeFRJeXF3RkxXOG95VVJnWGxhYnZHbTk1dFR1Q25WOFdITS1qSWt0dzNLSHF6V2hUR0hFTGdYZS1BUGtLeTZBZFFyelN4V2NRQ1ZhSGNYVy0zUlQxd2czNWZTZ3UtU1VUekE0dUtRUXo5b2pRQ3VTZ2p6MWNyOWhCYlI0RWZQNkJkZ2dUVWxoYkdKU2JyeWxpdGZIbTZidUJyc0g3RFRteDRWTjc0SnlxOGJ3ZWZOSGZET3VBOVZoOGd2bGwzNjlFLXRMd1FWRFQwTDZlU3JnN0NqRVcwTkF2bzJva1BCWEsxYjU2eEVOUGZUUmg2T2JRNmIwU1d4aG1oTlo4Z0Z0d3F0elR6Y0tDMm1ZX0QtV2VHUHVvWHJrZEZQRXFYVHRwQkVGYU96ZEl4Mm9FWjFSWDhsSnFWUmRRaHZsMXROak4zZFhqT0dacW50LTBYS2hGV3daNXRLRzdOdmNiNVlTOG5GNHN5MGxOYWRfM0NJMWpycXdTWDc4SW15eVh2VkpJMlItVHJtQk1GeXFzaEMxS2Q1WkVsdlVtUExldWNXSXVqUDRPd0YxUEhEaWV6OFd4bjNKY0FQZE1YQXRkdGlrY0FrbTZ2cWxzUnZmSVNoVlMwUl9WMFIyU3JXQ2c0cHlmMWpxVzJwcGh1X0pSbmljdkU1dmtYQUtnVUs4THB3NVZjTHFfel9lT3I3UzJUSHBiT0VWT1FDRWlIYjQyMkFKbUlaMlR6eWptTUFWczZSMFg1YnNqTXlmU0dEOHdEb3pXOWlaZUMyZGszOXREdElsaF9JTkpwS1BuaENWaU9JeXV1V1VldGtYN3ZRVmdHSGVTVmxIMzZLRG5lVFZ1R0liUkswRnctaXZpT2drdGVPcTBDcmwtaVZKU0t2d3ljR1IzX1d5NDlLbTdvVTlWR0dtdHBOZ3ZFMEFkQTRDQ3BveXltNU44eW8zbXpBT2l2Z3V3OTYybGN6OEJIeC1fSGRfdDZqeVVTQ21EUHJpT0dqeHd3dlpjRjhNYVloRnItdVMxYzRCeEJuVXNQMWtlLWFGS2U0QjI0ZmlINGJ1NGNHNnJZSklmVDZhc3VvYkdSWFNkM2x3MGZxZWU3UlppVVpERHlYSS03VzI4X1FFWHYxNW5UeV9uRlBMSjZheUc0Q0NLZ092UHhUUmNLNVdoQXRvRm1ZblZqYTJBTlRjWlRDdThvMTc3VUpBdTZwOXA1dm9neEJTOGQ4d29wOHhWYlhSeDU5ZER5QjdpU0dnUnBHYWxrVzlMNGgyanl4QjF0cmlRbWFJNFluSUFSdmRJV1E2bmVCZEw1NXRYZ0JnVE1vYzM5WDdpVW1DNmhBZFBaSXNJQVk4Mk1JRjc2OVI2Z3ppOWppTnZzbEd2MXVZYXhLeWV5b3puZUhCbnhROGQwVVdlcUtpVXltVjdrYmtWQkFHbXg4amx0TkNtMlFGdGNsa3lXQTRxZXJSVmcwWl9zdG82U3lQZHpZeTBNcmlwdElEdUxkREdYdE5JSkEwYXdoUkc4aXpFWl9OSzJRNnRITWwxMm01Z2R0aEp2M3hxYTIzM1ppX19fLTNKM0kzS0M0S2NWTlNVUlhMUVhEdm56M0dfNWN4OUxKRXRUc0xVMVF4aVpXaWlEbkMyVlFnWkdEV0htU3lGRDlNTnNkMDhhWTU5bXFDV3pWN05pRllIY0pZcmpyU2gzb0J3RUpiVGdEX2QzLUREUGdldkRKSlJoVDU1WUJlT3Z1ZnBSUGZzVlNxYXZyLTlGaC04bk5pUlJrS1hIM0dQdEswWWZwTjMzdG9MYjhodTJ4TWltMlZfZklsSFBJTmZmYUFoYTk1b01KcTAzcG5raFBPS2s3c3BYOFpxOGRFWVFfS2hXYi00ZVVINFF5SUp0V0gybDhoTzFVVHlhSFNlVC1GMzRqY3dtOTRrOGxYZHRJSklia25iS3dNcHVWdlNzeUZVcVZGWkw2aXZFdkxSVmVUMmZQcGM4NTN0amhtcW0yMGFoRS04ZWE5MUtYMlNNSVp3RmM2NGVRV2NRV2tYODk2YkJrc1ZqUnRJT2t5MW5Ba1IxSVQ0am9heDQybnV6dXd2b2RYMUZOdkZDNlM0dWZDbHFpTVp2ei1MX3VFOWpXUjRPaXRSaUNzelBkaTNRNDRRaDB3V0hGZ29SZlFTcEJMUXFaaGw3SEwwT25nNkl6UHd6NFZ2bE8zWjlsandBS011UlRwNEg2dU4yeUZqRGUza0xmR0ZkMHNoclRJN09TaTNHT3czWHdCV0Q1NkVQeUhwVURYZVhVM21pTE1za0ozc21sNVpxS3RHb1hGX3Z0cHhYM0V3M3pTcTNTWWp6dnFoNnRyZ0pXYUkxS1lubFFocDAzTzNRWTMzOHo5ZTBqWC1jOGM0S0xnVUoyVGw1R2ZjTkNFOW9NUXBYcWR0ZUpOMDdrV3o1WGFiTTI1TS1MN2djQWhZNEtXNDB6WS1qMGVEMl9IWm9YVEw2eHV1OWlLOXFBSFRMVTN4ZnJvd2pZZk9TX0d6b0VJYm9lN2x4akJMZExvcG1VdnZoUmpnaFRhc2dPZ3YyUDFJS094c2tOZkNkMW9hNmlrRS1RRFpsUXROSFZMQW5vdTNiMk5oMk0wdlJrSm9oc0NTbXJJS2RXRU40VXFnYU1Tdy5UdDNQal9rMWp6S3A4RWF1UU9jalhB.dML20z4WBP-cQ4TJYLI9aeZK619F7Smddb7BAstK6QMzTDcFE1oxX-JtZkkTTglpGJWm9_opYyni78Db4QDb_GK-zFT7N7kGaFTYGWqOZnbgtTTiNo44Mzo5IuPJAai9vuK3IuLMTEDieRa1K8NLo4K3C_cSTg6TaRnEkgf9XjznkJHY3DkB6Itkh-W6ST7G9AG-PlB1gYRBww90EHvrlxCH4ULui0Q_oAFrQdGmCxImDS4NfcaGAVxlBxB9rm2rFmzgUtqRmR52NqqrhRvZezMkNuLyMsFZ4kra935wA9v9ebtSBdRwV9C407ENUDBG-X084-rmsQGVD45bQ5lgfw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK #3)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tokenRequestorID&quot;:&quot;40010030273&quot;,&#xd;
&quot;tokenReferenceID&quot;:&quot;DNITHE301733846921832001&quot;,&#xd;
&quot;panReferenceID&quot;:&quot;V-3017192484534844832001&quot;,&#xd;
&quot;clientWalletAccountID&quot;:&quot;6Gt02SAokOGBxPoKPuP62001&quot;,&#xd;
&quot;panSource&quot;:&quot;KEY_ENTERED&quot;,&#xd;
&quot;otpReason&quot;:&quot;PAYMENT&quot;,&#xd;
&quot;otpMaxReached&quot;:true,&#xd;
&quot;deviceInfo&quot;:{&#xd;
&quot;deviceName&quot;:&quot;GnusmasGlxy$#$01&quot;,&#xd;
&quot;deviceID&quot;:&quot;04312E7B342C80014328036811932950DA075B1C4DC42001&quot;,&#xd;
&quot;deviceType&quot;:&quot;MOBILE_PHONE&quot;,&#xd;
&quot;deviceNumber&quot;:&quot;8630&quot;&#xd;
},&#xd;
&quot;encryptedData&quot;:&quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTFNek0yTml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LmRQSG4teVN6N3RVZ3oybFNmbkZFMld1OW5xbkFsRm53TTA5SDg1ZnI4NmoxWkR4UkhfdGpiNDd4RmxBRjhoNHBuakgtZGNxX2U5VnM3U2hXMEhLYnRJY2NCWGVkV1RHSXkwYk9sMkZ5Q2phV1RqRUUwR211c3dURmtabEZ1aGVnSnlzbl80UWxubWZEQjd0R3ZxUGRRcWtLMUVuV3lsVjU5Q05NdHY5U1VoaW5oaERmN3RrTENhNS1XNlRrdmdhbUFXcUMwUlA4N1FGVkg0ZzNZV3VKWFJRUWR5em9WQTgxYkVyRnpGRUZVdG0tZGJYamtEenl5ODRpV2x6LW1qVDV4UU5seW93c1F4NEtJczZHRTRUb3VPWmctaG1ybzdDbHE2c1FzMWR1dDE4MFVwTWJmXzZRdDllTG5nTlVWQWk3Q3RHaUNJS05RZ0t3NzhfZ3Itc19kZy43Y1QzVE1idkNIeWs1MGNCLmkwNUdMQ3RwZ1o2MTVaenRXVXVaMTNJMVhNOVBmZEFhN3A2cFBhRlBMNXIzSnFySmhieXZ1TUg3N0RPRzdDOElVZmluV1VlY3lncnpucFJvTElhQ3pNQnRSLXpUeXNIT3oxSW9MdEhRbVZadnhUczRfcmxpdXJqMHB4V3ZaSDdLa1BELU44QVQ2dWVVMHJ4RkRXdG1qTWEyR0Q0MC1haUdCbERCVURYNl9WYVVTTXotS3ZxOXNvU0x1US4tdkx0WXh2UVU5aDFyLS1IQzJFbXJn.H4YOd2XcSQwGaSXoMVr3Pcmt0gmPSSfL_VQiwPu7Q1FuHOT9-KN4vXEu5RhU3-Yloie-iEs7V9NwVOsstbcfGZ14voJzH5mGz_JcH4uqBydSKf7nmQy0WpSm4Dg1C8R6Ph8O9VATwQ_mgl4zd0MjMiM4p-FSN1fQhfiZhbd_O-xaRUQBlF_5EGd3KckyfmK2WyjJBDkg3sFX5h2o_R6iYdl9hZtmR2xXLaj4wm6pf0p8GXjqb0DJoIizp5-Q_VhJ9KP0lcyndzIrP0XqM_epqu-COsdmaLCQGKnLwVwUzXhac7GU1tuW18q-sQuzgCyomdcV1c1xzEbs5EdfUk6EiQ&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK #4, -otpReason)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$09&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42009&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8609&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK #1# ISE40000 - encryptedData.primaryAccountNumber=null)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09EVXdNalF5TXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5Lld5MXRuQS00WURVQVkwTWZfSWJ0ZW1hY3B4TTBiQ29xNUIzTU1QS1V3ZGR3YTZJOG1xLW5HaWFtTlM5YzdPTGh1WE1LZzJrb0FTdWpNdExHZDF4aFJxMElpY0kzaEstcnE2MHMtTUdUQ2xmSTZaZjJvWTdEN1JLckVYemwtcE1veWZzTHNhdFZ6MEw5MVcweFg4enU5VWJJOUxkOFNjXzZVeUlqSjh3OEoyd2FURUlDc0ZBVi1OaW1FUjBJSXd2NkduUEI4Vl8waDVJN1BfenkxUk5ONTVfRS1GRWk5c1JSMGNocG0yVmFZSW16VjRLdG9xTGprTDU4R0paY0pXbWM2TmRRang3MC0tQlAzcU9mNFFLbUJ4bG11RUZfbnA0dWkwMllqNmtEdTZBSU5ZUlNLOGFZOGRrUHFVZjl3MTl1Qm9YLXNudG9Fb29mVHhiZWdxenpKQS5wNkZKZmQyZE1oUkk2Nkh2Li0tVk5DSEhaTy1kX3RnVEhqVW9jLUZmUHVIb0hMeUMtc0ptNzBFWWVTU3o1Z0pLRm9yUk9YR1d4R2tUYWE3elUxSURRSXUyR0pvWDUxOVVpNk4xY3JTaWpYRDRxLTZzZmo2RHhMWHdVVFZuYWFQRHJKR2dmYUx0U2wySlF3LXFtdFFZb0dqa01EZzk1OFMwR2lzT3EzQjMyTkFIVDR0RVVfOHppWkNoUUQ4SmZjd3ZaZVF6d200ZlVnVDRIcFlDa0JQdVI0aGpLcXUtU2VqRkZnZjRqWjJYU3o0MU5ocHg5WVFFMnZ6MXZfMkdjRWFhZ010VU9NUS5NbTVpZml5SXVvSG52TG16ajJTVXN3.q0bttBgNl7rsIFETaWZm6R_U1BbBj6YpUVmTRWj1pGRPtkOuZ1DLFhltNcdGq2WZu8lF68Y7uDYI2e7rDhqx9jgMDTD7CWQIYMGUyvSDGAxIBGQfIU191dJZp-RuvmSfCrrH1qfRcjc1XnDEB_Fjt14CgsQ4O3HuZ1rot9z5pPkqum8EHM3UHGxDEDK5OrBewJsdZfSjoBYXCOUmQpceppYmrVcHSVq3QCOf1OGHJTOUCA8foqYO_3-XuF-WafpKwPBZPi_V1Pd6uSuQPqA9z99AyXoo59mCeuoCPyrXzH_bR4Erthf5d748A56Ffqte2H237IxGXibMv3dIMNdoqg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK #2# ISE40000 - encryptedData.primaryAccountNumber=null)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09EQTJPREEwTnl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLlIyRFlKZkVlTWRuclhJcGlmcXdZbHpmYW9SbWRvQmVMU1NOQXdkQTJCOXF5NmY0MHlGbGRHWHdHM0J5YlB4dkpfTVFCQUFVMlFvNG96TDlJZ1dfZWR5N3pWNlJqazZwTG5zWk5sYVlwRm5ldTFDWDRGXzlyMEg1d2FsY0VqSGhtcWFkdFZNNnN1bmg1dmFBa1hIUExmOF83dzA0Wll3WURHalhTM1ljYWR6SHpPejhDeVNqOVo0VGlkT0dvV29nSTNWak1Eenl3UzhRNDN4dDdKMjR5TGEzd0ZlTzh1clhfTnhIN01VUk5LMjlTU3Rud2o5dkQwVUE2NC1Vb1ZLeFVGS3JLODF1SGNJc2pjelpUWTBqTlJIdnVvdmpiYkhqNGN3NWNRVy1TZC1kcS1BU2YyMWFZYk1sQXJwZXcxNV9BaXNXNllvNmxFTmdHeHN1WTd1Sk9rUS5IU3JadFNqOVpHQWRMeDVWLlFOVXNiZFo5SlJQQi1zakFXV2JnNFA2cmQ2eW5XR19hZ01sOWNqWFFCRS1jZFp5WE90TnF1b3BOS2FnbG53SlkyOHhsTTNlTjZKVG9IUS54Rm5EWGI0Zi1KTG9ONkJ3SEtOMlhB.sKSGnqvmjb_x76E41W4YbunrF-TObrkUZvfCppzfTKHX7WIJQB5KjlwGBt0zOd02P2TlrZkrQ-iIS9TlBEKgLPMUx-oXZwvJvJkFo_A80IpvlMXWeWqMPqMjkQ-zuZwF51ttmBN2DhEUgVfNpgzgP1CRPA0uW6Z0phgV0sDA0sVM3O8jfVTigx9xbnkQNWYlrB1qOJBe4rkHb7u1LYYtPs0EtsIagsUN4OxFNwqor7ksYDOHoPdnfvWNsby3Gp8cmjBfsegrjkJhDT6WLa5Y0-pMBlHjIdMvUhgEnTUPtiubZurncF67S4XfACvbRhjNJKc8NcCrrFvPN2mNWMLTiA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK #3# ISE40000 - encryptedData.primaryAccountNumber=null)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09Ea3hNelUxTVN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLm1SMzIwU25qOUs2bVFKMHFJYXRhZ2NjODZWbjNfNjZjMHgxRFQwUENneEIxbHdmTVJkRlFpY0lZYkpacDJYZmlGdXViRFF4bzVGVXRUNkxzQmoyODZiZFhvZlpiblZZVlZlNmRsMmE3QU9aaUxSZzRVYUJZblB0SlU1Y1dSTmRpWUFjOXZEQzIyZlVrZVNHdXZYejl3dDZLQkRTNW9ZWmYtODFyek9IV3psWHNxV0I3U1Z3cWgwVkxJUi1HRXhmd3h5UGl3YnF5LUpoeEhxdXdNQmlPSk01Tk5ZMXpNYVZxaGE1dXl2Q2wyOUR4SktOei14Q0VEd3RvaW5UbktQVjMtYzdnY1N2THE4QzZkeXg4ZUVoTGJzb0UzczI0OWVYMElkdXVMYzhaUVFEbzlNaVNHWG5fZnV0akc5S2tSem5aUmVDTTU1N3BCUHNoQW9hVFRzY1Q0Zy5PSTlaYVpSb1BRZ3J5ZlRxLllpOE5MdzBqdFdCWVNWOXBoNUlqRmhBaHFUN19KdkJ4b2drOXFUNUFnMXhMd3E0ME9zUzdnZWRlbEhuRkpta1BRZFRRd1FUdlhzTTBQSnBGVThRZkpTQ3JUVVp3MkNqMUNLVS1idVl4YU9kaXliT3VIZW95Q3RRa1RvdGZGN3UwZm91QWVKYWlWZjl2Rmt3Qm01czEzUU1aNWl0aDBtd3VFNlRlLlp0Z0NnQkpOdms5N3c2QkRhaFY5a0E.GhjD0WdEZaZzKndkU9FPxllYjJe-VIZk_iE84Y8oMUY4bEYnkzqJnVBY5FnQTO7w6nqrrylosKAAcXCn4VWdcmyU3M8DrYOOQeiX6zuDrDvTSyRoMvQZTjyVZArqroxclI9fn4p0GXdeGceZrlkXKAySVGumO_6DlfNXPDMa-gyh7n9ti26tr0L-IqK5DT96pAcVDJTXypXFIje50S1i76eayAntDC9040575UiQzNTvPHSxQBHyDnLGOzKCQNYeOG-_aphaz60k4GTs3fIYJPG_so7GxN2KBBTjhMu6SA1K0MbyLEuYE3UHMnqVxujZlUFPWn3laOdyCgabf_oqNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK #4# ISE40000 - otpReason=&apos;&apos;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK otpReason=&apos;PAYMENT&apos;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK ISE40005 -  Invalid field length &quot;tokenRequestorID&quot;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;4001007735100&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK  ISE40010 - Cryptography error #1)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUS TFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJNalUzTml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LlcxeS1POEFrY1dOVDVCdThfcERSTGlOS 2JDT0JRTEw2N0w1ME9yLUVDUWR0RzR4THRqU25yRlBZRmF4WEZQcjgtX0ZmMzdMVVNvQ1J5b3V6Z1RfZkVheThTdlNFNFVTU3VRLWVvbC1OYzhod1R5aFY1WXBwZFYxVm1BenJnb29qdGdaSWRCT2laVVZzZm1JZFhxcERiaEMzcWN0T0t1eW02dmQwaWROMmtfWUZjWENsbW9mSEg4Q3lkM TI1NVE5SmpIb3pQanZxcjhET3ZNbWJXMVU0NHhnVkVjSG9PYlJra0hscjlscVRPSm5vQUJXdXU1emZQNElkNlJ6WFlpRGtCMUtiUEE1NW15V1VFLTZyN0lPTUJYaXdEQWFwcW9rYVVzd3pLMUlzTW1oM2hMa0x2dzJlVWVBNW9EZkQ0RVhLNjB3ZHB0anhpdGhSVTZIQXRlVnlIQS5OTHEwN 2lSaTNUQXJHcU5MLnhfSFlLT0RaQ3liSHRkTFFXZnNFN0JNejItcWJud0d2WUJPdUFoT2RkcU11YXFiTVFTWHIyal9ZcUhuZkRHREJ4dkNSbzZuTi1JNXB2RGxfN3ZneEhLOFdPWjZ3YzN0cWVuRGZ4WlV3cklyNm5yeXRtNkhTcXdBZ0FIMnkzSXJXWGlzcjJ5NWo2T2hqbHJjNXU3aHc1e FRPWGRBSjFWQnZRRE84RWkxYzE0SXNydE9NMWRZemxkQUlrQS40d0ZkWlZ5bVhJLVNpcTF3V3plWmh3.6WZESs6eNJDJq5t9__pQEuRmtju1HLgZho_Szp_XrxlIhusmKT59BO7z4XVsXK0lI9058rTntZkmBFqGqTQCYvc4WYzH-PbSYmxgtm_x4X-nmd7whJsLIYfw5lodX-jQaTcp-cL4 aWy7vwGWwBrzG-VIxbm9ywfsV3omWrjXn8jykfHIgURohr7hYn0j_PD2nQP_IKW9gIh_kTaHjTdKxHCQQosNtIhiTd6CryYJIHxWiw9EzgR13jX6LE7ZuSv4sFUeb_p1ZhLv3VFwDQoqXItZOuO7RYsZb30ovaIEBN1o-H1thBwP6wA3SzDENAdKx1ELkE-KOOl6AwE0Jv_mNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK  ISE40010 - Cryptography error #2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNOREV3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaWRXNXJibTkzYmlKOS5kaFM1bkRLUXN2RHBtVDA4QXF4dWU0eWRJNnE0T2taT3Vwbkw5TmpyVmppTDZKa0hUN1R4NjFXeXlZeDNjN2QtSWZSMEpod0RudmpKeGRhNGYxaTY4eHJUYzZmbW82dk1xTXotNTZjUG0zTUNfYTBZSUNGZDRRekFHTVhmRk9WT3N3NnVidVNKVzhKTzBuekxQXzlyM0FZZXV1ZzVYRDZPSHRfczRpX2swUl9WNFZ1bHdiMXA3eXBGcXhRNkFDcVJlaVRqUzc2TlE3TFQtSXVLMHZyeEtNRmNUWjJ6X1dfb094X3loaUdFODBvVkhiZHU5QjFXRDljN0E2dmZyaVZxcHhpOUZUOWRJelllSy1YV0paZVNWVHpaZDZPcFVWYVJCRzFxOEtpTC1LTG5TYlJLbUliY09RcWN1VEdHRHlRcUVnQkxnVlQzdU9iY25uNzE4N3dUeFEuVWp5QXppZVpxQW1ydUZkMC5PVVVtdmhfc1ZFanJZbnlNNVUxeXAwSkZFNWNGZDBtU21INDhiMk9iN1drR0twZmZ4UUI1YkJodEJDQjZNN1lZX0prZlBkUXg3Tlo2MTVhWVdJSldoYXNSZEJBVG1rR0JvVnNzWkZMYVBuYjNDZGp1LTZhbGhMcXlhTi1SLVdPV0VnVmtWeTNnejZRNkRieXYxR1U3c25RUGx1bExtRzRBQVJkdnFvaHhyNnFLNlJia0JhSTFoZWlIYk43dVZBRlR4S0VuaVRuWldJOVc4VnF1Z0xnaUhGTHVOQURSY2J0Tml5Y0M2YVNkNW9qWFdaZ3VQRzZfdElGWDBLRG9BcVZNM2tWSXhhN0ozcXZfVDR5R0FLdUhSVFFFT3Iza1c3WUliNFVfN2RrRVA4Z3NpZVg1elAxZWlGUUJENlBhRzV4OFFMQ1ozUTV3V0EwODFBTE1aTU9iSnpEWHBaZS1kMDA2NFlRVU5GZlk1MW5xdXVleWhqX1ZOeVFCemQ2b3lNaEV2LUNmaFV1eVRZVGJNemtUdWExX3NGY0g0eW0zYWJ5elJOWGdwQlVRRDVlMkhTT0JGcWI4YUtwbW12RVBiamdxUHZNSHgwNEUtYUk1R3ZFVjJieDk4VVBfYWtHcFJkekg1aXJXbEFKOFJwd0JTZDJmOVdia3gyeGd2aEEyLTQwZ0dSMXBCM0VZUlB5d19sbDNVNkZYVHpUQXBNWjlxY191Rlk1azVyWG9IamxNenVTeURhTDRrVE4yOEt4QnZUUDNaeUJTS2c3VEhjb2JtOVRMX1FwbU4xSTMxT0FhRWVwNTRLNzAwbUpUYXpwUmxHRWRwNXhCNVJUM0RwTTVmcXdmVHFnMzJ3WEhtS3pfaHhzaGNrUGZCamZnNV9vUDJCbEpNMU5uYUFJTDlWSVpXSTczVmppVS1ybVJWdVF2aFRYcnpfWHI4djN2a0FNS1FDUE5CSnZOQjhsNE9VZkZoU1RRWlhYakxBNFpuZmY2bWVxZ2JnM0ZFSDNnRThLeFdrNk1HbnA0YmYyU0oyYnNUcVZ6YmJUdl9rZHktYWpyUFNLVXppOXU5dUU3bE5JaS1IYUlKLWFfY01oUl9NWGN6YzlwODBxd1JXcV9hanR3eGFXcjBjNC1GSV9GN1V3MUNuajY1VkVVU055THZmLXBEYkJBZk9sTmpIZGx1blQzUExhNG13SnRlQ2hCNXhJdnhib0FLS3pyVW5yY0VULWZPYkpMbUtDY2tvR0xIYWY5RnAyeENqWDRaRkZRVkh0TTZycTdFUzczSlBwWllmampsUVhvRHJPa0N5SnpDenlWVV81dElhRGZoOGFFLWNudmZOdndLUV95Z0lKWDdTMmZueDNuT1c1cXJjdXJmWXNKUnYwcXpmMk02OEIxNnYzOFVDZEZVLXRSaE1RMW1kdzRDSmZpSE1iVVFUdWs4dUNaM204TXRHamEydFJqMGE0dUx0MUVXVTZjYWJydzQyUXRpc0FzVVpNR0Y1Y2ZOaEV5OUYwNzZRUzZBZTlNc0ZuTy1nLVpLb3lVMkdqTDhIOHVkVHJEOTVYTEs4MHloVTc5cVZkNUJHSGNLelBYZU1qYWZtZnZoWW41TGh6Y2M1SDI4T1p3RzdnWkh5RHlGWjRGUTNrYUFJTHFSUkRWTzRpdWp3N2RPclE1dEFXZ0NheFRUVWlDYnZrT3BLWjBlZ1R5NTVIMmh0aUNWTkF1YmhpcEhYelBCWlYxcDJoelRiR2htRXVjWEYtclhObzd5MXluOUFWOGhhNjktNk9OekRvQUVvSkp2cGJNZ05MQ2VqWWVJd2lPZjV4cFdjSENpVzRjcjZhcHB5QWhJbW9VOU5rU3p6X2pxbFRlMXU0Lm1La1NRcGk4dnBiTlU3ei14QmNHeGc.0mRdsE6HTfkpCX9Z0tFT-RCAr-S88thqyeSeJPk2PwqePho5JrvYtOXvukT5EjeP6rOIA9knlTGITobUKg4KdlSv9nuFRvcHi5RMK8e63i2kqrh2yy9-Hb1JgbMknd3yB1KEqnt5JfYJnyiMpTImesZV6QPMWTUoM4lD_IzjD6Pp9DK4gIlowTQ3Z1wrk7gKv_V7ztzBmIQoEpV2-xMNCdOT6-KRWB8pbK7jXpC5jU_Nf8-Ogkz18OTxLQUNtvjCHt1_JzRbhdTOgFFdPDYnyRfjBJ0O1r5sB0eMXlUyWsFoe-94EllS2KA8U_tfkqc9YveiKTFnZUJTVtY31WtTIg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK  ISE40010 - Cryptography error #3)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJNamt3TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LmlITlRkdXBYMHNGbXE1T3ExdHBnd1hGSm1SZHlKMVZwQ2xfUzlUS2FINW5YbkFLa1p5UEJkY1NPSEpuNlJGYnZrcHdvZm1IZkpQV2l2RkJCWnNBUWtyc2RSQmFia0gyTm81X3dFZ3pxMVVBS3Axb0FXZl9qNVNRYVFXY1JPWjFDUGJ5YktUaXUzOGxLVEZJZTNjUmpSbHJBS194NTZUOERqeVliZWZXREN5czZadlFYU1RRWEI3ZFFKbzMyZkhNVTYzQXRhajNNR2ZZWl92blJza1hwVXQ1bW5kTm1QbGh4VUtNaTFhencxbWhaWjdXR0p0bTBWUVZ1ekRyT0VkWFllbzhQcVpWb3Utal9IZ3RiVk9Ra2lLZTFBemhpazBmYzV5aXB4WXl4cklYS09GaFpfSlVKVzlQMG50WDJETUpMazRWUHhUeTFzM18xQ191cWlrQUxyUS56b01qUHhpNXBUT3dva3pkLmxDSWpmS3poQVpyaDljbzgwNE9YTzR4dE9iWkVIRUlLb3ZYMm5YTTFlaUE2aTNlRkE3cUptVFNjRTl3ZGdpNFFDZXY0UUpaekFlOFBHZ19pR3ljTExfX2tWcWJqLVoyblEyNTNOdFdwMWYzYzYxSUxCTTA4bEdQUXNiZWtxbks0dU1NTjJWUlZCT1pRSE1aVWR4a3ZkbndIb1VkWElPZ2pCUGc3cUx3YS0tWGRWR2ZmYm9JQzJUSWRpZy4yX29udE5qY2hYeU5Mb0RmakVHMEFR.BVBE1QUovXPyJNixnmprtlZ_BRqiCJ3LIsUBW9IxOzuOEVZ5HPiXSqhPrmGev8DWSRcN2fg3USgTyF0nI7wv5eD3b4e8o1zAk8t5yQv9mfm124OtkXtgkn-AnBzbtucy_DRXT9DERUkTb2E7sLUNUDhjGNJi7Hdh1ha1l14dSUJ4CBh4ax7Q_MIyicB9jf3ivApaWVRLkuu6RjeAoK4_fja_X8NamUqpDmH1Z1uiBvxdLJRoRNrF5vJ13pL4xxBaVhdCfk7eQ5ASuD_FoO5WAojCYnvByJoGDpiumhPL675ayeXQ0r8N8x353aQXjIxQfiREWzebzZdNG5j5j2J0sw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK  ISE40010 - Cryptography error #4)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE301733846921833022&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844833022&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP63022&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$22&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42022&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8622&quot; &#xd;
  },&#xd;
 &quot;encryptedData&quot;:&quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNOREV3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaWRXNXJibTkzYmlKOS5kaFM1bkRLUXN2RHBtVDA4QXF4dWU0eWRJNnE0T2taT3Vwbkw5TmpyVmppTDZKa0hUN1R4NjFXeXlZeDNjN2QtSWZSMEpod0RudmpKeGRhNGYxaTY4eHJUYzZmbW82dk1xTXotNTZjUG0zTUNfYTBZSUNGZDRRekFHTVhmRk9WT3N3NnVidVNKVzhKTzBuekxQXzlyM0FZZXV1ZzVYRDZPSHRfczRpX2swUl9WNFZ1bHdiMXA3eXBGcXhRNkFDcVJlaVRqUzc2TlE3TFQtSXVLMHZyeEtNRmNUWjJ6X1dfb094X3loaUdFODBvVkhiZHU5QjFXRDljN0E2dmZyaVZxcHhpOUZUOWRJelllSy1YV0paZVNWVHpaZDZPcFVWYVJCRzFxOEtpTC1LTG5TYlJLbUliY09RcWN1VEdHRHlRcUVnQkxnVlQzdU9iY25uNzE4N3dUeFEuVWp5QXppZVpxQW1ydUZkMC5PVVVtdmhfc1ZFanJZbnlNNVUxeXAwSkZFNWNGZDBtU21INDhiMk9iN1drR0twZmZ4UUI1YkJodEJDQjZNN1lZX0prZlBkUXg3Tlo2MTVhWVdJSldoYXNSZEJBVG1rR0JvVnNzWkZMYVBuYjNDZGp1LTZhbGhMcXlhTi1SLVdPV0VnVmtWeTNnejZRNkRieXYxR1U3c25RUGx1bExtRzRBQVJkdnFvaHhyNnFLNlJia0JhSTFoZWlIYk43dVZBRlR4S0VuaVRuWldJOVc4VnF1Z0xnaUhGTHVOQURSY2J0Tml5Y0M2YVNkNW9qWFdaZ3VQRzZfdElGWDBLRG9BcVZNM2tWSXhhN0ozcXZfVDR5R0FLdUhSVFFFT3Iza1c3WUliNFVfN2RrRVA4Z3NpZVg1elAxZWlGUUJENlBhRzV4OFFMQ1ozUTV3V0EwODFBTE1aTU9iSnpEWHBaZS1kMDA2NFlRVU5GZlk1MW5xdXVleWhqX1ZOeVFCemQ2b3lNaEV2LUNmaFV1eVRZVGJNemtUdWExX3NGY0g0eW0zYWJ5elJOWGdwQlVRRDVlMkhTT0JGcWI4YUtwbW12RVBiamdxUHZNSHgwNEUtYUk1R3ZFVjJieDk4VVBfYWtHcFJkekg1aXJXbEFKOFJwd0JTZDJmOVdia3gyeGd2aEEyLTQwZ0dSMXBCM0VZUlB5d19sbDNVNkZYVHpUQXBNWjlxY191Rlk1azVyWG9IamxNenVTeURhTDRrVE4yOEt4QnZUUDNaeUJTS2c3VEhjb2JtOVRMX1FwbU4xSTMxT0FhRWVwNTRLNzAwbUpUYXpwUmxHRWRwNXhCNVJUM0RwTTVmcXdmVHFnMzJ3WEhtS3pfaHhzaGNrUGZCamZnNV9vUDJCbEpNMU5uYUFJTDlWSVpXSTczVmppVS1ybVJWdVF2aFRYcnpfWHI4djN2a0FNS1FDUE5CSnZOQjhsNE9VZkZoU1RRWlhYakxBNFpuZmY2bWVxZ2JnM0ZFSDNnRThLeFdrNk1HbnA0YmYyU0oyYnNUcVZ6YmJUdl9rZHktYWpyUFNLVXppOXU5dUU3bE5JaS1IYUlKLWFfY01oUl9NWGN6YzlwODBxd1JXcV9hanR3eGFXcjBjNC1GSV9GN1V3MUNuajY1VkVVU055THZmLXBEYkJBZk9sTmpIZGx1blQzUExhNG13SnRlQ2hCNXhJdnhib0FLS3pyVW5yY0VULWZPYkpMbUtDY2tvR0xIYWY5RnAyeENqWDRaRkZRVkh0TTZycTdFUzczSlBwWllmampsUVhvRHJPa0N5SnpDenlWVV81dElhRGZoOGFFLWNudmZOdndLUV95Z0lKWDdTMmZueDNuT1c1cXJjdXJmWXNKUnYwcXpmMk02OEIxNnYzOFVDZEZVLXRSaE1RMW1kdzRDSmZpSE1iVVFUdWs4dUNaM204TXRHamEydFJqMGE0dUx0MUVXVTZjYWJydzQyUXRpc0FzVVpNR0Y1Y2ZOaEV5OUYwNzZRUzZBZTlNc0ZuTy1nLVpLb3lVMkdqTDhIOHVkVHJEOTVYTEs4MHloVTc5cVZkNUJHSGNLelBYZU1qYWZtZnZoWW41TGh6Y2M1SDI4T1p3RzdnWkh5RHlGWjRGUTNrYUFJTHFSUkRWTzRpdWp3N2RPclE1dEFXZ0NheFRUVWlDYnZrT3BLWjBlZ1R5NTVIMmh0aUNWTkF1YmhpcEhYelBCWlYxcDJoelRiR2htRXVjWEYtclhObzd5MXluOUFWOGhhNjktNk9OekRvQUVvSkp2cGJNZ05MQ2VqWWVJd2lPZjV4cFdjSENpVzRjcjZhcHB5QWhJbW9VOU5rU3p6X2pxbFRlMXU0Lm1La1NRcGk4dnBiTlU3ei14QmNHeGc.0mRdsE6HTfkpCX9Z0tFT-RCAr-S88thqyeSeJPk2PwqePho5JrvYtOXvukT5EjeP6rOIA9knlTGITobUKg4KdlSv9nuFRvcHi5RMK8e63i2kqrh2yy9-Hb1JgbMknd3yB1KEqnt5JfYJnyiMpTImesZV6QPMWTUoM4lD_IzjD6Pp9DK4gIlowTQ3Z1wrk7gKv_V7ztzBmIQoEpV2-xMNCdOT6-KRWB8pbK7jXpC5jU_Nf8-Ogkz18OTxLQUNtvjCHt1_JzRbhdTOgFFdPDYnyRfjBJ0O1r5sB0eMXlUyWsFoe-94EllS2KA8U_tfkqc9YveiKTFnZUJTVtY31WtTIg&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK, encryptedData.primaryAccountNumber=&apos;&apos;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM056RTRNamt6Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5LmJOamZ3bzF0QVJyV1VaMVQ2Rlk4RnQwT3lORFVzaGpGN1BWMlJtcjdLbG1qNjZPd0cwSEFac2hCZVRJZHduZlJyTkMta25nZ3UwUXRQRGZYV3NuekNCLTQ0NWhEMk9PclBVN3BlZGVxWHRmYzJfV2pkWVNYcnU3eFFpWlJTQkh1Q2JZanN1dTBJYXlqcDBMRlRWcTRuTXJ0N195RnJESkFZS3k3bzY3ZUxWdkxxaUNQZnBJcXlpYXhWTTJVQjFHYWRoTkpLb0FvdEsxa0F0cVFJSTJBNGxSSUVTWDN3X19relB5WTVPNmZHTlpXVEJvbzNuNHJrQm03eUp0WV9ybW5pNTEwcVVpT0g3aTFldkMyX2NLZUFaVERVZnlrVF95U3Fia1duSkl4cnRtV1hTd09JWnJZaUF2a0tFc2lmLXRRWTllZmxmOXF4ZDJVYU5rY2NzalZyZy5aaC1CQTFIdFJOdllzOFdiLnJ2WVF0OTk2RDNHcG9JVE9HdEdUd2k5TWR6bGxOemVJa3lKTEk1SWU5N2lEZzROdTR6MF9Ua1gxdFFkZmZVbVJUTjh5TTNMTm5Ca2llSHdueEtqejdEaDZsdmxNLXBxUFdYbEVyMmw4WXBSbENYdmJ1V2xjWHhobndTQV8xelg0UXFFYXZMRG1UcnZlYkN3VWpsck9YT1dSMDktMWZaUHU3RVNxZHZsNVpnS2tab3VlRl8xR3pUSklVaTByaXZqLUtKS0ZINm15MGZBemZGYmFKQjR6NWN5OTBhSEdkcUtycDVrQXFNTFoxWWF5Ry1ON0lXNUlCWWQ0Tk5fV01sbk42MUgyeVBnRW90U3pLclJaV2xnUWVQeHhxR1NCdXBfNlBmQ0dFOU5TUmd1TndLRkpFRnJ6SUF3RU9pQTJ4R2ZLV01XZThuYWpCZ1RsRUtkbzhoYXRqWHdMNDEwbkU1RXlsOTFTODdjZ1NzOWx5ZktwazA2Z3dDU0NsM0RRa1F4alFrWWt3U2xIVHNHbklxb2NRZTZqMTkzektuaGlzV0YxTkVvOElFRkJwb2RsTHpzb080S3Y3bVdHUDJhek04akhLTnB6Rjk4NnN6NjRINThYbUxVUkxyOWlqUW1TMzZOUUhLUE5oY2ZjWlpQc0xfVHZsVzFoOWpUS3ZEaDRUdDJUYzA4Vk1uTHBQbGc2eDEyaktTY0U5V0FoZEZVcFpuSE53OE9XVE9VSG1JcHBULUE2TWNlbGdFalhGZ1RaeUhzX3JHZ0R4cFhmQ0FZY3lwUWt5WnJKX2pVMl9LTkhHTllkTkZSQkplZUVZOUFrTllDNTJRS2pzd2pUVkgtcHVwbWlBOHlDVU9RaERPelE0a2xaVGxZSHowWmZEbzBVUlRKUmxxR2ZRTUhuMmdJTW9nVGVJMmlOU0g4b1JpaF9Qd3NtZ0xVcmJiRFNXWHhIX3lyaTlmY0JyckVTSGhYcGQwT2pwOTV5cXNNWDZKTHJPMG9nNEs5VWVMYmQ4ZDZab1k2TF9DQVV0eFROa1hDeE5LbXA2dGN1VzlJaGQyZnJHam9lRWlJRk1wRmNYWlk4NEhZelZNRkVQZGxiYnRYb05vX0lBVnBQRVdlM3RObV9oSklfdjE3VEpMdEdMWnJNVGh5UUtwYmxmbVp0T0tiSHFNZFlBVnBnOVJEWFVxUnFvZVFLYjBYZHhMa05DV2xLUDlxYk1UQi1lcXZKSDV6VlBjZlZwS2I5dzBPaTlXT2JsSnpDZ2VNaUprNkRNaUlfbi1uRlJrLXdLLVhXeG9sUzRNNkNITDhUX0hQbzNwSXBsR3NMTEZxOURzTjFIcXZhZk9ENFUxQWRSUXZmVlJMYUg5OV9jT1g4bTFBVHpXRkQ2cFp5b0xhWDMtQzh2blRMXzFBRFJRdGU0bWlCTXZBekc4MnJ6ZXB3d3BteFlpTHVNYm84NmpMVy1Fd0kxNDJMdTNldHJpRWd3SV8yUXFocHlaVEoyc3RRNVIycHAzVXBhZG5ES2FPWnF1cHNJR3RiM2tGLWlLNzJaLWttRXF3OTJ4c0ZDVEw2dEhSMEIzalFpQVo2MG1TQTNtVHY1SmQyVFZVWnZnY0wxSk80Y05UU3VTVjFNbzB1RDlzS01xdXp6VGZMUXRneVBVbmtadzdxUUtxdFpEYkVjTlJVNV9CeDZpLUtVVGJSTjFVclJCSDRZekVZSlNOd1hoR0FzRHJWbUotaXpTZlpNUVhSYUJuT1Q2Nm4wak02U2ltMmt4aTRhdW93VndpZzNRMmlVTjZhUW5OVFRTN0dBaEFLcFVubWhKVGF3Qms3anVtVkZIUFN5U0tLM0c0QkR4QTJiUTRkTTVPcjUxNEZZZzNuREl1OTM4bFdZNGdBc2o0Qm50NEVYRG9xYmYtNGV3TEhTZGhUcDFyT090a0JmOC02emhEcFdySVJsbmZnMTNlRkRnbzRzSTFxb0JOcXRFTWNOZHZXU01wRTBaVUJFcXpTdFlCNllMbUJKbnoyNkE5S1JOSkluQ2NrVkhOazAwd0xXeU1TU0xDNjA4QVBQNXJZRi16dmpPa1BmQXJ4SzN3TTRSemhJOHNNaDg2dVM1Qk05RzdfeENJNGRudGJwSVJqTnFsYnR0T3RGdnhJVjdPWlNqWkF1ZlFUNUNiMDd3ZnZnYlVJaE1BQVBPUHdUNDhTWWtmMTdtd2Q4RG9zS1lyeTBWcDA3NUY3ejZUaHRGZTN6NEFIakU4bkJXdXdOTm54bHVWN1k3dmtVUXBxdWpDZV9KbWUtdWJZQ3BEbHFVVnRxcmFyYXFadldxWmZxVUtrTnlGYzFvYWZ1QTJyTkM2eFFGalVJajlSUlZ5d1ExQUI1bDdsXzJGVlN3NzVNLVpBamNKVE1laU5NVjlzUjBPTnpPNTd6RU9LU1RNZGo2ZnFMQTZPWFlxc243bnZUUkQ3cDY0ekNMczdUZUVIaWFDUThQUlNLN1Y2enVWT2FHYlotcEUxNTVtWU1lbzMwYVZNUVZoaWxwU3FlVjNKSk1mcW9oRWxZSnRaZzQtTUJpbUM0cjdxX2RIT05fSFJpVVBxbGNuVllzNzVwUmdZVy1VR2wtamktajFUcjRUNkFrNmVfT2F4OTRld3BjZHB1Zk41Q0R0eElmV2I4aUQyMVI5VWtTbF9pRGRyZGlfSllPLWxXZkc0eVJpYlJYV0x2ZGlXdy1acU9UQVRUb1hlZlI2MnJ4MHdfTHc0VnMtTFI4UEpjSlBVdzdONlF3MjFOeC02ZHAxUk0xYnJQbW82clRnX3hURFFCb3dST0J1N1BGTVYxbnBJQnFCS2ZETmVMSW5zekd6LUsyTi00UmhKbXI4UXo4XzdhX0MtdUJ2TV9vOGo1OHFhdk5mRmtVS0RBdWpoTnNkTUdXMGNFaDBLRXJTc2xvd1hRcW1zeVRvd2xqUmlsSkNqV1p1MUZvX2dkZFAwSjB0THJqdWVzV254UkJDb0Z6anNQQnVBYW9DYUw2UkdmWHJ2NFNUZVBkV0dCNWV4LWRtWkdaOHVQcURRbEpqZzEyT0JnbUM0bWlHSWxjOXhwX19HY1lyNDNySml2NGxjNlg0bURvQ0VXa1NYdjBRakp6UV9yQ195ZlpMYWpTV0dYd0U0WnhnVlAwQWEzSUxzSkMyY09HNHpyTFNJME9QQTlJbkJfUjlBdXFMcHI0RnlsTFM2dEdDUTU5LXBoYVVkaG9US0NXd2hWYnR1NGQwc2pna2pueFExMWNpT0U4SFpBVkxRcUdiQ2RaUzYzV3dHMzJyejVDQjItYXJkVW5kTXRuT3d1MUt0b0RyNFBPay1PdlVUUVgzUlpoQ0pyeXB1V1d3Sy1hbHU3RnRrZVdBTDdIOWwyRl8xR2NpNGdKRlZXaFk2YWVKUW9WUmxTRVU0dGhXMUpvcE9wYktUVUl5UTlPekhtMkpuRDlPaVRXMTZrTldDMnR2YWF3Mkl2N09Cbzh0QURHWXRfc214OWJCS3Y2YTE2NHpCOGtIWTR5aHFNVU1UUlhUU2JmOElmMzhJUVNWMjdvTFJtX01aTFNaWU1lZHI3QUYzMGJyVTlfR3djcDEwc0t4NGxmNHNGbHBFUDlrZ0VwT3Vkei00UDJJUE00VTRrYnU1NTN0ZnVpYzJrZVQxMGlua3BEUzB1Qi1wV0dUNWJRSXBfRTJ1X19MTVQ1R2ZvMDE1WFpVdVNoYm9XcjYwaFlQdHRKTTVNM1Jsc2JBZ0lfTGJYNmZGRm1zNC0tcEk4c0FPOUM5bmYwYUdMTnZSX2pNMkFPdUxKaXJxRkIyNFlNTDVtMTE0ZjJBMnVyWUwyOTBaU3NiSlZJcy5FcUY0LWk3SGlua0NqOHRwcnVJdHp3.bpHFN0J05cjuUzFf4Jn6FVRw6GQgInXr_OMV2FS1obEMNTeoEZv_5PPlUiPK5OsZxNM0zBSk80OtETYvGC-FlwzfWqOVrMIzm7VyLcP4usucU9R4p8i1NetmQv_4RPUMI-Lg-z-ReSkJjiOO3feEScywjx2vnkEjESjN6XDZ6GDNCQ5yISynGpdmXxAdLIOrmF1WklYclXnsWPhQ5Mf5Ob-O4if1F9jNvRA6yf3TwVrxrrRB_k5_wq0h_xnf7oThprlSTpE-hLwC3aA-VB6ZqTu8tNLaB_hs01dodWTpAOcWzfoPT5NgjLHzIml5d_UExKSPExDthdyApIH2_pfUsg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK,  otpMaxReached=true, otpReason=PROVISIONING)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;true&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK,  otpMaxReached=true, otpReason=PAYMENT)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;true&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK   panSource=KEY_ENTERED)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK   panSource=MOBILE_BANKING_APP)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;MOBILE_BANKING_APP&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (kid=FASTTACK   panSource=MOBILE_BANKING_APP)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;ON_FILE&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (tokenization_path=Yellow)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU9ERXdOakUxTml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5Lkp6UGwtdjZkZ0tIRGp5c1VZaHhEODZ3OTFhakxLVjMxaDJyMEpkLXRWODhKcXNCMERxQnp0QlE0MzZ5U0pCRGFWVjFQVGdZb2huSXZhVTh2cFkyaEFuQnh3ZXRMd2pLd3dqMzRvM1lIc1oxNnRMLVBEaGI5cE42aEFsemhmR0QwR0pra0RyekF5VVpLNkxYc1B4ZGpZay1PanNhNHYxcU9zandjcFp6bWpPd25BaERoc2sxU0cxc25td3A4ZjNPRF9VN3AxZ000bzNmaWtZWU9Cc3Z4Ylg4TWpzNmNLeHZCZnZnWDBpWF9jVDNlc01pX3hHWklWZVJPS2paWDdCNUZkTkNLeWpPRHhzNzRUOHJrbUlNUnlkbDViRDVuQ3NsamdzUXNBMDNmUEN4V2dCTWFoaHN1dTJuX2liUzhvMXpsaUpXUC1QelI3dTdZWV9tdlRDU2JOQS5GOW9kRUlCUFZWdlE4S3I4LjV3SG5XUHVDNkZTaDF6N0FYOGpxWklYd1ZUUVY5a0c4cUxMZ1JoMjcyYkVxR19iVFBGdTBnTWNmSW40U0hZa1ZTVWozMVZaWm9BTkZ4dDJhbGt2WUFQaGVfRWNldmxlZmZ6bFdxdVlmWDVlTWd3VFVqUjNDSUlXM1lwSi1RX0o5Rmt4YkI5YVhJUVFpQlhIQWRIZ1NTV3J6aTc1NDVpcnRuWktYSHg2WVVWR0xPNXJlbWptenhaR0FobkpLZjFMMG5USnBONnFsUi02TDF5dmZlYlNqMUFMaUo2Q05UcG1Jb0hTemQxb0RscVVmWDBQMmpJYjg5Skg4NmlTWXRMYUUwOEotYThUcmE1dnM4Q2JCMTQwdUdCcVAxcm5YRDd0ZU1XbWJTZWp0dFNYWjVjTUtWTEN0dUVmVjlMbm9HbVNTNVlXSndpd0YtM3NpcmM3UjVKMnVzNWNocHhVSDBQSkcwMTFuRXJabHB1ajJQNkhKVWhwQVFITHVtRnFwOW9nZ3hXMVFaTkFndWZ5dE9xMlRKQV9TUVZGUGNEbE5oV3FLYkhqVXBhX00tbUExc3B1ZHpLUjQ0RTFsNHBQdmYxVDdzQ0lYaEE2WmJJeElrU3pzVGptRHJBaGRtcUthdkxUWkFPR0t3d0xoWUt4b1lfZGlWMGxfeXNPdmZSV3FjM3l6RUFyWmVpVDhYZGJ0NEZLWnBWY2VwV0RzbEN4OS1sVGVqRTQtNFlMV2lFU0lsVDNkbzNYd2x4UjFadmdISUM4S3dBejFYcmFRRU95TEVLQjFFN0FYYXZPaTRHWjl0M0gzUFN4U3NIZEh0d3lmSTFOZTZuVUJFam1zTzZfa20xSTFUazdGR3ppZXQwbWttM0ZrSF9abGtEeDR2a2kwOFZmbEdoUDZPLUlFN19VNjU1SC1SeG44TG82VHEwZW00cWx4bGFMc1RSTWVPWmUwNU80SHZfQ1YxczdLZDhGZnEyUks3UEhJcHZtMXJfSUQxZ2RqcEM0LU5McHJFTjUyRHVnWndJOGlDMzh2Vy1ZSVc1NFI2RVVyZXl0LXUxNzc5ZjRlMWdtX0pPTy1vVWg1NEFtWEQyRVNHd2xVbGhvcnJBdV9aWHlGMUZfVGkwcDBPdGtLZm1kS01OT05sdFM3eU04RmZnSGJwS284MFM1Tnd0YS1hUl9fWFlQOFNJcERsQm13VENydThiN1NOZERieVhiRXpidUdJcm1CeDdST3lTMS1tUWlOcHhEU1N5SUtZYTR1cDZHdTYzam9BcjdYMC1kRTBvYUMycDNPNU9kc2h5X1RkZGRJdWtjM3dhTFljOWMtSy1FT1Vyc0ZBdzBwRUhTWlR1U2FLdHlOX0piX0FfQ2YyOVlISWl5alh0YjBwbDV0R3lKc09JdXlvVDhGald6Tl9QNVdOVWV1V1lLLV9PWk00OTdMbHQzUngta2pJZnZqSHRhMm10ekNMMm85RmQ2T3JfcE9pSHlzRHF4QkVfWjgzeE9uVGtaNjF5ai1ORzktbWVzZzdWMEFhODRNemlKNGtDZV90SXF4Tl9yWFZ0elF4c0lla1p1TXJSbnRIRzRYdGlNNzRaRmo0VUN6cTBtc2hqcTdnTHFpTU05RXBJY3Z3dGJGYTd3cHNQclpxb3ZlSUgwU0I1SmMyM2tDdzBtXzE4Nkk3VGR1RWZHSHBsaWx6WkcyX2pLUEJaSWF1R3RobktDWFBaWjR6ZFdIWWRPbWNoUTRDNmdSTDlSU0pCbHpRLTRfU214V0VZWFprZDE3bzZNRUp1Q3Y4cFRlQnl6bHBNWjVrbzltV2s0UG1YSklzSDRhSGdxRUg0NnhBNk9xZXlSdUFEYnc3OFI0OElYRTlKV2JkOUR4dTBFMWpSOWNpX2hnNnRMd3p2X1NmZXl5R1l2Z0lMQmVzQjczQjEzaDdCeVVtVDZXV3YwRF92N3NxbUxGWmZPSUItb2p5TGJTMUZPeEtZbEpnOTNUbnR4Zkt2S0hoM2puUFRHVFctSFNCYzJZTzJMeVVidWhkUGVHa25FUHB3dDlLVUVRTWpGQ1FncENRSlZidk9HVkZVbExNVXpvU0U1ZDF3Z3ZFaUkyOGh3V0I1VnBURTVtZ1hVOVZQNjRvQmowR0NNeGJQNHZHd3MtRjU5LUtDLTFtMnB5cE5iUmhRbU5iaFVGSzhscmwtRzRyRXh4NkI1dGF0MzZ1MV82czRISEZRbTAzSmc3S3dGX1lIcnJKU1ZJVkM1RWtzN1JNV1EtS0dtMmdzV3lRNENhS3NmOGJ5akV4Mlg3TERHUXFFZzlGUDQ4UlhKR3VpQWx4QVBxUVBlR3dseEU5M0hVZ0xJM0laS2U1MkxXSmhJaFRpRzQyR21SNENvRjdibDNzRFk2S09ZaWpNMTFXX0Vkc2xmMGwwX0N3eHdiX3ZEYm9UNmJaR19DR1E1bTVQdVo1TnROZXJwaHZVQWJYd25HV2g5dElYVE9Ua3NDb2ZSQlJaR1pYRTAwZ2IwSkR1TDg5bUo0OGFiTUo1N25fdDZTVDVNMG9xWmRoa1puajUwQ1V2YVp3MS1nZ1hIOW9yTHhrMXFrRHBfU01fTFBmTGM5VjZZQlNHLXJWQ29ON1pGaGNJZUp1SUNBRWVrWXhHXzYwa1hRbHFETWpFYlZma3gtRV9uS0VCcHNaYVdpVXBTMnVPT2JkZ3RrbmFCbnJkZk1fd0dlLUZzNkZiS05jdVNrLWptOTFiQkhWMmFYM05HdzV3cUlfZDRnTDFUV2pQYnZiZEVsOTd4cjZTc21GUnI0bXd4UjlEWlRhUnhJa2NLVmwyZFhDNEtRZmJBV1FCRzdZSVpjbkJOUzI3QUhBczFFVzR3UENjNjBSNTZKNDY1X0FYcVNHcExFNzR4ZzBPVWYzMWpjVGR0d2NuNkladDk4SzBCbFNXc2x5MU9XOWJQVVVEYzRNMDJZalhPQTVQOHgtYnJyMlR5YzRLSnBsLXBVeU9UdGdZME12dU8zZUNBcTRiajI3OW5qQjZod2hkM3FFYVRmbC10QTk0N1RNYjI3RU5nTU00ZENpbzkyU0x1cjJnNlJtbmRaWGhzdDU4NDZTdGdrNnJjRV85OG5Md2ZPa21UUFJITVdhdnA3Z3owT2VzWjhONVRZTWs4Y0FXUVBaREJIdUR1cWNBYThaS3NzOC1kNERLQ2NZajVYNGR4anJFZHFlMC1qM1RNLXZ6ZEpTM0pRaDZ5XzVCTVBKdkgtd2xpTWUxQldlV2k2bEpWdTl0QzJ1SzNtWE1KZUFzX085VHByVFQtT0RWemtfbVR0NzNSbzlJd3oxM0xDMmN6VXhGYUsxOFI5eTVUblBwRW5nQmxDQy1peEx1ZHB4Wmx0RDhpTEJjWVhMUklIZm41R3lmR1o3WGlxRUpoS2ktQzVEamprTzM1a3k2b3ZOb0FWc1FzZlVOUklkN0xob2VXY2xwT0VZNVFrS3JGZFZFRU11Wm9aNDctcWtPZkxEdHlHdmotWThVUjRqaTUwOWhGUkQtZmxaRlJIVkpscU9HVFRRNjdOUDBhSnAxQ2t3WWhEMEw3QmdfT19CT1VNY2hQb0RvOGY0VGFkSVktS0I1UElSREVXVGV5bFdZRV9ZUTNKRW80aTY2QzN5aWYwR1V1aVpQczJUTXk5YUpmeEJDdVVPYWh0NEJXM3l0V3B1TEZWQmpvS1d3cnJZQzFrbDQxdVJWek1yZ3pZdXdYVFozYlM0ZS1EV2FZMTl3VEttLUQzVTVmWUp0RTVSNy1LbVh4cDYydjJyQ0RoandmdnhHRGNzb1pVOVdzejdLdnB3VkdWOXRuaHJFd1czSGNVLTlWV1R4ZG5idjdxaVY3RGJpSjJEUHBULkduaU1XakprRE1lQ0hES3JpNkd4b1E.wydW64Nb12gfNp6yHm0JDF2NsHt1RWzAewu5gf6nafa503t4J6OJZ2jM7Tr5CvcD-FUGUVXZ_NNLfPD46OrHNMOaN1aXrWheQJMGVuXB4jJThD1fuDK4jrEvuIqveLieh5ntujhOerbCqpV_tJYpblgyIWOna5i4iRRvk5kfwoWbpJqdjahhFQYKjlphc9-XchZ_IcCTSVlac0mhbOLzLRgYvOuix6lw1vX6WI_W_AHB1UGQHAU8ywkHbt0QWUYJvHnu3ab4U3_WngRVhSaSEThvIhEXICYS6XAdsB4JU2506uwyiSBud6igwkGKZfy7l4wX3j3j_YotnPMKz0ZHvg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (tokenization_path=?Orange?)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
   &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU9ERXdOakUxTml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5Lkp6UGwtdjZkZ0tIRGp5c1VZaHhEODZ3OTFhakxLVjMxaDJyMEpkLXRWODhKcXNCMERxQnp0QlE0MzZ5U0pCRGFWVjFQVGdZb2huSXZhVTh2cFkyaEFuQnh3ZXRMd2pLd3dqMzRvM1lIc1oxNnRMLVBEaGI5cE42aEFsemhmR0QwR0pra0RyekF5VVpLNkxYc1B4ZGpZay1PanNhNHYxcU9zandjcFp6bWpPd25BaERoc2sxU0cxc25td3A4ZjNPRF9VN3AxZ000bzNmaWtZWU9Cc3Z4Ylg4TWpzNmNLeHZCZnZnWDBpWF9jVDNlc01pX3hHWklWZVJPS2paWDdCNUZkTkNLeWpPRHhzNzRUOHJrbUlNUnlkbDViRDVuQ3NsamdzUXNBMDNmUEN4V2dCTWFoaHN1dTJuX2liUzhvMXpsaUpXUC1QelI3dTdZWV9tdlRDU2JOQS5GOW9kRUlCUFZWdlE4S3I4LjV3SG5XUHVDNkZTaDF6N0FYOGpxWklYd1ZUUVY5a0c4cUxMZ1JoMjcyYkVxR19iVFBGdTBnTWNmSW40U0hZa1ZTVWozMVZaWm9BTkZ4dDJhbGt2WUFQaGVfRWNldmxlZmZ6bFdxdVlmWDVlTWd3VFVqUjNDSUlXM1lwSi1RX0o5Rmt4YkI5YVhJUVFpQlhIQWRIZ1NTV3J6aTc1NDVpcnRuWktYSHg2WVVWR0xPNXJlbWptenhaR0FobkpLZjFMMG5USnBONnFsUi02TDF5dmZlYlNqMUFMaUo2Q05UcG1Jb0hTemQxb0RscVVmWDBQMmpJYjg5Skg4NmlTWXRMYUUwOEotYThUcmE1dnM4Q2JCMTQwdUdCcVAxcm5YRDd0ZU1XbWJTZWp0dFNYWjVjTUtWTEN0dUVmVjlMbm9HbVNTNVlXSndpd0YtM3NpcmM3UjVKMnVzNWNocHhVSDBQSkcwMTFuRXJabHB1ajJQNkhKVWhwQVFITHVtRnFwOW9nZ3hXMVFaTkFndWZ5dE9xMlRKQV9TUVZGUGNEbE5oV3FLYkhqVXBhX00tbUExc3B1ZHpLUjQ0RTFsNHBQdmYxVDdzQ0lYaEE2WmJJeElrU3pzVGptRHJBaGRtcUthdkxUWkFPR0t3d0xoWUt4b1lfZGlWMGxfeXNPdmZSV3FjM3l6RUFyWmVpVDhYZGJ0NEZLWnBWY2VwV0RzbEN4OS1sVGVqRTQtNFlMV2lFU0lsVDNkbzNYd2x4UjFadmdISUM4S3dBejFYcmFRRU95TEVLQjFFN0FYYXZPaTRHWjl0M0gzUFN4U3NIZEh0d3lmSTFOZTZuVUJFam1zTzZfa20xSTFUazdGR3ppZXQwbWttM0ZrSF9abGtEeDR2a2kwOFZmbEdoUDZPLUlFN19VNjU1SC1SeG44TG82VHEwZW00cWx4bGFMc1RSTWVPWmUwNU80SHZfQ1YxczdLZDhGZnEyUks3UEhJcHZtMXJfSUQxZ2RqcEM0LU5McHJFTjUyRHVnWndJOGlDMzh2Vy1ZSVc1NFI2RVVyZXl0LXUxNzc5ZjRlMWdtX0pPTy1vVWg1NEFtWEQyRVNHd2xVbGhvcnJBdV9aWHlGMUZfVGkwcDBPdGtLZm1kS01OT05sdFM3eU04RmZnSGJwS284MFM1Tnd0YS1hUl9fWFlQOFNJcERsQm13VENydThiN1NOZERieVhiRXpidUdJcm1CeDdST3lTMS1tUWlOcHhEU1N5SUtZYTR1cDZHdTYzam9BcjdYMC1kRTBvYUMycDNPNU9kc2h5X1RkZGRJdWtjM3dhTFljOWMtSy1FT1Vyc0ZBdzBwRUhTWlR1U2FLdHlOX0piX0FfQ2YyOVlISWl5alh0YjBwbDV0R3lKc09JdXlvVDhGald6Tl9QNVdOVWV1V1lLLV9PWk00OTdMbHQzUngta2pJZnZqSHRhMm10ekNMMm85RmQ2T3JfcE9pSHlzRHF4QkVfWjgzeE9uVGtaNjF5ai1ORzktbWVzZzdWMEFhODRNemlKNGtDZV90SXF4Tl9yWFZ0elF4c0lla1p1TXJSbnRIRzRYdGlNNzRaRmo0VUN6cTBtc2hqcTdnTHFpTU05RXBJY3Z3dGJGYTd3cHNQclpxb3ZlSUgwU0I1SmMyM2tDdzBtXzE4Nkk3VGR1RWZHSHBsaWx6WkcyX2pLUEJaSWF1R3RobktDWFBaWjR6ZFdIWWRPbWNoUTRDNmdSTDlSU0pCbHpRLTRfU214V0VZWFprZDE3bzZNRUp1Q3Y4cFRlQnl6bHBNWjVrbzltV2s0UG1YSklzSDRhSGdxRUg0NnhBNk9xZXlSdUFEYnc3OFI0OElYRTlKV2JkOUR4dTBFMWpSOWNpX2hnNnRMd3p2X1NmZXl5R1l2Z0lMQmVzQjczQjEzaDdCeVVtVDZXV3YwRF92N3NxbUxGWmZPSUItb2p5TGJTMUZPeEtZbEpnOTNUbnR4Zkt2S0hoM2puUFRHVFctSFNCYzJZTzJMeVVidWhkUGVHa25FUHB3dDlLVUVRTWpGQ1FncENRSlZidk9HVkZVbExNVXpvU0U1ZDF3Z3ZFaUkyOGh3V0I1VnBURTVtZ1hVOVZQNjRvQmowR0NNeGJQNHZHd3MtRjU5LUtDLTFtMnB5cE5iUmhRbU5iaFVGSzhscmwtRzRyRXh4NkI1dGF0MzZ1MV82czRISEZRbTAzSmc3S3dGX1lIcnJKU1ZJVkM1RWtzN1JNV1EtS0dtMmdzV3lRNENhS3NmOGJ5akV4Mlg3TERHUXFFZzlGUDQ4UlhKR3VpQWx4QVBxUVBlR3dseEU5M0hVZ0xJM0laS2U1MkxXSmhJaFRpRzQyR21SNENvRjdibDNzRFk2S09ZaWpNMTFXX0Vkc2xmMGwwX0N3eHdiX3ZEYm9UNmJaR19DR1E1bTVQdVo1TnROZXJwaHZVQWJYd25HV2g5dElYVE9Ua3NDb2ZSQlJaR1pYRTAwZ2IwSkR1TDg5bUo0OGFiTUo1N25fdDZTVDVNMG9xWmRoa1puajUwQ1V2YVp3MS1nZ1hIOW9yTHhrMXFrRHBfU01fTFBmTGM5VjZZQlNHLXJWQ29ON1pGaGNJZUp1SUNBRWVrWXhHXzYwa1hRbHFETWpFYlZma3gtRV9uS0VCcHNaYVdpVXBTMnVPT2JkZ3RrbmFCbnJkZk1fd0dlLUZzNkZiS05jdVNrLWptOTFiQkhWMmFYM05HdzV3cUlfZDRnTDFUV2pQYnZiZEVsOTd4cjZTc21GUnI0bXd4UjlEWlRhUnhJa2NLVmwyZFhDNEtRZmJBV1FCRzdZSVpjbkJOUzI3QUhBczFFVzR3UENjNjBSNTZKNDY1X0FYcVNHcExFNzR4ZzBPVWYzMWpjVGR0d2NuNkladDk4SzBCbFNXc2x5MU9XOWJQVVVEYzRNMDJZalhPQTVQOHgtYnJyMlR5YzRLSnBsLXBVeU9UdGdZME12dU8zZUNBcTRiajI3OW5qQjZod2hkM3FFYVRmbC10QTk0N1RNYjI3RU5nTU00ZENpbzkyU0x1cjJnNlJtbmRaWGhzdDU4NDZTdGdrNnJjRV85OG5Md2ZPa21UUFJITVdhdnA3Z3owT2VzWjhONVRZTWs4Y0FXUVBaREJIdUR1cWNBYThaS3NzOC1kNERLQ2NZajVYNGR4anJFZHFlMC1qM1RNLXZ6ZEpTM0pRaDZ5XzVCTVBKdkgtd2xpTWUxQldlV2k2bEpWdTl0QzJ1SzNtWE1KZUFzX085VHByVFQtT0RWemtfbVR0NzNSbzlJd3oxM0xDMmN6VXhGYUsxOFI5eTVUblBwRW5nQmxDQy1peEx1ZHB4Wmx0RDhpTEJjWVhMUklIZm41R3lmR1o3WGlxRUpoS2ktQzVEamprTzM1a3k2b3ZOb0FWc1FzZlVOUklkN0xob2VXY2xwT0VZNVFrS3JGZFZFRU11Wm9aNDctcWtPZkxEdHlHdmotWThVUjRqaTUwOWhGUkQtZmxaRlJIVkpscU9HVFRRNjdOUDBhSnAxQ2t3WWhEMEw3QmdfT19CT1VNY2hQb0RvOGY0VGFkSVktS0I1UElSREVXVGV5bFdZRV9ZUTNKRW80aTY2QzN5aWYwR1V1aVpQczJUTXk5YUpmeEJDdVVPYWh0NEJXM3l0V3B1TEZWQmpvS1d3cnJZQzFrbDQxdVJWek1yZ3pZdXdYVFozYlM0ZS1EV2FZMTl3VEttLUQzVTVmWUp0RTVSNy1LbVh4cDYydjJyQ0RoandmdnhHRGNzb1pVOVdzejdLdnB3VkdWOXRuaHJFd1czSGNVLTlWV1R4ZG5idjdxaVY3RGJpSjJEUHBULkduaU1XakprRE1lQ0hES3JpNkd4b1E.wydW64Nb12gfNp6yHm0JDF2NsHt1RWzAewu5gf6nafa503t4J6OJZ2jM7Tr5CvcD-FUGUVXZ_NNLfPD46OrHNMOaN1aXrWheQJMGVuXB4jJThD1fuDK4jrEvuIqveLieh5ntujhOerbCqpV_tJYpblgyIWOna5i4iRRvk5kfwoWbpJqdjahhFQYKjlphc9-XchZ_IcCTSVlac0mhbOLzLRgYvOuix6lw1vX6WI_W_AHB1UGQHAU8ywkHbt0QWUYJvHnu3ab4U3_WngRVhSaSEThvIhEXICYS6XAdsB4JU2506uwyiSBud6igwkGKZfy7l4wX3j3j_YotnPMKz0ZHvg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (DeviceInfo=UNKNOWN #1)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;0414103B864980018088017685946200D290CAE7D7860CA7&quot;,&#xd;
    &quot;deviceType&quot;: &quot;UNKNOWN&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380952711598&quot;&#xd;
  },&#xd;
   &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU9EUXpORE0wT1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5Lno1Nm5Na3g1bldhU0RwNS1NcTNsaXlTT3lNdzBFa3VMaXNSbkNHMlV6SVAtWkpqVjNvNklYYjRCVzIxbFNzLW53S3FTQUt3ZzFGUkZZZmZFdG4tb3RmLVpGVDNvM1JNTk52dENLYmFKcnh0d3dkTGhqNGFoUzY2RlV0VGtMdm5YZm1Yc0U1dFhaV3lQQTlGUll3aS1jZHR0dGhjQWFkSjBETmM1VEFIS1E3Tk9BdWVRU1d2THRRZ2haVXpCSHJheExqUzV2empMTEhxOGJ5aExEVllILVZZSVVFVVpLQXRUWGk1d3N5bDVPNDZXN2VWRjc1b1lOS3Q3bWthdm1BX2drOWpnTWpaREVER2pUenUxclF4ZUtyai1EVmdYT2dKbk82cTlFZDcxRUJGaHdQXzBiajRVTXFlQVd4d2lMS0ZmdFJtNm9PVDR5eE9QLW5hQXB3cDVfQS5oQ0UxLVEzSmdhRkNqMEhtLldTYkxjRjI2MFpLVkx0OEktdmR5cUZQNmQ5ZVk5ckxENUhLNS1mcWNfalFUREdZRkV6Q1J6SG1DNHV1YkhWYm1aX1RGNlVOc2xhRmhTRWprWHVLU1Nwal81dGpiNThfbkNhZkk2UTU5ZFVzeFpUM3JYVnZ5NXAtZG5rS0R0dVZ6eTdfMzExQmY0LVVlWFFSd0l3TVNlSHVGbkEwU2t4R2dmNlpSeFdneUltczBlTjFXRFZMYWxINVotTEFJTjV1UmhXTk84cWNhenp4MUxxbUtRUFVEcmQtU1NmcmRPMVNnTGVUYUpGbkhrbDZZZ3FWdlFUMmV5WUxLaGxyODNJRGFOQXlsSmItWGpfLS1VRmhmV3NOWmMtRUctQ3BQSDZULUxqYm5RYW5ZbFVGQkJvUndLc0ZwM2dUa3M4SU5UQ1k5Z0pacnJOTUtFMFpmQVFVRFJHLTlycXdZUnVOSVN3clFkbUEyTWozNVFCUTVQMnlFOEtoMFRHYVFHZmU1b2tBSEptUjRzajVCNVBnajZpUGZseWZaNE9CVURGWldtS2l4SEQ5dmJNSFlfU0lteTFvMEhaMDJjXzlRdDFZZGhweko4dGlhWms1MDJPUXF4Q3h0ZW5ZeTZaU042dGk3NzVVNmtlcGZ3dWlWZlRnRWdUbmdsaTVnbUpyYjdUejZUSlVUblBhOU5fMFhfMktHMHlnRS1pX2FXWTBwOFFvNW9RZW1YcmNsR2hxRGZwTVhOQWVZeHpZSEVrOWlmcy1WTXNHa1NrOFM0cHotRHRqZHZVc2E3TUxiQmRFWmtDc2tfTDgtWHZFUGtHMVVrSjRTZEcyU0FybDN6YzZaV3VlZnlWbWR0RElYQnRDdklYYV9fZUt5R01WVkRkN2ZuSFlGSVNTVGdlaS1rcHFDY1pmWVdyNnhIeG5YTDJkUlFFQk56X0MzazltT09zRDZDbzZWYTNicExJZEhBcldGUmV6VGltSTh2QVNJdG9GQXdHaUs1bGdCaE1YZk5UWTEyTHBZN0NzRnRuOExEZi1RV3JKZDFoaTBCdWs1Z2tGaWhtVEtqVlA1Q2ZwMDVSZ1kzNVUzYVI5RDg3U1U3UWF4ekQ0Uk55UjUwT21Hai1hNzhwc2xUb2pfa2lEa2w0SXNXWS1nRkx3dm5STENRakJBSkkwWm90enk1dzdHQTJLaE1YUm03R0JxYnJHbnN2bGZfYVA3aDdHWnVGeUdRTExhQTViMm9jTEVrcmFJaHhlQ2MwS2JUQ3cteHBKWEs0Y1FfdFhQdDJEeXNDVURnWlBXeGVZUmp6dERPZHVTeXdzeENmNFM3eXJJNXlGemRMa0lTWXAxTXhqOHpiTzRSVmZVWHhqOHNSNi0tMzNrLTZ0ZEhzNVdPeUl6ejJoRHpVekMtM09uQkhtVUtiemhmSV93ZEFpdDlGNkN0RmhsS003SlVWbkZsVU5neWl4R3J4S1lTQVByNG9sN2NTLVVySjlwUW9SNkdSVHJGN29yenBHcXh6YUt6cVZqZHJhS25YbXBTS1diYlRVUENOUVhyQmZQOWZUZXFrc1NXcTEyRlR6cTFPcVpjN3NodEtFT0NUSjVSX3lSUUdGbHkyTi1NTHQwd2w4cGNzdkJJUTdYblpfWkUtM21lSDFYZE1DNzcwQ215ZVkwdEh1RTZ2VFBZanU1ME9vNXpNWXQ0N0YwcW1SRHdzN3JZNDBHTE5rUDBJY2dEYjVPMDh5NGR4ZndFcjZKQl9rbnlZQnR5LVNNS0tXWFpSZ3Yxb3RQWVhfOF9NbnAtclg5N0trTExOeHRvdlpfYkpPWm4zb2xvVVlRUmNsbWRhNFR3TUFvOVA5RDhaLURZekJIeXRoY28zdVA0dDI5UndET2F2SGVXVkgzZjFYVlNzb0VOTU53YWpMb1ZqTjluOWVoQ1d1S3oybW9lUzBpdkctVVcwaVI1OWxhWVV3Nk1nZjFuYTlUUjhlVTJBNEo5YWs0a3lRQ3BybmtvSHVQZUpfWnpCQXFqOUk2anNHOWhMeWg4SzRTZVR0N0lZemFJdjhyZU5UQkllenFFX2NfMUt2UDctYlg2NkhONndpQ2t0RzRnMDFfcDhaVGh5T1RpNk1xLUtVVjdlMk11eGV3YlBHaTk5d2NQNjZwdFJHNElGX0hpYWo2WlVXTmlzMTNBaHZvWHA4aHJ5M0QyTWFDMzZUTy1sS2dXUmx3NDBpNmQ0RlhZNXZLOHIzdWRoUDNacUV2bEZNQThPdkVscmZRVkRtVHRjcDFlYXJlNHZSSTdCcS1mNnNicTBIX0wzeWtXczU1cnozQ3pzSzBFMXJvcnk5Z2ctTWRySHlhU0xzbDd0QVEwSXB0dFlTUFpkeVMzOXd4bE9lNHpEQjhfbl9DVVhJSFNBX1F1NGh0Z2pjc3ZuMUs3Y0dERmt5WWszTDlmQ0t6ZndrTGhTb3g1MllrNG41RG05SEhOR2JBZlJGcGtycEhNX1RYem5xRE4xSV9fTUFDVGRqZ3o1OGdiUklJdFJ6bzRncFNsWmlwV0lVNzhyNXZwcFNTVDFxSFpGSFpGejQwZ2V5bnNhSUhSX3BneTUyeC1SSGNhNFF3MkQtR3llWEN6b09rRUdoU04xQldkQlhfcHJkV3RTR2FOeTlPQ3Z1bHZ2VUdDbkQwOXVtcjdJNjFEQTRGZVlPaEtOOGVVc1I0QjJocTNyR28xdnVyNmE2MFhwMjlKaHVMbEhhcm1LbkZJOXlSdHUzNHJVRVltVEFXRUtmeDEyOEpJVUFRUWM4QmJtQ0F0b1VmandRTGhuODRra0IwX2o5eUpGdmNXTjZWdVR2cUljNXRJR1NRc2RFakdZM1luOS1QZl9HZnFmUFRVS0NuelZQVkY2V19nZTdiYUdHa29BSXNBY0RoX01IZVhRYkN5Vm5jbnBFbkNHclNLd0t2WjcxTEZtYldrVkowTnJpdS1BSmZNOFlwSU9XV0xqMjVPVml5UFJLRFlaSGVBZWtnaG54TVVqdFJtd0Z4MndFM1owTjF3dGVpM28yZVZ0QjhHR0pGLUp2YmVFd3F5MUl4STZvc2RxeVFXandKcFpvSDcxUHFlS0c3aHVjS3ZCc1pLRjhaUmx4QkR1SlBjZnBSb3BWWHNpTVNxRUNfUmZLZFdQYmdVUGRYN25ZYWZVMkN4YzM0MGNSaDVTWm5aNklLQ2l1c05kcVRoV2JONkZzb0dsaXo2N1drTDFBNXBKdjBnZTlPdWNuVlcyU2kxdkE5aDdEUXhJOVlZblVIUkZaeGFUTDI1blQxSUxGbG00WXVBM2JXcHJmVjNhdDBBV09DTWZDZU9WeGVkd2p3VXp3ZFM1YjhwNy12dkhxUDBYNlgyMUVLZDd6X1htS3NjZ2J4eWhCRWpDcEIyY2JIbXFfX25UZHpaakdjemNac0IzYjhrbmFUU1B3YnlzYkNoaU0wOW41QnVvM3lKWFlBaEp5NHFxb1RCZUIzSWZIZkI5Ul9CNXhaMmw5QWMzdlV5bGE5WUkybHlHUmxfbU5KRkZaZUJjTzlYeUptMVF2ZUtYWjZXZVRlY2NfVkVSR1Z2MkM4Q3hPSFV5RTVyVEhjOTNOc29odlA0VURFRERGYzYwSFd6VXBYMjJCaEJla1VOMVFLbzI1T2tXT2dmZUdHNnZQYmE0eHJnY2Q0R09oNjhhRm81dzE0emlBcURLcE92b1FOV2o4OWVpZVhrMnQxbHhnWFQ1WHpTOGZEaFQtbmJGdTkyRjZDT081aDQ5QTE3dzhoYWwzSHl3d2F4WHF3bUVvcVhhOUxVRkxtdUFNWUxlbTBDSUlNUURtRmtGUG9KMXRfYUFEbGhpSzRJRzB1T3kzRzVlR016ekt5VGVnNC5WNVc4SlU5bGNmbVpOVVlmTjFVa01B.TrBOk81h8G5jnodBg5ICPNciIsJ0n0VHlWwmT7WAxyVRvsaTVngQIbMy7x2sAMjx-0Nn1n9jrZu_H1qemyxVYJQL0IpqOt_wSiO8j9XmhcvFZ7Etl1PEZWJlTvQRa5WF3RsAFZAWSer4vFkz5gaOMuSkdTvLpj24NR2dfuu5dWoy6ys5kyAyuzEIAB2frgBOQxdujGluFjfFcBiGDuksDeg4Qmo6hFb1ouAtfyUy0PzCmwBd5c0ky-QqXeW4B5XUz8j20BYhoalVQtjS04CyNspg3RXyOqvHV5PfppifZUR8DjVGfPcirnuCk72RHCB7qgWaDJGTi4lCXjHMeB54Dw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (DeviceInfo=UNKNOWN #2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;0414103B864980018088017685946200D290CAE7D7860CA7&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceName&quot;: &quot;RXVnZW4ncyBpUGhvbmU.&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380952711598&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+52.14/+4.51&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;171.33.134.77&quot;&#xd;
  },&#xd;
   &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU9EUXpORE0wT1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5Lno1Nm5Na3g1bldhU0RwNS1NcTNsaXlTT3lNdzBFa3VMaXNSbkNHMlV6SVAtWkpqVjNvNklYYjRCVzIxbFNzLW53S3FTQUt3ZzFGUkZZZmZFdG4tb3RmLVpGVDNvM1JNTk52dENLYmFKcnh0d3dkTGhqNGFoUzY2RlV0VGtMdm5YZm1Yc0U1dFhaV3lQQTlGUll3aS1jZHR0dGhjQWFkSjBETmM1VEFIS1E3Tk9BdWVRU1d2THRRZ2haVXpCSHJheExqUzV2empMTEhxOGJ5aExEVllILVZZSVVFVVpLQXRUWGk1d3N5bDVPNDZXN2VWRjc1b1lOS3Q3bWthdm1BX2drOWpnTWpaREVER2pUenUxclF4ZUtyai1EVmdYT2dKbk82cTlFZDcxRUJGaHdQXzBiajRVTXFlQVd4d2lMS0ZmdFJtNm9PVDR5eE9QLW5hQXB3cDVfQS5oQ0UxLVEzSmdhRkNqMEhtLldTYkxjRjI2MFpLVkx0OEktdmR5cUZQNmQ5ZVk5ckxENUhLNS1mcWNfalFUREdZRkV6Q1J6SG1DNHV1YkhWYm1aX1RGNlVOc2xhRmhTRWprWHVLU1Nwal81dGpiNThfbkNhZkk2UTU5ZFVzeFpUM3JYVnZ5NXAtZG5rS0R0dVZ6eTdfMzExQmY0LVVlWFFSd0l3TVNlSHVGbkEwU2t4R2dmNlpSeFdneUltczBlTjFXRFZMYWxINVotTEFJTjV1UmhXTk84cWNhenp4MUxxbUtRUFVEcmQtU1NmcmRPMVNnTGVUYUpGbkhrbDZZZ3FWdlFUMmV5WUxLaGxyODNJRGFOQXlsSmItWGpfLS1VRmhmV3NOWmMtRUctQ3BQSDZULUxqYm5RYW5ZbFVGQkJvUndLc0ZwM2dUa3M4SU5UQ1k5Z0pacnJOTUtFMFpmQVFVRFJHLTlycXdZUnVOSVN3clFkbUEyTWozNVFCUTVQMnlFOEtoMFRHYVFHZmU1b2tBSEptUjRzajVCNVBnajZpUGZseWZaNE9CVURGWldtS2l4SEQ5dmJNSFlfU0lteTFvMEhaMDJjXzlRdDFZZGhweko4dGlhWms1MDJPUXF4Q3h0ZW5ZeTZaU042dGk3NzVVNmtlcGZ3dWlWZlRnRWdUbmdsaTVnbUpyYjdUejZUSlVUblBhOU5fMFhfMktHMHlnRS1pX2FXWTBwOFFvNW9RZW1YcmNsR2hxRGZwTVhOQWVZeHpZSEVrOWlmcy1WTXNHa1NrOFM0cHotRHRqZHZVc2E3TUxiQmRFWmtDc2tfTDgtWHZFUGtHMVVrSjRTZEcyU0FybDN6YzZaV3VlZnlWbWR0RElYQnRDdklYYV9fZUt5R01WVkRkN2ZuSFlGSVNTVGdlaS1rcHFDY1pmWVdyNnhIeG5YTDJkUlFFQk56X0MzazltT09zRDZDbzZWYTNicExJZEhBcldGUmV6VGltSTh2QVNJdG9GQXdHaUs1bGdCaE1YZk5UWTEyTHBZN0NzRnRuOExEZi1RV3JKZDFoaTBCdWs1Z2tGaWhtVEtqVlA1Q2ZwMDVSZ1kzNVUzYVI5RDg3U1U3UWF4ekQ0Uk55UjUwT21Hai1hNzhwc2xUb2pfa2lEa2w0SXNXWS1nRkx3dm5STENRakJBSkkwWm90enk1dzdHQTJLaE1YUm03R0JxYnJHbnN2bGZfYVA3aDdHWnVGeUdRTExhQTViMm9jTEVrcmFJaHhlQ2MwS2JUQ3cteHBKWEs0Y1FfdFhQdDJEeXNDVURnWlBXeGVZUmp6dERPZHVTeXdzeENmNFM3eXJJNXlGemRMa0lTWXAxTXhqOHpiTzRSVmZVWHhqOHNSNi0tMzNrLTZ0ZEhzNVdPeUl6ejJoRHpVekMtM09uQkhtVUtiemhmSV93ZEFpdDlGNkN0RmhsS003SlVWbkZsVU5neWl4R3J4S1lTQVByNG9sN2NTLVVySjlwUW9SNkdSVHJGN29yenBHcXh6YUt6cVZqZHJhS25YbXBTS1diYlRVUENOUVhyQmZQOWZUZXFrc1NXcTEyRlR6cTFPcVpjN3NodEtFT0NUSjVSX3lSUUdGbHkyTi1NTHQwd2w4cGNzdkJJUTdYblpfWkUtM21lSDFYZE1DNzcwQ215ZVkwdEh1RTZ2VFBZanU1ME9vNXpNWXQ0N0YwcW1SRHdzN3JZNDBHTE5rUDBJY2dEYjVPMDh5NGR4ZndFcjZKQl9rbnlZQnR5LVNNS0tXWFpSZ3Yxb3RQWVhfOF9NbnAtclg5N0trTExOeHRvdlpfYkpPWm4zb2xvVVlRUmNsbWRhNFR3TUFvOVA5RDhaLURZekJIeXRoY28zdVA0dDI5UndET2F2SGVXVkgzZjFYVlNzb0VOTU53YWpMb1ZqTjluOWVoQ1d1S3oybW9lUzBpdkctVVcwaVI1OWxhWVV3Nk1nZjFuYTlUUjhlVTJBNEo5YWs0a3lRQ3BybmtvSHVQZUpfWnpCQXFqOUk2anNHOWhMeWg4SzRTZVR0N0lZemFJdjhyZU5UQkllenFFX2NfMUt2UDctYlg2NkhONndpQ2t0RzRnMDFfcDhaVGh5T1RpNk1xLUtVVjdlMk11eGV3YlBHaTk5d2NQNjZwdFJHNElGX0hpYWo2WlVXTmlzMTNBaHZvWHA4aHJ5M0QyTWFDMzZUTy1sS2dXUmx3NDBpNmQ0RlhZNXZLOHIzdWRoUDNacUV2bEZNQThPdkVscmZRVkRtVHRjcDFlYXJlNHZSSTdCcS1mNnNicTBIX0wzeWtXczU1cnozQ3pzSzBFMXJvcnk5Z2ctTWRySHlhU0xzbDd0QVEwSXB0dFlTUFpkeVMzOXd4bE9lNHpEQjhfbl9DVVhJSFNBX1F1NGh0Z2pjc3ZuMUs3Y0dERmt5WWszTDlmQ0t6ZndrTGhTb3g1MllrNG41RG05SEhOR2JBZlJGcGtycEhNX1RYem5xRE4xSV9fTUFDVGRqZ3o1OGdiUklJdFJ6bzRncFNsWmlwV0lVNzhyNXZwcFNTVDFxSFpGSFpGejQwZ2V5bnNhSUhSX3BneTUyeC1SSGNhNFF3MkQtR3llWEN6b09rRUdoU04xQldkQlhfcHJkV3RTR2FOeTlPQ3Z1bHZ2VUdDbkQwOXVtcjdJNjFEQTRGZVlPaEtOOGVVc1I0QjJocTNyR28xdnVyNmE2MFhwMjlKaHVMbEhhcm1LbkZJOXlSdHUzNHJVRVltVEFXRUtmeDEyOEpJVUFRUWM4QmJtQ0F0b1VmandRTGhuODRra0IwX2o5eUpGdmNXTjZWdVR2cUljNXRJR1NRc2RFakdZM1luOS1QZl9HZnFmUFRVS0NuelZQVkY2V19nZTdiYUdHa29BSXNBY0RoX01IZVhRYkN5Vm5jbnBFbkNHclNLd0t2WjcxTEZtYldrVkowTnJpdS1BSmZNOFlwSU9XV0xqMjVPVml5UFJLRFlaSGVBZWtnaG54TVVqdFJtd0Z4MndFM1owTjF3dGVpM28yZVZ0QjhHR0pGLUp2YmVFd3F5MUl4STZvc2RxeVFXandKcFpvSDcxUHFlS0c3aHVjS3ZCc1pLRjhaUmx4QkR1SlBjZnBSb3BWWHNpTVNxRUNfUmZLZFdQYmdVUGRYN25ZYWZVMkN4YzM0MGNSaDVTWm5aNklLQ2l1c05kcVRoV2JONkZzb0dsaXo2N1drTDFBNXBKdjBnZTlPdWNuVlcyU2kxdkE5aDdEUXhJOVlZblVIUkZaeGFUTDI1blQxSUxGbG00WXVBM2JXcHJmVjNhdDBBV09DTWZDZU9WeGVkd2p3VXp3ZFM1YjhwNy12dkhxUDBYNlgyMUVLZDd6X1htS3NjZ2J4eWhCRWpDcEIyY2JIbXFfX25UZHpaakdjemNac0IzYjhrbmFUU1B3YnlzYkNoaU0wOW41QnVvM3lKWFlBaEp5NHFxb1RCZUIzSWZIZkI5Ul9CNXhaMmw5QWMzdlV5bGE5WUkybHlHUmxfbU5KRkZaZUJjTzlYeUptMVF2ZUtYWjZXZVRlY2NfVkVSR1Z2MkM4Q3hPSFV5RTVyVEhjOTNOc29odlA0VURFRERGYzYwSFd6VXBYMjJCaEJla1VOMVFLbzI1T2tXT2dmZUdHNnZQYmE0eHJnY2Q0R09oNjhhRm81dzE0emlBcURLcE92b1FOV2o4OWVpZVhrMnQxbHhnWFQ1WHpTOGZEaFQtbmJGdTkyRjZDT081aDQ5QTE3dzhoYWwzSHl3d2F4WHF3bUVvcVhhOUxVRkxtdUFNWUxlbTBDSUlNUURtRmtGUG9KMXRfYUFEbGhpSzRJRzB1T3kzRzVlR016ekt5VGVnNC5WNVc4SlU5bGNmbVpOVVlmTjFVa01B.TrBOk81h8G5jnodBg5ICPNciIsJ0n0VHlWwmT7WAxyVRvsaTVngQIbMy7x2sAMjx-0Nn1n9jrZu_H1qemyxVYJQL0IpqOt_wSiO8j9XmhcvFZ7Etl1PEZWJlTvQRa5WF3RsAFZAWSer4vFkz5gaOMuSkdTvLpj24NR2dfuu5dWoy6ys5kyAyuzEIAB2frgBOQxdujGluFjfFcBiGDuksDeg4Qmo6hFb1ouAtfyUy0PzCmwBd5c0ky-QqXeW4B5XUz8j20BYhoalVQtjS04CyNspg3RXyOqvHV5PfppifZUR8DjVGfPcirnuCk72RHCB7qgWaDJGTi4lCXjHMeB54Dw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (empty OTPReason field as PROVISIONING)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (otpReason=PROVISIONING ! ISE40000)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;ON_FILE&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZd05EVTNOVFEzTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5LkVZenRIWUxkQUpFZWliaDhJQ1JDSmVfZWdkQy15bkEycnMtalo3Q2VERVFlbVY2Y0dpN3g3YkNMaTVLYnlfQVg5MDlVWHNCNVJiMHZ5a3JiZWtaWWZVTXJJVzRjcTNnLThlcUJkYWZuVWtMRE9XZTQ3VExOVEZTdExJVVFPVG4wNFlkOG42d1d2VmxsQnl0Y2RmUl9lTUhvYW9NQ1JHcHVwTkFjX2UxTEM0NE5PVVNieXVuS0xIUWNTZlVfaDdSd3VkdzdVb2RIY1RvY2dWaWJTc1UtOWxJMXJNVE4zNmE2TlZkOG9mSk91YlVhNUVDcVZFNjd1UzVSNldpOTUtUExOOTdsLWNCYWhtUlJnUE8tbVc2UE9pOUVmQVVaQ2U2OU1ERzlvMi1ibFBVTnJoOHdud1cyODFhZkNnTmEzcWl5SThMOFZCbUpIVHRRZDBpZUdtRzdoQS5XNnhZdUNCZ25xNlhNQnZaLkV0MUhlTEpkYzBubzlVelMwTi10d0I5Nmw3aGoyT0FoX0o4ZnRFcXA5bFRYZE5IMUZvLXhJemlzbFVoOWw3cTBHcVNobll2YzRGbHN0RjJ4eFlnNEFRTjVuSGsuQ2lROEs1WVdrbGJlVFNleGV0dXdmZw.WsGaogApZuUPZEQtHSKRy488L0Y-QcEAlZ7XsUxTDC7IrrbOy2jKBwLm4qmJrr1HKkgzZWgk9sb4ZUlmXAsU2mG2WOnPv5gHvhjLKR5srAO1ekEYwM4sP9iRGr-Wx0vIr0fjib7v914UshynZ_XLHP4vkX2dr1xCzKFy-U3CNcfe9vxWM1QzWrbQSsEFxCuh0z0nb4HvRPFaaPx9XJRoi3t6HuKTb1fW0uL7JaYTxX1vo7FZxdoX9J1PU1S4zvQSN2w4vV-AyXy1bNZ_pbUKl5ZMSTNc048uunwMOB65UDNB3J-_dG1M4wV53Gw0uml5efIKstbi2PZqU99D2rB1bw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="retrieveStepUpMethods &lt; cardholder_verification_method" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM cardholder_verification_method WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">cardholder_verification_method</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="retrieveStepUpMethods (CONFIRM_PROVISIONING) &lt;" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;CONFIRM_PROVISIONING&apos; ORDER BY id DESC LIMIT 1;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.confirm_provisioning</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object history = vars.getObject(&quot;msg_history.confirm_provisioning&quot;).get(0);

String cvmCorrelationId = cvm.get(&quot;correlation_id&quot;);
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);

boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(cvmCorrelationId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&lt;/name&gt;&lt;value&gt;0&lt;/value&gt;&lt;/code&quot;);
if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found conversationId `&quot; + cvmCorrelationId;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="retrieveStepUpMethods &lt; token_info" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">/*
int cvmSize = vars.getObject(&quot;cardholder_verification_method&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || cvmSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows &apos;cardholder_verification_method&apos;: &quot; + cvmSize;
}

int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows &apos;token_info&apos;: &quot; + tokenSize;
}

Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenRefId = token.get(&quot;token_ref_id&quot;);
boolean equalTokenRefId = tokenRefId.equals(&quot;DNITHE000${tokenReferenceID}&quot;);
if (!equalTokenRefId) {
	Failure = true;
	FailureMessage = &quot;&apos;token_ref_id&apos;: &quot; + tokenRefId;
}

String tokenStatus = token.get(&quot;token_status&quot;);
if (tokenStatus!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: is not empty&quot;;
}

String cvmPanInternalID = cvm.get(&quot;pan_internal_id&quot;);
String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
boolean equalTokenPanInternalID = tokenPanInternalID.equals(cvmPanInternalID);
if (!equalTokenPanInternalID) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: &quot; + cvmPanInternalID + &quot; = &quot; + tokenPanInternalID;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is not empty&quot;;
}

Date tokenDigitizeDate = token.get(&quot;digitize_date&quot;);
if (tokenDigitizeDate!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;digitize_date&apos;: is not empty&quot;;
}
*/</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (Cryptography error – unknown)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmtub3duIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (INVALID_JSON)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def message = response.errorResponse.message;
if (message!=null) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Failure response errorResponse.message: is empty&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (Invalid Json payload in encrypted data)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EazVNemd5TVN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LklIaFB0VE5aUjJxdGpXR3IxN3FocG85OUtjVGNvb3N1Y0FWbDg4QzBqYkI2a3RjWnlnd0UtVzY5MzhoS1ltMm1rYUI2YlhDVWxiQmlIdVp0NU9FbzdrOWkxbkJKT2duZFpvY2pETEdEQlptbUFaam0yaUMtb21fOFcxTVUyWkhnMTkxRW1XLTlEME5OWUo3WjlOWnI5bkVaVVM3anhMdmV6dG1SRm5MQ0xCSTBwc3hIbTBmTE43MXJSM21RM0Fhb3NfcUxzbzA3XzBEQVA4MUtIUnVVRzV0Z2dPLUlFTFFBbXhHN2pjUU90b1lRYS1hd3k4MXM4bEdXTUVjejc0MnlJVWFibFdsZDl0T19fTzJ2OG9iQkJVUHc0dFloOXI3aUo3ODJ3OTlCOFlNRldzUHVqTGpPNm1maEdoQ1J3UWtzVER5QV84Z1dmT1RYZ1JUN2tyRXhZQS5teVNmaGV2VllPU2hfa1BSLlVfcWhwaktFWDlubWZDUmp3aUtYWkc2VDhHRXVYUjBKTGNhdGYtQ0k1MHhVX1dQTWtWS3VoSXhKZlltNTFRc1ZUTnM3Z3R2SmFtbWx3RkhqNVpPSGNZQXFOT014WmtPdUt1S2tDUHZrRE1kVExvNTRLSkFNMncucnJuc2NXc1RKVk1PNnVBb0h4X01aQQ.vL4QT6L7xLXpOTvlXDbafvhIIXPnmDPU7_N0qpHM4mtuhXzbctpgqsl0evoUqOKquIV8NflZCoasRFlR5HJ6FDrXaI4xljZbY58_7IogszG09ilUQnIwUtWHt-GeN9dEQDhd6_VG2g0nADzUVfijwVct6tti6JLpcJ8Woumj6COMyN9EUDpOMYDbtGQOacBFuK8jM2A4b-2d-OIe6mwkkA3nIslKHIb0cRsfick8noZFfmUEVhcFDNbMztbwf-tWDfyxpHe5u6m4R90UkWTm9oxFqkyQLKsP0Ze58JlAuiBTeGf6Jrhlnk0GVRvtJsVzmZcQQcEkjUFnO_vmmCzp9w&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def message = response.errorResponse.message;
if (message!=null) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Failure response errorResponse.message: is empty&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (ISE40504)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.RE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def message = response.errorResponse.message;
if (message!=null) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Failure response errorResponse.message: is empty&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (ISE40001)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def errorCode = response.errorCode;
if (errorCode!=&quot;ISE40001&quot;) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Failure response errorCode: &quot; + errorCode);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (OTP value contains letters)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;&quot;,&#xd;
  &quot;otpMaxReached&quot;: &quot;false&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOakk0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLkptVGNlMFQ1OHl0QnZhb09NZmwwdFI4MURCZFhHbkNNY0dFQ3hMeWdRT1NGd1BmWm5SSk83bjNOMlFsTGNrU3RDR1BBYmdtVmVCa2psOWQtenM2RDlJTWhoLTF3NVVQMkJ0QTkxUzlIWkdXREtzcHdOdFM2cktfRWVnUmFYMTlWdXQ2SkRUcmlfZTlHVl9GOUdIM2E4ZW45cy12d0RXcWk3YXdXSG10YjBOOTBfVW9OQUo5NzIxSmtrcGhJMGFkVkpwZDlWcVdYT2NFR2djOGFMaW5XTmlJRl8xRTdRcUpIYU45aDJZOEtRalpYbWdnQWVJckhrVVYyajZhTURRS050VGZBQnhydC1hWnQya2dnWU5oSG9EOFpKUFctNFFxR2N3VGZTbi03cUR3VDJTVFROVm9zR01HRkVGWXF0ZTRITl9hNkNYTVZ5YkhpbFV3QUdFdFZvUS4zWWN6VU1jb3oxTDVlQlZmLndXM0xCSkdtRlVaUWYxTWc3UVVfeXNmSGdhcVY1ekY0MkJKNHlCUVhILWZGd2ZzUjNuSjNmMVZtRmVfOXBBNWZqa0JoWXVoRGN4U0lSdUJnakxZc3N5eXNzUTlnR3U0UXkyYmVpaC1jcDNWN25PUVJDQTY0dks2cTYwRkI4SWI1M2daWU15SUdmZVdJM3RPcm1SMmtxcXhWUl9lZU1STENoeG5zOUhTaGI1TmFKSzhObWRQY0Z0OVJoNHAzZHBaUnFpWXV6NmhRMWNoRm96bzN2ZFNtREN3cDdlSzdMT1FkUC1nM2g3c2xEZE9ycG9EN3cxVVplUnd2dFJscExrUFJpUFZpWlNzZU9ZQkRzZXdzb0FscmhYeExzaEhPYkgtNG40YlJ2dnk0ZkZwVjVzTXlnaUpHVUNRbnZoS01yOXdaZDc0R29QSnBFU1hyZmFIaU90RnlWMWhVSmtpVnk5VTBRSHVLS1Q5UEQzb09uU012OXphRDlxMGx5ZW04S2hBdWZpRngzeHdraXRYTHlOLWw1UTgySjVzNjM4Tk9EamJkMXpTOWNrUWs1bWcyVnhMNVREQ0NhUjZib3g2VFh3ejhNUzFQckZ4Sk9iRHhsTmh5eWZnYk81U3dDSVpESEJuY0Mwazkxb0RJRzdvSlNaeUFKS1NIcDlpY25qMUJDSHNhaWxuRmdldUxmaDZGaGhyd2t1WmZEZEhEaDlqMzhnSFcxeXRlS2hHbnBMb2MyRnpNMVk4dGJTMlB3OXJkN0VxOFZGQjZQV2ZCdElHN3QzbDViSTRMX1ZNN3JuX1pHOEkwTF84cHN6bkVBQmd6TlZ0OTJtYUlMZUJseHV4OUZ4cGotU2F5Z2NjX0lQRE8tVkwzNng3dGlfemE4cGNzeVY3bkFFTEVhckhCTmVHWUlyMHZXQXFPaHlyakp5M0FNMzVnT09ZVDA2Q245MWdhZEh0YzVvTzY1VFQ1bkRhclBqNjRlMmFGTTRsRjl6bm5TLXR5QlJCN2RnOHJoNTRGWWdMQlo2N2NBaHdZYVJGSGs3aUpZWEVERllBT2EycEN3cnNQM3lXOGpSRnJVTmp3am4yZDQ1WmlhYkkzNG1LcGVmRGI2SEVpRmg5bEZaVDhBcXZ5bU5QLWlncXhqWkZXT0E4eVdTZ093QXlha1drUjFkLVhIQmMzMFVla2FYbjV4Z0FKSFZZeEVweXYzMTRwbmd4aXYzOEk5WEdfamRVSXl5RWRSZUMzRDhTSXhoNVBfZUhyd2dhLTk5ZTlnRlZwMl9UT1piVjFFZzZ1S0ZPMDNwUGVuZ3dwVklGMU5sV2hkMEhWVmpuQzh6cXhId1FLTXNQSHZuSnJCczZnQWJUbWZPMnk0Q2pkNXpoWlN4Q1NvT2d2NmpoVDZselhYZTFOMGNwZDJSUkJSRlBEQ3R2cDU5NERwX1VDeWJzWndVVWNrVUV3QXotSlF4UnFpVVNtUGF6aTlURFNHVDF5dGJNZmhkcEpCQ095NGN5VWZzNmxFdjlHeDEwUXFRWU9NeThFWUlBdm5CdlNOQlNxWjdMMmRDU3Y2X01OeFg4VEZoV0xxMjM4R1ZrRGY0dEFZaXdtSHNhOV9WM2VxMVUxZDBWRFJIVWhYZEFLQk5iS0MxUDNXX3NValpFQzNHNjFGSThnOFE1VDZOczV4WlgzbEZ4VVVjRWFiWWFsdFVnMmUwY2xYZEpiVXkxZmtJRnpOdm1EUlkxUzJnX2tpWGQ4aHBWSkJrcldQWnZqTnk5Skh3Z2JpSk5KbU1mV0hwSXloRVBNZUhsdlFDcWYzeno2dG80R2xsUDJ0ZWlVcm1jWVpoU2Q4dE5fcEtodEQtWHpXd1doWWJKd0hlY1QxaUNCU25lNDh0TEhEWDNjZHdoQi5aMzVYUV9lZ0hiS2M4VlIwLWJraWFB.DUW_7z5yqfN2UTvwNYSVi43Ytd9o4AOz-f1qJfbZv1KHjLCm3ZcwIwWawtui-05tEux9VrzIK7N_fo0Z66VIHS7pMY3dlp8j-0CgNYiS7ki9qtHQ5k7HPxav-_mQ2jom5M6qyYOQ4Ym7fQM_09jL-WOaOthnJN9Eo-rs2C8NrF8m4anVNoiV26vn2ix1-i10SZVi7HttO89MH3STLcSH9W1JzvlEDWFTbJo3HVE8AyKmpXRvqYPU_SThO_GLMo_OW4eJchCFh0h6nXNVlJnLqUYwlXTul1E1Sgy7fS6mxzWfMSRjyjS3zZvaAPwq063vrFfqRiKW_SYaqmkZ--ssNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (otpReason=PAYMENT)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42012&quot;,&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$12&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8612&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTFNemN4TkN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LnNnQTFqWDNCNG9wN0NNUFlITURZczJLWnpXcmdtTjY4STFZT1B3S3o1cnZfckgzd245LTZTdVVQWVVmZVA5cnVZajdjWlpvMll6ODF0X1RhZV83UllvREgyWWhQYkhVNXZxazhVclVxRFFwaURZLUU1NHpkSTZTSTE1ZFdHRF8yTnVfV0hzQ2tnUXVkSGNHN1JjRmZKZ1hjV3Fva0M1VG5lLWhiaGtac0JKM3dvOW5mYU5TUUlRNTVoR1BhTFJKTkk5dEZnOEdSZVdLMm9mREQ0T1JsaHE4TTZYN1VsZjhRQ2c1VjQ4dzBkM2w1VGJmTTk0ZEhfcUN2Q0FIQ1dNSE9jajJ3N0VCRjlrM2h6SHdtX3BXQzRGOFNpSHdka192allvQjFZT29XTWliWEhZd3dNQVFYUkJXU0RZRGVwYllTcWY4ek5NUFhZY01sd3BuOWNvdGUyUS54aHV1dXYxNGxIb3d1cnM5Ll9JaWF1bm9pQXlRVTh2UWlodkFCQVl4cXdqM3puTm8wRTZIZU9ZR2lpVENBb1NMT0xySGFIRWpRRHh5bFRpRVE5ck03UGo1NW9KRldNcl9LaG1MUzBGcTVBdTk5eVlxZ28tRTdZWmVrclNJd3RUdTZoQWJYeUQtRHVMTVhWTUVMcDlyczc0QWE3YmdkakdKQU5tWGhtMkdSNWt0c19aYjhsMUwwRm5ZUzJvXzJWbF9nZloybjctejJsZy4zQkgxbDlrVUZXMkM3UXRJWkdIMExn.QSx7NqS7kamuz9SUPi9QNaAoxQISwxcbxlEgHjck_9FGLUo_JdrHgq-LlfEQfpmMOs3NBRGolwQ_AYO_WmsOrHC5NWhZF6VDIHPDaFmOdkN0ow6nZ96Qct9ykLJ70H0f-Ba1El0a67C85JdKGYic5MWDuDBZkHCqrMAfWtN-xj5rKLoHBS3qOQ7u0iL746dspDU-XyOLQlr-pm6l4jTi4VQ-w6-7tKGZ8mj1bN-rANa4HkJyLV0GS7ETy57OLQiqq8SMM8o3nK9TKRfGuwF-8uO9pVFsXbn3LsdrGysEbrrMmD5j4BczxAdTIXhSB3mSM96IeVr4O7HVye1OD56clQ&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1275 - Case 16 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$16&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42016&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8616&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTBPRGt5TXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LkFsZ3FsTEg3YjlvaUd6WmlJOGFIdzMxd0NvZkdCLWdWUjZRMXV0QVdvLWVtLTN4OHpkSDZGLVRjdGQzQ0lKMUFRZ1VwZld0ZTgtMTYtYXFKTlpUWDBvbmRPUTZFOWNYcnAtcGpxS2M1TW10WkV2ZktHZ1VFTU9zMUhacktaMDU3S3ZqOXNqdWh1NUUtU19obVlIQUZ2M1ZGT08zNUE0aTJhaWVSc2o5QktzRjhmS09lZWpuRG8tdlYzVV8tdThhN3pMUFlWdDZKSVN0QU5rckZxRHVLU253UGMxalpOaC1YdUxGQTNtWE5jb21QZ09rT3ZzX1loZnZMTFJnYnJHTWZPXzNGY2R4TTBLaWpQdmo4R1dSRC1xNEJublBNN184RDlxTUdiWHoxX1hXNi1Hc09icUlUNURSVGRuUW1tMU5zQllDdEhOYmwya2ExTUJKWkpMakpLQS4xaFZDeGNIZnhXcUpkZjI3LjBSNHZ3Q09RTi1JVEo5ZVB6dmduZTRoc1VEeGh2QkNyc2xCM2xzZ0tFcnpoWnc0OUUxQUl1eE9aMG5lcGFrR0ppWk9aWDlsNGhuZG10NXRqVElZWUZ2M1FwUDVqU0p3Vzl1anNpbVM2RkpvWEVseE9pNThabGVXdmdVc1gyUkxwMzc5elRXaVBrMlFvM0dSeXhhSFpZUmZCazhzNEVVaDRsQ3FPYkRxN0YzdWQ1LXhGXzc4cjY0ODRfZ2R0R0NncFZfZk9ES2hXSUNzZGxLUjdZdjI5LmQ3TG9wWGxtbmxDcjBKRE5vNUw5bHc.1vTm9ndRYIfrYrIpXZIQwBw8eJBQJe13-IP7QTtxYXXLMzPXhJx7YAw34tJ7awmqEChQAStjJ6njytT4AnWFrfXu8NBvOU9yBrBDSfkgaKOLPkXIQeYTHMxlVGiY0P73PKoMHvcib8C0tKkigJ7Rvuv5SBT7nMylzkAIQpCp4HLCys1W9Yka4jhS5qtpYtQUep9FLUTD185CFhAgAvw3kpwr3jg_fhFw4QZKYAsFapIgNPVeuHh9PAODxHPwFMBeBqTrK-ztJGjnEgy3_7j_G9G3kNSyQ64FmIH8N4VWVR_3ISCG5ZHnfALG7Es-VdZsPssIowxMrkYqBXeKA82Uew&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.4/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1275 - Case 16 = 400) new (&quot;Request contains invalid encryptedData&quot;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844833016&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP63016&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$16&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42016&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8616&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTBPRGt5TXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LkFsZ3FsTEg3YjlvaUd6WmlJOGFIdzMxd0NvZkdCLWdWUjZRMXV0QVdvLWVtLTN4OHpkSDZGLVRjdGQzQ0lKMUFRZ1VwZld0ZTgtMTYtYXFKTlpUWDBvbmRPUTZFOWNYcnAtcGpxS2M1TW10WkV2ZktHZ1VFTU9zMUhacktaMDU3S3ZqOXNqdWh1NUUtU19obVlIQUZ2M1ZGT08zNUE0aTJhaWVSc2o5QktzRjhmS09lZWpuRG8tdlYzVV8tdThhN3pMUFlWdDZKSVN0QU5rckZxRHVLU253UGMxalpOaC1YdUxGQTNtWE5jb21QZ09rT3ZzX1loZnZMTFJnYnJHTWZPXzNGY2R4TTBLaWpQdmo4R1dSRC1xNEJublBNN184RDlxTUdiWHoxX1hXNi1Hc09icUlUNURSVGRuUW1tMU5zQllDdEhOYmwya2ExTUJKWkpMakpLQS4xaFZDeGNIZnhXcUpkZjI3LjBSNHZ3Q09RTi1JVEo5ZVB6dmduZTRoc1VEeGh2QkNyc2xCM2xzZ0tFcnpoWnc0OUUxQUl1eE9aMG5lcGFrR0ppWk9aWDlsNGhuZG10NXRqVElZWUZ2M1FwUDVqU0p3Vzl1anNpbVM2RkpvWEVseE9pNThabGVXdmdVc1gyUkxwMzc5elRXaVBrMlFvM0dSeXhhSFpZUmZCazhzNEVVaDRsQ3FPYkRxN0YzdWQ1LXhGXzc4cjY0ODRfZ2R0R0NncFZfZk9ES2hXSUNzZGxLUjdZdjI5LmQ3TG9wWGxtbmxDcjBKRE5vNUw5bHc.1vTm9ndRYIfrYrIpXZIQwBw8eJBQJe13-IP7QTtxYXXLMzPXhJx7YAw34tJ7awmqEChQAStjJ6njytT4AnWFrfXu8NBvOU9yBrBDSfkgaKOLPkXIQeYTHMxlVGiY0P73PKoMHvcib8C0tKkigJ7Rvuv5SBT7nMylzkAIQpCp4HLCys1W9Yka4jhS5qtpYtQUep9FLUTD185CFhAgAvw3kpwr3jg_fhFw4QZKYAsFapIgNPVeuHh9PAODxHPwFMBeBqTrK-ztJGjnEgy3_7j_G9G3kNSyQ64FmIH8N4VWVR_3ISCG5ZHnfALG7Es-VdZsPssIowxMrkYqBXeKA82Uew&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.4/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1275 - Case 20 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUS TFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJNalUzTml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LlcxeS1POEFrY1dOVDVCdThfcERSTGlOS 2JDT0JRTEw2N0w1ME9yLUVDUWR0RzR4THRqU25yRlBZRmF4WEZQcjgtX0ZmMzdMVVNvQ1J5b3V6Z1RfZkVheThTdlNFNFVTU3VRLWVvbC1OYzhod1R5aFY1WXBwZFYxVm1BenJnb29qdGdaSWRCT2laVVZzZm1JZFhxcERiaEMzcWN0T0t1eW02dmQwaWROMmtfWUZjWENsbW9mSEg4Q3lkM TI1NVE5SmpIb3pQanZxcjhET3ZNbWJXMVU0NHhnVkVjSG9PYlJra0hscjlscVRPSm5vQUJXdXU1emZQNElkNlJ6WFlpRGtCMUtiUEE1NW15V1VFLTZyN0lPTUJYaXdEQWFwcW9rYVVzd3pLMUlzTW1oM2hMa0x2dzJlVWVBNW9EZkQ0RVhLNjB3ZHB0anhpdGhSVTZIQXRlVnlIQS5OTHEwN 2lSaTNUQXJHcU5MLnhfSFlLT0RaQ3liSHRkTFFXZnNFN0JNejItcWJud0d2WUJPdUFoT2RkcU11YXFiTVFTWHIyal9ZcUhuZkRHREJ4dkNSbzZuTi1JNXB2RGxfN3ZneEhLOFdPWjZ3YzN0cWVuRGZ4WlV3cklyNm5yeXRtNkhTcXdBZ0FIMnkzSXJXWGlzcjJ5NWo2T2hqbHJjNXU3aHc1e FRPWGRBSjFWQnZRRE84RWkxYzE0SXNydE9NMWRZemxkQUlrQS40d0ZkWlZ5bVhJLVNpcTF3V3plWmh3.6WZESs6eNJDJq5t9__pQEuRmtju1HLgZho_Szp_XrxlIhusmKT59BO7z4XVsXK0lI9058rTntZkmBFqGqTQCYvc4WYzH-PbSYmxgtm_x4X-nmd7whJsLIYfw5lodX-jQaTcp-cL4 aWy7vwGWwBrzG-VIxbm9ywfsV3omWrjXn8jykfHIgURohr7hYn0j_PD2nQP_IKW9gIh_kTaHjTdKxHCQQosNtIhiTd6CryYJIHxWiw9EzgR13jX6LE7ZuSv4sFUeb_p1ZhLv3VFwDQoqXItZOuO7RYsZb30ovaIEBN1o-H1thBwP6wA3SzDENAdKx1ELkE-KOOl6AwE0Jv_mNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.4/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1275 - Case 20 = 400) new (&quot;Request contains invalid Signature&quot;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844833020&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP63020&quot;,&#xd;
  &quot;panSour ce&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$20&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42020&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8620&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUS TFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJNalUzTml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LlcxeS1POEFrY1dOVDVCdThfcERSTGlOS 2JDT0JRTEw2N0w1ME9yLUVDUWR0RzR4THRqU25yRlBZRmF4WEZQcjgtX0ZmMzdMVVNvQ1J5b3V6Z1RfZkVheThTdlNFNFVTU3VRLWVvbC1OYzhod1R5aFY1WXBwZFYxVm1BenJnb29qdGdaSWRCT2laVVZzZm1JZFhxcERiaEMzcWN0T0t1eW02dmQwaWROMmtfWUZjWENsbW9mSEg4Q3lkM TI1NVE5SmpIb3pQanZxcjhET3ZNbWJXMVU0NHhnVkVjSG9PYlJra0hscjlscVRPSm5vQUJXdXU1emZQNElkNlJ6WFlpRGtCMUtiUEE1NW15V1VFLTZyN0lPTUJYaXdEQWFwcW9rYVVzd3pLMUlzTW1oM2hMa0x2dzJlVWVBNW9EZkQ0RVhLNjB3ZHB0anhpdGhSVTZIQXRlVnlIQS5OTHEwN 2lSaTNUQXJHcU5MLnhfSFlLT0RaQ3liSHRkTFFXZnNFN0JNejItcWJud0d2WUJPdUFoT2RkcU11YXFiTVFTWHIyal9ZcUhuZkRHREJ4dkNSbzZuTi1JNXB2RGxfN3ZneEhLOFdPWjZ3YzN0cWVuRGZ4WlV3cklyNm5yeXRtNkhTcXdBZ0FIMnkzSXJXWGlzcjJ5NWo2T2hqbHJjNXU3aHc1e FRPWGRBSjFWQnZRRE84RWkxYzE0SXNydE9NMWRZemxkQUlrQS40d0ZkWlZ5bVhJLVNpcTF3V3plWmh3.6WZESs6eNJDJq5t9__pQEuRmtju1HLgZho_Szp_XrxlIhusmKT59BO7z4XVsXK0lI9058rTntZkmBFqGqTQCYvc4WYzH-PbSYmxgtm_x4X-nmd7whJsLIYfw5lodX-jQaTcp-cL4 aWy7vwGWwBrzG-VIxbm9ywfsV3omWrjXn8jykfHIgURohr7hYn0j_PD2nQP_IKW9gIh_kTaHjTdKxHCQQosNtIhiTd6CryYJIHxWiw9EzgR13jX6LE7ZuSv4sFUeb_p1ZhLv3VFwDQoqXItZOuO7RYsZb30ovaIEBN1o-H1thBwP6wA3SzDENAdKx1ELkE-KOOl6AwE0Jv_mNg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.4/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1275 - Case 21 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmtub3duIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJNamcyTml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LkFWdWlPWWxpQUE1RlB6bmo4QzliT2FqNS0xdlBSUTAwZEhNNlpzdk1uM2p4X1c5RUZmY2hSQzMtYUZ0aHFTN3RySmtzUzhQb3p6cGVHVzhhd0ZQNTF4aXRjUGVaR1NGdG1lY3lVYVdHME0wWVAzNmU2R3VkdVVxS1VaQ2cxRGtCZ1FmSnNKTU1xcW5YZmxHSHZYV3hhS05ySDU3bkhpTENVSTNSaXpLcEhmVGxrbk1SU0pCaVc1eTFWQmFqZVVjVW81bUE2MjBGcjc0RXlrNHdCdWgwdmpHWVNIbGNMZkZlbzNOb1Z5aGtkS3ZXcC1NMDlYV3RXVmtuaDB5SUFEVm1PVnVIQldiTGFsVzNmclpKWDRFVEl6MmY1aDBGQ09yTTVZTEtaT2FoYTBVOUJjWVowcWZhdmlSbl9uRVdJWm9McHJJVkd2ZDNPaHBhOFFLR3JtSVZDQS5BVTdheGp5UkFyOFZnWTQ1LmhqVkQweG5fMGlCZmMwZlpBR0FuSTVhU2JpNXUyY2lWVkFNeUhhUGprMHdjbGZpck9wSGc1RmFnVm9JOTM2N3lIOWJGYnR1YkdBS2F3UlJZZFZ2VXdaMkRYMzhFOHA5bVRKTnRPZkhUa25nZGpsMGRJdTdJOU82RHVRdGRiNUhDOTJYRU1fUVFGaW1WTzhiaHotR2VFOGxqdVlHNUdWMmxKb2o0dWtWdVhYZFhhS2NCbjBjR1VnYWFtdy40YkF2QmRhbERpVi1qQzUxdHdpYURB.zJ1EU2MNoLO-f0zQDdkhLvPjxTaaGeCumtCsPlVPy2dbzgmXzIya2JfWNqvEH6jGS_9D2z7Kg4VisSIQ8dE9qYd59LQ6R16UDUnf9jNwxT_YpKFAsDcJ6QcgxqthpMK9nNXGGTQ1Oi4g8uf5LMT-Cl1EekLfBUeboAetZJwAafEmI_yBHEarUvYKnS9ylKOm6M__mQfG8HkaTYt1lETWt7ky2gUB59PHOPg4CWHgY_IQvl3XRYt-QAaaXhcWunZoVMZl9uOkd4ls8aO73lbLcYZXFDnGROju65riKs6xihzifHfTHObmlvjI8JYg_gzg3_ojacsjCHiX8zAlgsehbg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.4/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1275 - Case 21 = 400) new (&quot;Invalid Json payload in encrypted data&quot;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844833021&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP63021&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$21&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42021&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8621&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmtub3duIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJNamcyTml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LkFWdWlPWWxpQUE1RlB6bmo4QzliT2FqNS0xdlBSUTAwZEhNNlpzdk1uM2p4X1c5RUZmY2hSQzMtYUZ0aHFTN3RySmtzUzhQb3p6cGVHVzhhd0ZQNTF4aXRjUGVaR1NGdG1lY3lVYVdHME0wWVAzNmU2R3VkdVVxS1VaQ2cxRGtCZ1FmSnNKTU1xcW5YZmxHSHZYV3hhS05ySDU3bkhpTENVSTNSaXpLcEhmVGxrbk1SU0pCaVc1eTFWQmFqZVVjVW81bUE2MjBGcjc0RXlrNHdCdWgwdmpHWVNIbGNMZkZlbzNOb1Z5aGtkS3ZXcC1NMDlYV3RXVmtuaDB5SUFEVm1PVnVIQldiTGFsVzNmclpKWDRFVEl6MmY1aDBGQ09yTTVZTEtaT2FoYTBVOUJjWVowcWZhdmlSbl9uRVdJWm9McHJJVkd2ZDNPaHBhOFFLR3JtSVZDQS5BVTdheGp5UkFyOFZnWTQ1LmhqVkQweG5fMGlCZmMwZlpBR0FuSTVhU2JpNXUyY2lWVkFNeUhhUGprMHdjbGZpck9wSGc1RmFnVm9JOTM2N3lIOWJGYnR1YkdBS2F3UlJZZFZ2VXdaMkRYMzhFOHA5bVRKTnRPZkhUa25nZGpsMGRJdTdJOU82RHVRdGRiNUhDOTJYRU1fUVFGaW1WTzhiaHotR2VFOGxqdVlHNUdWMmxKb2o0dWtWdVhYZFhhS2NCbjBjR1VnYWFtdy40YkF2QmRhbERpVi1qQzUxdHdpYURB.zJ1EU2MNoLO-f0zQDdkhLvPjxTaaGeCumtCsPlVPy2dbzgmXzIya2JfWNqvEH6jGS_9D2z7Kg4VisSIQ8dE9qYd59LQ6R16UDUnf9jNwxT_YpKFAsDcJ6QcgxqthpMK9nNXGGTQ1Oi4g8uf5LMT-Cl1EekLfBUeboAetZJwAafEmI_yBHEarUvYKnS9ylKOm6M__mQfG8HkaTYt1lETWt7ky2gUB59PHOPg4CWHgY_IQvl3XRYt-QAaaXhcWunZoVMZl9uOkd4ls8aO73lbLcYZXFDnGROju65riKs6xihzifHfTHObmlvjI8JYg_gzg3_ojacsjCHiX8zAlgsehbg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.4/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1340 - Case 22 = 400) new (&quot;Request contains invalid Json payload&quot;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844833022&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP63022&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$22&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42022&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8622&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5UWTNNakF6TVN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LnpvVjh5eS0tLWJGWURHbGNnWHZsNW1seXdHN0FVMUQwcWRSVXVIUzdLN3BuckhLMXRDVkI1eW1zLU1reVpwMFBxNnZPdlY3RUo1SURZTlUwWTVtRXZaRDg5S3V6TDNQR29PNWJTTGl4YUdncUlIZDhtZS1BUzdxSGlZZzBxZjFhVVRIencxRFJUSVJVd2diRTZLMTBxRlVydVZKRktsNDRGYnJWNGczT29xSjRJLUJBQ2NKLWtvQmhBdVUtd3pzdklZRXRJT3htZDR6UEhabzI3ZS1fc2NCYVJna1l3NVBOMlJ5akVTSkRyYzJiOHVTVER4TUhVTDF0cHBDT3Q1dFZBQ1lvbDlHVTZfcGVPU29OZjNfNENXQWlyY1d1M2pPckdZSERkWExUNzZxeTAyRjVwM1kzSkE5TlQtNW14S01RVVMzTnRYWllOQnZfNFBuZG1samNTZy5zZTZ0cHRMVVNCMUoycDBPLkNrb0c5YXgwNWpmTUw0SEZpRHk5ZU0zcmpYNFl5QVJtck9QY2xUcUtfME1ldXdjaUdvYkNiVkl3ZXZnN3k1RGctVzFjWHpweUIxbUJTd0loMExTN3FsaTlzMlVKUmZLRDBmdzhuVmlNdGNXRDZMb1Y1RUJtY3ZjYVVoSFhzYUVTUm9TN2hCMEFDY1BXMWRYVERqNkY2T0s4UjBaV1lwUUlTMlhtZVJHRlE5RjNQbmtKNHl4R2I0NUphUS5aeXFyeWlOak82bTkxV05xb2dxdElR.vYIGOj087Snmpfl6xH1ctNs2hpAuzGWEvDEy-KyAX7M0PKQo1xdsGAAK4YG2zsGHQO6kwfvFxPuMtaB73Y5xeYNz7EnPABBCH7R5qrNQYsSYi0JWMiCNkrqB5ZU_GFm2NTC5iaasuLJzRwCAgBCOl0KPz_OrC-RFm3zD0RwTifw-fIy28jl3y1MHDKfwhNiUloRDr8_C09-0wB8zhCBYBv-ulATXg-e7RFseZ0PRvNMDz5iMft6iwu4EbRa9XJ2q5PNNhT9dIYh9t3XWu9vrFKW7Cyn4q8E1AZ0R_ln_CMnOZzmPNqbzHfb2cOiBYISG6SyvBrz_O7CjwLgUrsvllA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.4/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1275 - Case 23 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJNamt3TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LmlITlRkdXBYMHNGbXE1T3ExdHBnd1hGSm1SZHlKMVZwQ2xfUzlUS2FINW5YbkFLa1p5UEJkY1NPSEpuNlJGYnZrcHdvZm1IZkpQV2l2RkJCWnNBUWtyc2RSQmFia0gyTm81X3dFZ3pxMVVBS3Axb0FXZl9qNVNRYVFXY1JPWjFDUGJ5YktUaXUzOGxLVEZJZTNjUmpSbHJBS194NTZUOERqeVliZWZXREN5czZadlFYU1RRWEI3ZFFKbzMyZkhNVTYzQXRhajNNR2ZZWl92blJza1hwVXQ1bW5kTm1QbGh4VUtNaTFhencxbWhaWjdXR0p0bTBWUVZ1ekRyT0VkWFllbzhQcVpWb3Utal9IZ3RiVk9Ra2lLZTFBemhpazBmYzV5aXB4WXl4cklYS09GaFpfSlVKVzlQMG50WDJETUpMazRWUHhUeTFzM18xQ191cWlrQUxyUS56b01qUHhpNXBUT3dva3pkLmxDSWpmS3poQVpyaDljbzgwNE9YTzR4dE9iWkVIRUlLb3ZYMm5YTTFlaUE2aTNlRkE3cUptVFNjRTl3ZGdpNFFDZXY0UUpaekFlOFBHZ19pR3ljTExfX2tWcWJqLVoyblEyNTNOdFdwMWYzYzYxSUxCTTA4bEdQUXNiZWtxbks0dU1NTjJWUlZCT1pRSE1aVWR4a3ZkbndIb1VkWElPZ2pCUGc3cUx3YS0tWGRWR2ZmYm9JQzJUSWRpZy4yX29udE5qY2hYeU5Mb0RmakVHMEFR.BVBE1QUovXPyJNixnmprtlZ_BRqiCJ3LIsUBW9IxOzuOEVZ5HPiXSqhPrmGev8DWSRcN2fg3USgTyF0nI7wv5eD3b4e8o1zAk8t5yQv9mfm124OtkXtgkn-AnBzbtucy_DRXT9DERUkTb2E7sLUNUDhjGNJi7Hdh1ha1l14dSUJ4CBh4ax7Q_MIyicB9jf3ivApaWVRLkuu6RjeAoK4_fja_X8NamUqpDmH1Z1uiBvxdLJRoRNrF5vJ13pL4xxBaVhdCfk7eQ5ASuD_FoO5WAojCYnvByJoGDpiumhPL675ayeXQ0r8N8x353aQXjIxQfiREWzebzZdNG5j5j2J0sw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.4/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1275 - Case 23 = 400) new (&quot;Unknown JWE key ID&quot;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844833022&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP63022&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceName&quot;: &quot;GnusmasGlxy$#$22&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42022&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8622&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJNamt3TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LmlITlRkdXBYMHNGbXE1T3ExdHBnd1hGSm1SZHlKMVZwQ2xfUzlUS2FINW5YbkFLa1p5UEJkY1NPSEpuNlJGYnZrcHdvZm1IZkpQV2l2RkJCWnNBUWtyc2RSQmFia0gyTm81X3dFZ3pxMVVBS3Axb0FXZl9qNVNRYVFXY1JPWjFDUGJ5YktUaXUzOGxLVEZJZTNjUmpSbHJBS194NTZUOERqeVliZWZXREN5czZadlFYU1RRWEI3ZFFKbzMyZkhNVTYzQXRhajNNR2ZZWl92blJza1hwVXQ1bW5kTm1QbGh4VUtNaTFhencxbWhaWjdXR0p0bTBWUVZ1ekRyT0VkWFllbzhQcVpWb3Utal9IZ3RiVk9Ra2lLZTFBemhpazBmYzV5aXB4WXl4cklYS09GaFpfSlVKVzlQMG50WDJETUpMazRWUHhUeTFzM18xQ191cWlrQUxyUS56b01qUHhpNXBUT3dva3pkLmxDSWpmS3poQVpyaDljbzgwNE9YTzR4dE9iWkVIRUlLb3ZYMm5YTTFlaUE2aTNlRkE3cUptVFNjRTl3ZGdpNFFDZXY0UUpaekFlOFBHZ19pR3ljTExfX2tWcWJqLVoyblEyNTNOdFdwMWYzYzYxSUxCTTA4bEdQUXNiZWtxbks0dU1NTjJWUlZCT1pRSE1aVWR4a3ZkbndIb1VkWElPZ2pCUGc3cUx3YS0tWGRWR2ZmYm9JQzJUSWRpZy4yX29udE5qY2hYeU5Mb0RmakVHMEFR.BVBE1QUovXPyJNixnmprtlZ_BRqiCJ3LIsUBW9IxOzuOEVZ5HPiXSqhPrmGev8DWSRcN2fg3USgTyF0nI7wv5eD3b4e8o1zAk8t5yQv9mfm124OtkXtgkn-AnBzbtucy_DRXT9DERUkTb2E7sLUNUDhjGNJi7Hdh1ha1l14dSUJ4CBh4ax7Q_MIyicB9jf3ivApaWVRLkuu6RjeAoK4_fja_X8NamUqpDmH1Z1uiBvxdLJRoRNrF5vJ13pL4xxBaVhdCfk7eQ5ASuD_FoO5WAojCYnvByJoGDpiumhPL675ayeXQ0r8N8x353aQXjIxQfiREWzebzZdNG5j5j2J0sw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.4/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1275 - unknown RSA public key = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTJPREV3Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5Llo1bGtZdWsxV1gwalFJZ0U1bVNZRnRfYTkwb2hHUXF5czBOTlk2czZsOW9Xclp4SlJGNGdpa3kzMmVaa1NkMXBUMk15a0FDM0lvZHJXSnY3cVZyRmRMeHBQX2NrdTNocDBGOHp3ME56cExNSTJLSEx2YnY5YTNFRy10dHdTV08tejhnT25Ha2tpaGNZMUVVNXRHZkR3UkJza0RsOTNKVGNwOXdGbHhFaG80dXNfY2RjMjdoeUw0SzNNUHk1c3VRYllTRkhVUDd0TTHidEg3Sl80WTFUSExDS2Q2QmFfOTdmNmZoSEM1RGtCa01sTEdFZWVDdGw1MWZhemdHMlNmaHVqdVlWa2FiYlRUWXZqRFRCWFpNbVpPM0FNLWJVU0dQc2tpQWREWHZSVmp1cVdEeXIzX2V0SnNLLUNRUEhETXJfN2hpTTVJZTlKLTFEUTRIOEFCMjdxUS5RYmNKZVU5dmZOUVdicThpLnEwcGtTNDJTWUp4eE1PS0FfNzRjNGtsQ0V5eF82bC1Kc2VrMkRQbEFLd1FPak9WcG5UajhEbWhxbGZxRldBQ3M2eW5xZUhZcEtGYnNNcGxGTk1fWVE1R19UOU5IQVdQM21nT0NpS3pkUTZvSk94RTVnRTVuTlk1d1lGOHJLeWhWQV9yQnhjUzdSa0FWLXQ0aldUSnQ1T3p2TWp3MlJNc1dFeTBZZlhWeDB6RmtlSG9MVVQ1MDBWeldfQS5VWW1KYTIyRVZPWWFKR19YVGxHbEZR.bOZPorHEoYhEFQTWz9Iv6KneULkGdKIUfDfDLoqpfcKcEStiNy-QANJZ18RakN7SjIc-u0x2K1CUOvCq5Fq3U9Fdrzu8DSUl6EIxcj_JpIXa0EZtHyxRSlJaMTVTFTQUuX3e4nKhQW_lLw5ERciYLnGwPQBiJJUwTLZdATN5x5yl0aomy663a4CP1wvDJscuc-Zxe_r0GK1ScQMVP3th7kRsm54t3hPDJjwbxsN8oJkPqWPjceScgntsmSdkEmX6NXUbywxh-8-cJgZiZSP-XJtgfvQIfnxgAbL6wWt2qlfwaMNvVfP7B-oU9VXOqmO4bJn9TknLjnlr72b1Xs5FHg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.1/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (#1275 - Case 15 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTBPRGd5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5Lk1EVHRsTmxzVWtJSWdoNkNPcnhqWUJPNFRuSDRmMXc3Y0ZPa1d2MkkwXzhrZU43ZDJaOXl1ZW52aXRVaUZEVGZkTFU0cGgxWkJNRkFEaFhLeFNfaFRhMnlVbDFHN19rXzREcmFlUmNWSXNBMEI4eGxQOHZqbzB0XzNYM0I1TElkYng3aXc0NklYYnFCYml3aVE3T0NoMUVucFlYRDlGdFJESEh4Q1BzRFQxYzNDUnpOTWlBbEo1RXljYnlsQkpCQVlZdDF4MEpCUU5sU09jMnh6MHV4MC1Qck1LbVV4VVVhSk5FbkthWkdyYnl2MzE1VVJPTlRvOWNyOUxZTFhCMHluNlNwR3JqOW5lNGN5WU50OVZpVzdfblRlUE54QjFWZFBWLXhUZXdXdDhFcllyblJ2aG5vTHpMV2gtYVdIWjRUclNJNWtxR29iTTNCVmtNRlBMYzk1US5KZWlidmFvNXdSdlRjdDVMLmRsbFc4Y2RyRmJnWUZJeWlUN0l4OWJQc0gyV2E0TmZoRXg5UjVrLVNpQldZOXhYZXZ0YTNVYkdRRy1ZejZWdnB6bWJneWJDdkRaTHJIb1Q4bjlIOTRoZXRZZXF5NTlVMkFJc0hLcDlOdnhkaXdKdWtmMnBiZS1xcTBfZXJfUEFSUWZsWk5sblZhbng2RnZQUTQ5QTR6NTBhWUNhT18wNjgwYkpRekpvSFRMQTNZblJUNFM2aDVucUdaQS50NVBvcU9hMG5XOXJqMVgzUDJKakx3.e3vdL8IQqOmclek-Ow6YEsRSkUTiFf4VpEMVYfyOQKJqS6vwqZmDOhdF6ZqIotuE1hcikPABROZkqbNQ9Zos51QQJV7zjURYgrX8-2wsEiFa12k54BHs0si3AwYegOm9Qd0HD8tANLNj2Hoy7dQ06klYHpx5sOymG0mZVQeWoMAYF0MZf9ZIhnkiA7HL88WUIIMrtl3QwJCFV2KEykr4fgLzJNW4rAiqKS2ClQVAw466viK31LiBeU9TmFqaUBNimMIoK7DUGRTVqwML7Z84tfn5WVdapJ4Q9ncRdWwOq9_mrTR7Qtt9JK-imSj0U-0wwIz-JCwTUCY7pdbqG-GH0g&quot;this_is_invalid_json&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.7/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="retrieveStepUpMethods (ISE40504)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpMaxReached&quot;: false,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534412&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTBPRGd5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5Lk1EVHRsTmxzVWtJSWdoNkNPcnhqWUJPNFRuSDRmMXc3Y0ZPa1d2MkkwXzhrZU43ZDJaOXl1ZW52aXRVaUZEVGZkTFU0cGgxWkJNRkFEaFhLeFNfaFRhMnlVbDFHN19rXzREcmFlUmNWSXNBMEI4eGxQOHZqbzB0XzNYM0I1TElkYng3aXc0NklYYnFCYml3aVE3T0NoMUVucFlYRDlGdFJESEh4Q1BzRFQxYzNDUnpOTWlBbEo1RXljYnlsQkpCQVlZdDF4MEpCUU5sU09jMnh6MHV4MC1Qck1LbVV4VVVhSk5FbkthWkdyYnl2MzE1VVJPTlRvOWNyOUxZTFhCMHluNlNwR3JqOW5lNGN5WU50OVZpVzdfblRlUE54QjFWZFBWLXhUZXdXdDhFcllyblJ2aG5vTHpMV2gtYVdIWjRUclNJNWtxR29iTTNCVmtNRlBMYzk1US5KZWlidmFvNXdSdlRjdDVMLmRsbFc4Y2RyRmJnWUZJeWlUN0l4OWJQc0gyV2E0TmZoRXg5UjVrLVNpQldZOXhYZXZ0YTNVYkdRRy1ZejZWdnB6bWJneWJDdkRaTHJIb1Q4bjlIOTRoZXRZZXF5NTlVMkFJc0hLcDlOdnhkaXdKdWtmMnBiZS1xcTBfZXJfUEFSUWZsWk5sblZhbng2RnZQUTQ5QTR6NTBhWUNhT18wNjgwYkpRekpvSFRMQTNZblJUNFM2aDVucUdaQS50NVBvcU9hMG5XOXJqMVgzUDJKakx3.e3vdL8IQqOmclek-Ow6YEsRSkUTiFf4VpEMVYfyOQKJqS6vwqZmDOhdF6ZqIotuE1hcikPABROZkqbNQ9Zos51QQJV7zjURYgrX8-2wsEiFa12k54BHs0si3AwYegOm9Qd0HD8tANLNj2Hoy7dQ06klYHpx5sOymG0mZVQeWoMAYF0MZf9ZIhnkiA7HL88WUIIMrtl3QwJCFV2KEykr4fgLzJNW4rAiqKS2ClQVAw466viK31LiBeU9TmFqaUBNimMIoK7DUGRTVqwML7Z84tfn5WVdapJ4Q9ncRdWwOq9_mrTR7Qtt9JK-imSj0U-0wwIz-JCwTUCY7pdbqG-GH0g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.7/v1/retrieveStepUpMethods</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Send Pass Code" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 OK)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-4619131439094169447864&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;F169285C583AC7A3A9F075F87538C7F1&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2031-12-31T10:44:47.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 OK) ?? 40010030273" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2030-20-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 OK) ?? ABC123" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;ABC123&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2030-20-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 OK) otpValue 123456789" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;123456789&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2030-20-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 OK) otpValue 12345678" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;12345678&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2030-20-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 OK) MediaType.APPLICATION_XML_VALUE" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;sendPasscodeReq xmlns=&quot;http://vnts.visa.com/tpcas/v1&quot;&gt;&#xd;
&lt;clientWalletAccountID&gt;6Gt02SAokOGBxPoKPuP6yVpV&lt;/clientWalletAccountID&gt;&#xd;
&lt;deviceInfo&gt;&#xd;
&lt;deviceID&gt;04312E7B342C80014328036811932950DA075B1C4DC45F7C&lt;/deviceID&gt;&#xd;
&lt;deviceName&gt;Samsung Galaxy S&lt;/deviceName&gt;&#xd;
&lt;deviceNumber&gt;8630&lt;/deviceNumber&gt;&#xd;
&lt;deviceType&gt;MOBILE_PHONE&lt;/deviceType&gt;&#xd;
&lt;/deviceInfo&gt;&#xd;
&lt;encryptedData&gt;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&lt;/encryptedData&gt;&#xd;
&lt;otpExpirationDate&gt;2030-20-31T21:11:22.123Z&lt;/otpExpirationDate&gt;&#xd;
&lt;otpMethodIdentifier&gt;${identifier}&lt;/otpMethodIdentifier&gt;&#xd;
&lt;otpReason&gt;PAYMENT&lt;/otpReason&gt;&#xd;
&lt;otpValue&gt;363538&lt;/otpValue&gt;&#xd;
&lt;panReferenceID&gt;V-3017192484534844832252&lt;/panReferenceID&gt;&#xd;
&lt;tokenReferenceID&gt;DNITHE000${tokenReferenceID}&lt;/tokenReferenceID&gt;&#xd;
&lt;tokenRequestorID&gt;40010030273&lt;/tokenRequestorID&gt;&#xd;
&lt;/sendPasscodeReq&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 OK) otpReason=TOKEN_DEVICE_BINDING" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;TOKEN_DEVICE_BINDING&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2030-20-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 OK) otpReason=CARDHOLDER_STEPUP" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;CARDHOLDER_STEPUP&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2030-20-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 OK) otpReason=TRUSTED_LISTING_ENROLLMENT" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;TRUSTED_LISTING_ENROLLMENT&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2030-20-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 ISE40000 - encryptedData.primaryAccountNumber=null)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2039-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM056UTFNVFUxTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LnFGalg3MklHejBrYkhOdVpsakhIcG5FT1lKR25iaWE1Vmo2NWpweDhUdW5zWnhULTcwUzl3RHZxeWl6b0l6ZWE5QjNZZkdZZU1Zc3RTU3pBN2NZUGFLY05hcWlEbVV1Q09GZ2xHZEUxTFoxTUotOW5rLTQxTGhrcG1NcHVuWmV6WEIyR3NkYVcyQnhMMEV6NG1qMDZEN20td0x1bkxUNTVzNmllRXZZbW5uOWQ4bGNMcEdISDFfeTlENHVLcl9RcGpaeGpacWtMbkd3NjRZWVFvX2xEOFU1UnI1ZURTVWVsZjRDdlEyUEMyTWZKTkNTdFJlb2hTZDRVakZaZGlnRDhoMVk3NDRnQ0VzdHFlMkYxSDg5X0FTYUg1ZnR3bDJ6N1ZGeVNwQ0lObFdSQ3ZxMlRieU0xT0UzWGJnbXdpbE1rVThfUmZfbkYxM3ViUFcwYTZhVWx2US5CRnZmdzQtRjJjanNLYW84LnYwaG00UTJ0THVlUFhVdjVUWktfdU5DaEdtMEZybUhlckRma2pESGFjWTFONEVmbll3WmpHdEo3ZTluWVh1OVpGelhwdnFFM2UtX0VyZExZeHhCSC1pdklIRFBkeG1VWUlRSGpsNjJiYjhpdWxnR3EybmpHUkhXb0hqTTFZQUppeGc2dWpqNFNudHJsMnZxdjk2RUIwdDR6WnpySjZSU3NWSG15SDJvR0dqbUFEcmt6b2ZaXzloNFo5Tlk4ME5tSW00bndiWkVBNFNJNGdDYlJZekllWTVHMk5neGd5VUlQUlF3N0FhR2ZJaURGRDJUanI1RUpQNC1zeUxTT2syQ21faWZQd3VJVHlWLUNIUmpST2I1alg1cVhuX1lFaEo4cjFQS09wTWRPOUc0aWEwVmFnVm43d2dQei1tTmFPZWVWbG5uM2RqQmcwSVdpSVdBWlNJWVM1bmZiY2xMT0gxeW5QTGN0NHp1SFI1YTZpV3ZyeVFpOF9hVlV1TDFyN2kzVW5PMzNJMzI1bUhWQVVEUTZaTHFEcnU1WjR1TXdGbUdnZWpYZkxybmpIZENxWXJ1STRCaEJXaktMNk1UMkdJRUtTY3ZhbG04aXBvNmF5c1h1ZE5BSTI5N0tBOXZLQUVKX2tSa2N2akZNdTgtcVV1MVYzOEZVR1Y5a0h0bTEwWnNpcTBSQmwydlB2NEliT3JiZjF2MXMwSkx0QlF6cHVTTl9kS2xqNDFqSjhpd2pQTFdVaDlOcWZzU0NuS3BHT2VJUUxkcDQ3R3dSUmxPXzViZWpPS2twYjV1N0pSbl9PTFpTTmpYRFpLMkh1NFBjdzNFWWhHSldPUFJWV0hFYzhaQ2FfTGd1NTZIOEFSUU9xNmxJRTVmYnlvN0NXb1VJUE85LUQ3MWxJTlFoZFhJNVNuZ0dLZHY4bnA3Ujd2OUk3VFBnWnM2R1MtbUdPbldDNEdlSXVWanhoVjZzc2wtSExrQmptNnN0bE1qOGNzQ1p0SE5EX0licXdJajdTSkFuUlNhc09FejNTbl8tTHZOYmVKelY0YkRaYTdpTHFsNkR3ZFlINGJwS0wxX1RSaVNVZV80WURkWUpkTlZZcmJ4MUZhVlVSMGJRdWdFLWNzdFRvV1YzXzcycV8xelVrR043MWp0VGJWd0hEXzdYOGRNNXB5WG41WkV6dXJsaGRtcTU1eDNidmJRcmV4UGxNVkRxNTVLNmVLOTF4eDRyTmtZcUszaEYtYjNiaWxyNEN6WS0tWDFjWEVNUHNTbFRIZnoxUFRENHg3UXBXU0hZbUk0bmJvbVlZQjVOOUdJbV9CbjFUU01ad2xRXzI1NGRUREg5Y3dvOWFNRklxaFc5MGItTlBrYXpneEZYZ0J1TEZidDJleWp6S21YRHFhS0ZPblVGTUxkNlBnWXptR1pQNWNlYkdpSk5KQ2Jrb01RQ1hCcUZoUWlMV3hRbmkteUoxNWlDb3ZvdEF1UFhQMlRSOHZtbGJ0Tl9ZTm5XM3dqSUhGWFBlaDJLS2RpREk2YVkwRTJlYkJTcENJTm1QRDhJMjRSOU1HbUt0VDhpNXh6MWlpTjlUY3R1WGMtazJmX0FtN2VNZF9xR3FUVlRodHVPcEtUSEdVaDFUUVR6clZFREk3SXYxcXlGSjlnT01vWEhjRnZTY3JSc0ZEOFVFN1dYQU9mSjUyeUEyaVhuR3FEX3FMbGwxY2JVUnhkbXNsdmVfRXZSWUZLa19RSWtCS21WS2RSLTgxb1hKdnhxNHZLM0ZqTWt0dXNGOVFKVFZZRFpLVGZ1NDZvbjBGVW9zd2JlLUhaVjZ3emZ4ZzJReWEwNDg0cFlMZHdyUEEuLUw4S1hna3dZYjJZZjhETXhPUWdrUQ.F80UZMVP4ju79rAQI3DBW9WrKVzzzixjy8vDCi9tNG969_90ClAWp344KBS2ru8lsAa2jKEoeu7uVDmTt0eeh-06TqLyRdMgoX4SqPmo4f5YPLrX9J86yh5Xjqgx9lU1924efnoXsvcoBhvy7yDDIVW5Hcgq05104qH2Zff_MW2tf6bEDyUEPCipXvoZ2qt9rR4NSww_yMAxh2Lr_ez4ZNEimjr0BUbESJb6W7JDoZ6MT5kohkLK0b6UnWAtw5faUjpEYX3X1XDiJXZ7bTl3oYDyk6k_-O0u2iQIKoS9TbpJjyRlhOph0mC0iHrUUwL8_4_zNrpfxffyfZrVHuskCA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 ISE40000 - encryptedData.primaryAccountNumber=null #2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;tokenRequestorID&quot;: &quot;40010075001&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE301733846921832017&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832017&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP62017&quot;,&#xd;
&quot;otpMethodIdentifier&quot;:&quot;343001&quot;,&#xd;
&quot;otpReason&quot;:&quot;PAYMENT&quot;,&#xd;
&quot;otpExpirationDate&quot;:&quot;2030-12-28T12:56:14.000Z&quot;,&#xd;
 &quot;otpValue&quot;: &quot;252525&quot;,&#xd;
 &quot;deviceInfo&quot;: {&#xd;
  &quot;deviceName&quot;: &quot;GnusmasGlxy$#$15&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC42015&quot;,&#xd;
  &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
  &quot;deviceNumber&quot;: &quot;8615&quot;&#xd;
 },&#xd;
 &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09EQTJPREEwTnl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLlIyRFlKZkVlTWRuclhJcGlmcXdZbHpmYW9SbWRvQmVMU1NOQXdkQTJCOXF5NmY0MHlGbGRHWHdHM0J5YlB4dkpfTVFCQUFVMlFvNG96TDlJZ1dfZWR5N3pWNlJqazZwTG5zWk5sYVlwRm5ldTFDWDRGXzlyMEg1d2FsY0VqSGhtcWFkdFZNNnN1bmg1dmFBa1hIUExmOF83dzA0Wll3WURHalhTM1ljYWR6SHpPejhDeVNqOVo0VGlkT0dvV29nSTNWak1Eenl3UzhRNDN4dDdKMjR5TGEzd0ZlTzh1clhfTnhIN01VUk5LMjlTU3Rud2o5dkQwVUE2NC1Vb1ZLeFVGS3JLODF1SGNJc2pjelpUWTBqTlJIdnVvdmpiYkhqNGN3NWNRVy1TZC1kcS1BU2YyMWFZYk1sQXJwZXcxNV9BaXNXNllvNmxFTmdHeHN1WTd1Sk9rUS5IU3JadFNqOVpHQWRMeDVWLlFOVXNiZFo5SlJQQi1zakFXV2JnNFA2cmQ2eW5XR19hZ01sOWNqWFFCRS1jZFp5WE90TnF1b3BOS2FnbG53SlkyOHhsTTNlTjZKVG9IUS54Rm5EWGI0Zi1KTG9ONkJ3SEtOMlhB.sKSGnqvmjb_x76E41W4YbunrF-TObrkUZvfCppzfTKHX7WIJQB5KjlwGBt0zOd02P2TlrZkrQ-iIS9TlBEKgLPMUx-oXZwvJvJkFo_A80IpvlMXWeWqMPqMjkQ-zuZwF51ttmBN2DhEUgVfNpgzgP1CRPA0uW6Z0phgV0sDA0sVM3O8jfVTigx9xbnkQNWYlrB1qOJBe4rkHb7u1LYYtPs0EtsIagsUN4OxFNwqor7ksYDOHoPdnfvWNsby3Gp8cmjBfsegrjkJhDT6WLa5Y0-pMBlHjIdMvUhgEnTUPtiubZurncF67S4XfACvbRhjNJKc8NcCrrFvPN2mNWMLTiA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 ISE40010 - Cryptography Error)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2039-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNOREV3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaWRXNXJibTkzYmlKOS5kaFM1bkRLUXN2RHBtVDA4QXF4dWU0eWRJNnE0T2taT3Vwbkw5TmpyVmppTDZKa0hUN1R4NjFXeXlZeDNjN2QtSWZSMEpod0RudmpKeGRhNGYxaTY4eHJUYzZmbW82dk1xTXotNTZjUG0zTUNfYTBZSUNGZDRRekFHTVhmRk9WT3N3NnVidVNKVzhKTzBuekxQXzlyM0FZZXV1ZzVYRDZPSHRfczRpX2swUl9WNFZ1bHdiMXA3eXBGcXhRNkFDcVJlaVRqUzc2TlE3TFQtSXVLMHZyeEtNRmNUWjJ6X1dfb094X3loaUdFODBvVkhiZHU5QjFXRDljN0E2dmZyaVZxcHhpOUZUOWRJelllSy1YV0paZVNWVHpaZDZPcFVWYVJCRzFxOEtpTC1LTG5TYlJLbUliY09RcWN1VEdHRHlRcUVnQkxnVlQzdU9iY25uNzE4N3dUeFEuVWp5QXppZVpxQW1ydUZkMC5PVVVtdmhfc1ZFanJZbnlNNVUxeXAwSkZFNWNGZDBtU21INDhiMk9iN1drR0twZmZ4UUI1YkJodEJDQjZNN1lZX0prZlBkUXg3Tlo2MTVhWVdJSldoYXNSZEJBVG1rR0JvVnNzWkZMYVBuYjNDZGp1LTZhbGhMcXlhTi1SLVdPV0VnVmtWeTNnejZRNkRieXYxR1U3c25RUGx1bExtRzRBQVJkdnFvaHhyNnFLNlJia0JhSTFoZWlIYk43dVZBRlR4S0VuaVRuWldJOVc4VnF1Z0xnaUhGTHVOQURSY2J0Tml5Y0M2YVNkNW9qWFdaZ3VQRzZfdElGWDBLRG9BcVZNM2tWSXhhN0ozcXZfVDR5R0FLdUhSVFFFT3Iza1c3WUliNFVfN2RrRVA4Z3NpZVg1elAxZWlGUUJENlBhRzV4OFFMQ1ozUTV3V0EwODFBTE1aTU9iSnpEWHBaZS1kMDA2NFlRVU5GZlk1MW5xdXVleWhqX1ZOeVFCemQ2b3lNaEV2LUNmaFV1eVRZVGJNemtUdWExX3NGY0g0eW0zYWJ5elJOWGdwQlVRRDVlMkhTT0JGcWI4YUtwbW12RVBiamdxUHZNSHgwNEUtYUk1R3ZFVjJieDk4VVBfYWtHcFJkekg1aXJXbEFKOFJwd0JTZDJmOVdia3gyeGd2aEEyLTQwZ0dSMXBCM0VZUlB5d19sbDNVNkZYVHpUQXBNWjlxY191Rlk1azVyWG9IamxNenVTeURhTDRrVE4yOEt4QnZUUDNaeUJTS2c3VEhjb2JtOVRMX1FwbU4xSTMxT0FhRWVwNTRLNzAwbUpUYXpwUmxHRWRwNXhCNVJUM0RwTTVmcXdmVHFnMzJ3WEhtS3pfaHhzaGNrUGZCamZnNV9vUDJCbEpNMU5uYUFJTDlWSVpXSTczVmppVS1ybVJWdVF2aFRYcnpfWHI4djN2a0FNS1FDUE5CSnZOQjhsNE9VZkZoU1RRWlhYakxBNFpuZmY2bWVxZ2JnM0ZFSDNnRThLeFdrNk1HbnA0YmYyU0oyYnNUcVZ6YmJUdl9rZHktYWpyUFNLVXppOXU5dUU3bE5JaS1IYUlKLWFfY01oUl9NWGN6YzlwODBxd1JXcV9hanR3eGFXcjBjNC1GSV9GN1V3MUNuajY1VkVVU055THZmLXBEYkJBZk9sTmpIZGx1blQzUExhNG13SnRlQ2hCNXhJdnhib0FLS3pyVW5yY0VULWZPYkpMbUtDY2tvR0xIYWY5RnAyeENqWDRaRkZRVkh0TTZycTdFUzczSlBwWllmampsUVhvRHJPa0N5SnpDenlWVV81dElhRGZoOGFFLWNudmZOdndLUV95Z0lKWDdTMmZueDNuT1c1cXJjdXJmWXNKUnYwcXpmMk02OEIxNnYzOFVDZEZVLXRSaE1RMW1kdzRDSmZpSE1iVVFUdWs4dUNaM204TXRHamEydFJqMGE0dUx0MUVXVTZjYWJydzQyUXRpc0FzVVpNR0Y1Y2ZOaEV5OUYwNzZRUzZBZTlNc0ZuTy1nLVpLb3lVMkdqTDhIOHVkVHJEOTVYTEs4MHloVTc5cVZkNUJHSGNLelBYZU1qYWZtZnZoWW41TGh6Y2M1SDI4T1p3RzdnWkh5RHlGWjRGUTNrYUFJTHFSUkRWTzRpdWp3N2RPclE1dEFXZ0NheFRUVWlDYnZrT3BLWjBlZ1R5NTVIMmh0aUNWTkF1YmhpcEhYelBCWlYxcDJoelRiR2htRXVjWEYtclhObzd5MXluOUFWOGhhNjktNk9OekRvQUVvSkp2cGJNZ05MQ2VqWWVJd2lPZjV4cFdjSENpVzRjcjZhcHB5QWhJbW9VOU5rU3p6X2pxbFRlMXU0Lm1La1NRcGk4dnBiTlU3ei14QmNHeGc.0mRdsE6HTfkpCX9Z0tFT-RCAr-S88thqyeSeJPk2PwqePho5JrvYtOXvukT5EjeP6rOIA9knlTGITobUKg4KdlSv9nuFRvcHi5RMK8e63i2kqrh2yy9-Hb1JgbMknd3yB1KEqnt5JfYJnyiMpTImesZV6QPMWTUoM4lD_IzjD6Pp9DK4gIlowTQ3Z1wrk7gKv_V7ztzBmIQoEpV2-xMNCdOT6-KRWB8pbK7jXpC5jU_Nf8-Ogkz18OTxLQUNtvjCHt1_JzRbhdTOgFFdPDYnyRfjBJ0O1r5sB0eMXlUyWsFoe-94EllS2KA8U_tfkqc9YveiKTFnZUJTVtY31WtTIg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 ISE40010 - Cryptography Error) 2?" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2039-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllcjRPVFAiLCJjdHkiOiJKV0UiLCJ0eXAiOiJKT1NFIiwiYWxnIjoiUFMyNTYifQ.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU9EQXdOVGsxT0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaWExQk9jM0YwUzNaWFZrRnZVR3hoYTNaa1oybHNWbGxSVFVWRmNsZGFhR2hQVldKSGIyOUVUV3BrWVZsd1lVdExSeUo5LlZ0UGFMWHhuRFoyMm12dzcwTGlZYWxicGJrc2xPMDlCTlNrMmZwUGVudlRIZktSbG1NMGYzd2U1UUJmZnFMdmlXTEtyNS0wRXc5c1JiT2VjWUxSV1Z2SjVSZGc2d0VmbU40alVpYUNDWXNoRFg5cFlTZFVldmhxVTVHTm9OdUVfRDB0alI4T1hrME52aUttSUt6a0k0Y0FxUkZHRlo2azdaT0JnS21ZWnBsYlJ4TGV4N3pWWFlHS0RBdThlanRDdEdtTlE1ZUhQXzF1ckY1dlhiWmx4RmhTalJobXNYRnVHME0yX21oeFdET1I2QW1Hd210ZWlSZjU1SGxXWjdMeE9JVm9TSnA1TlVKbEVab0Y2aGhxV1FicE1zckJ4MmtiekY3SmhITFhxN3dXUG1OVDcydUtadmgzZUxtWWVfeWZEODJwbEhDcFotRlJmekZFUXlQMk91dy5SSThiLVB3N0JNSkpoN2RBLmdnbnE1Q1pHTzZETWw5cFdHZVpLcDhxdktlc0RGSmFncHZUc2V5cG5GXy1OOENPNGRXX1RkTUNEZG01WVdIc3ZJX2cteGx1ZEpVMmpjWHdqZHozOVlpVHdQOWo1OWRZSVRCX3djUS5HaVloeWczSGd5c1FnQ1NJcnA5WTVB.iCV5Bzm8FgXM-Q6prsY2Lm8Ma_ZccMC2u70zYMmwpEfN4CS007yti7Pt4d7yu9JZU59qV6y33wrKL8PigXpp4IrTTaCHjT67CKjH94g2azJZd88jjUkxcAle2Dz-eGbufjv4djOfWLotmr_Kn38u-64XTlMLvK8EIeWJzJUAQRMV2sxLN9IAecV_DEsNs6tlluJopJObC8Ci-hQ_UgfbKv4BCdFJ47Zm8fj2QVUwJ_WKD9HBoTr4Hbe6STGr4VdHHL_xitKJwk2vcgCKB2MluAkwurvtrGtANCF5mQM5uRvulWUmEvrTify1G6qd5xlRJM14o2gYjL6vy28TK7QkGw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 ISE40010 - Cryptography Error) &quot;errorResponse&quot;:{&quot;status&quot;:500 ???" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844834001&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP63001&quot;,&#xd;
  &quot;lifeCycleTraceID&quot;: &quot;733846921834001&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;666622&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PROVISIONING&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2031-09-16T17:46:57.000Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceName&quot;: &quot;aVBob25lIGRlIERhdmlk&quot;,&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC41022&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;+380677702922&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ1bmtub3duIiwiY3R5IjoiSldFIiwidHlwIjoiSk9TRSIsImFsZyI6IlBTMjU2In0.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZek1UZ3hNekEwT1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU4xQkRVall6UlZWVVVsTXlWMFJhT1RkTU9Ea3hNMlJIWWxWNFpqbFpTVzlWUTJSd1QwcEtOVTkyU0ZaSVJrMHhTU0o5LmNZSTczZHNMbHZnSklMUGFOWV9QTmFiNS1GTTNlSzJGb2V5V3M5QUdSRU1UTGtOWXpuN09KLUN5VkdtTWZELTRtZUQ1TWRuSFl3R04xcXBuTUtWcFJvRFNvLVhtUEN1VmY3bHp3TjB2VWR6ckp6TGZ2RlFrZmg1d2Ruc2VTTFU2OGM3WWw5UGpVcDRXRE8zZjZ4RVYtWkFETXhXekpzbnV0X0ttOWpMNWUxWGhPLVE1bXp4anBPRG1YR1JTRjJSUWNvMWdxRzFPR2M3VzVSSkFCWjdtMlFCekVlNmNMTUZxWGZwV2dOajNVRjlUQ2hJaHQxN1ZDdDktaVVzbmp5VDVGQ3ZzUVljY3l6ZUZZQ2EybjViMTRGaVp0dVd6UnZvNnRLQ1JVR19pYW4wdlhtcURiNy1BMzlaSkNhRmkyd2JEcTJKcERrVjdLd2RSMzY3M2hmV1I0US5VWW1JLV9yOGtxN1pMQWNxLkhuS1YtVVl1c1VSand6MDlheF9GY3A2cllmNlliMHd6NlJnZnFtSVMxUDU1U0RhaEluS3JXWUxieHVfYnNvX3NadXJBMzRXWnFHTVJkaDFMaUgzOTQ0ZEp6TVFOQ2ZxZTluSS5LNUR4V3dudGpjd2RDbXBwejBpUkNB.pj313vkpvKgFKNZT7EMB8AWIDUnweDR21umHFfS0cn7hj4K9JbJbnw3PQ_HXp9-84AqtK_NkvR-LvlGHTOw_uqtmyYB6ZT-0RX0QCuY38ss-fgDnYA0_zU4dVmbvfOcS0IqsyxiiC_GoL7AOeGdrIkE1z_XSf9KJRnaOM62Qram_dWwfkiYOKbfJMHgJh_a1jrE5ispfNI2hPTEHtvdDSkMN-nC_3jS_R5d3e3vytwgQKKufBU5JRI2XxT1EaBCXHSDpFXzjhqPAp7WWG79Up01FzlQpMP5QCxJElsexwyyyHBwI3Ug_PXNCRcW2aK4Ljr0EjrX4affnY9exuPO45g&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 ISE40011 - otpReason=UNKNOWN)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;UNKNOWN&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2039-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/**
 * https://www.blazemeter.com/blog/scripting-jmeter-assertions-in-groovy-a-tutorial/
 * https://stackoverflow.com/questions/46320124/jmeter-how-to-verify-that-particular-elements-of-response-json-are-present
 */

groovy.json.JsonSlurper JSON = new groovy.json.JsonSlurper();

try {
    if (0&lt;prev.getResponseDataAsString().size()) {
      AssertionResult.setFailure(true)
      AssertionResult.setFailureMessage(&quot;Failure response: Response must is empty&quot;);
    }
} catch (Exception e) {}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 ISE40011 - Unknown PAN #3)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;tokenRequestorID&quot;: &quot;40010075001&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE301733846921832017&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832017&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP62017&quot;,&#xd;
&quot;otpMethodIdentifier&quot;:&quot;349820&quot;,&#xd;
  &quot;otpValue&quot;: &quot;666777&quot;,&#xd;
&quot;otpReason&quot;:&quot;PAYMENT&quot;,&#xd;
&quot;otpExpirationDate&quot;:&quot;2030-12-28T12:56:14.000Z&quot;,&#xd;
&quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7D&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380507534413&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;en&quot;,&#xd;
    &quot;deviceIDType&quot;: &quot;SecureElement&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;osBuildID&quot;: &quot;TU84M&quot;,&#xd;
    &quot;osVersion&quot;: &quot;8.1&quot;,&#xd;
    &quot;osType&quot;: &quot;Android&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;Samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;Nexus&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;ME571KL NA K009&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+37/-121&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;10.0.1.1&quot;,&#xd;
    &quot;locationSource&quot;: &quot;CELLULAR&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;TRUSTED_EXECUTION_ENVIRONMENT&quot; &#xd;
  },&#xd;
        &quot;encryptedData&quot;: &quot;eyJraWQiOiJWSVNBMTIzNCIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVM09UQTRPVE15TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVNVUkZRVEV5TXpRaWZRLjJVRnd5bEhzUGRGYmpUbGNjb1NzUzBhWjRoZEdfSVVuOEdGbzlYQkJXQVczS3M1b29KUUJsVE9CaEVUZEloWEI4eC1UWFFwMXNMV0RQMXd4SU4wajZOTFJ6bWpTVlpCX18zRUx5OS1mZnVFb21reEtxcmt2Uy1VRWxyWkI3Q3hHdjNQZVc5NkNFOTNGLUJlZzRSVmtkaDRhRnBnSG5MaUQ3cnc3eTNIaWNtRWdyYmdZNlJvNDlqeXhwU0lxZ2h6dThmXy1fdFFRQnR0X2xUQ2k2RHdtRzNtQTh3U3gwODFsbjlTRjhpc3lPVWNBRnpCU3NOdmR1T2xjOTF2eFVqVzQtTGRlSXFsUzdUWmpMVk5LX18zWXRsZ3lHaVB1ZjY2V3FMQjM3MDNITjJWUkFyS2dVQ3FQNVZsMUFJX3lOQjhuRHJwRklSa3pCRlY3b21yZ0w2TFFmQS5CMklhY1otXzJYMnp3NDhSLjhsbmJlWGhhREE1N3h4TlhRajNfaFM5THhGQngtWVQyd3Z6cEs3UGJUT1JLdVVvUmxNMGFFRF9sa0ZqeldYM0MwQmVtOU0xa3puNHA0SDFpR2NyRDQ1Q0xHTnhGTGVUN3RGcy5XdGFfMElFTmZES093RXdPVnVZQ2xn.RNOgN8aZ7rGrHnG80kvMqUynga826ztZutM44YVpGUuApJWUioOCjNNsqP7vEfsc2oxNyTUtQxVY02w1f-9DVhHfL-1byJnck0QyxDn_OtA3HJeHHYMWbW-8iNOPJ9ytuwlPhffprTuYfnbqpjGKE9iU6CiMzxNgF6nOyaFOCikP8FKL-NJtvjn0DyQwtVVmg7fQ-VqLsn8tcLxSJn653op-ZhDTAV8YLDi3u8OxM7zFjS37EgnXPjTsD3ZGAQmEtZC8krL0pxZHufWeXt5XyqX-eV-0D2Yri0eB4Ycs1ZhTPFp9AH0asNQ0DNbrcGsnUE4hh4lCc3U3wTa6er1FeA&quot; &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 ISE40011/OK - DeviceInfo=UNKNOWN #2.0)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2039-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;0414103B864980018088017685946200D290CAE7D7860CA7&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380952711598&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 ISE40011/OK - DeviceInfo=UNKNOWN #2.1)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2039-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;0414103B864980018088017685946200D290CAE7D7860CA7&quot;,&#xd;
    &quot;deviceType&quot;: &quot;UNKNOWN&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380952711598&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (200 ISE40011/OK - DeviceInfo=UNKNOWN #2.2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2039-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;0414103B864980018088017685946200D290CAE7D7860CA7&quot;,&#xd;
    &quot;deviceType&quot;: &quot;WATCH&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380952711598&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="sendpasscode (SEND_OTP) &lt;" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;SEND_OTP&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.send_otp</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object history = vars.getObject(&quot;msg_history.send_otp&quot;).get(0);

String cvmCorrelationId = cvm.get(&quot;correlation_id&quot;);
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);

boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(cvmCorrelationId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);
if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found conversationId `&quot; + cvmCorrelationId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (ISE40000)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2039-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.errorCode != &quot;ISE40000&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response errorCode = &apos;&quot; + response.errorCode + &quot;&apos;&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (ISE40000: otpReason=&apos;&apos;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2019-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.errorCode != &quot;ISE40000&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response errorCode = &apos;&quot; + response.errorCode + &quot;&apos;&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (ISE40501)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;12345&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2019-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.errorCode != &quot;ISE40501&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response errorCode = &apos;&quot; + response.errorCode + &quot;&apos;&quot;);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (400 Bad Request)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot; = &quot;40010030273&quot;&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;12345&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2019-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (valid token data)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2019-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (OTP value contains letters)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;ABCDEF&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2019-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04312E7B342C80014328036811932950DA075B1C4DC45F7C&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;8630&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Samsung Galaxy S&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalF3T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLlA0ZFdzcEkwYjNmRGpoVG01dE1PN1hIeFRncWZtblhDbmJ0S3VjdERrdFVteDFfRnVvVlBzWC0zYmhlcEoxVG5qa25FYlRweV9JaXBHaFFqalA0YllpQ2pzUUFHODdSeW5UOWRqZDRXTW5mUXl6ZGNMTGU2cUwyOWIyN2x1QjJoeGdKR1dsdHR4NUg1OWpLdjZOUHRXZHJ5bDRDMzh0MEV2c1FlZkVzUzFDSHZNQTJXYlRrZzh5OVZuSUx4aGVMdXBVZFR1czNzNWV1dnEtcWRadm9mTTllc251X2hLc0NQY3NHUXQyTkgxYTNTazdmT2hma0Z1NHY0enZ3SndKRUhTdE5laEJidDhMRjJocmE0THYySVU5Nkc5clB5ZmpWRk9hOS03eUVmYkpwRFYtdXQzSjRfT0hreW5Id1JpNC1aT1FDRWpqN0dYMHhVUGJpSjRpOWtSZy4xZm5WdXJJZXgtOEFyRFNjLnU0cUk5S21OdVVhQkM1UWpib2d4NUJaTFFHOFVlcGJlbkNUTXB5cUFWRV9ibEV5UHNVY2c2c29DTE1OR2VkT1J4M1FBMlFqd3V2Qi1UdHJKV25RYnhnUDc2TzguNjluMlN5Q0xvTlBubnZ0M3IxSndzUQ.FrkjmDFrCr7BstNWML1xfrnMrADmy6kGqFdzE8zLCbf685ZAOmEnvFeMQ0HbGHMRwU_-IuuEP4b78Ze56s1_e3Xxc4BhXjcgvDAC8SxmSZdnilGrqsrbVZI53YWRQ60z82NOLPcjUog0YkxF-3Rlb8eT9JSIr9OYEgtPe7P_jHr0zJ5sq_-PJloOkNlh4QOzeO_x8VSpoFEftV3_qjYracwBTWSHQUL5ztxQ89r5owAI0XxCaq1P7sWc6wBM0L9Y7yWf6-6p9K7qPKaRD8U-xaCrpHVkRXAHgNQsQbstgp4v5PN2_7NhN53iVESwGQPhID2WiAq-ekjI4JOTQ3NSVA&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.2.5-SNAPSHOT/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData());

def errorCode = response.errorCode;
if (errorCode!=&quot;ISE40011&quot;) {
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Failure response errorCode: &quot; + errorCode);
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (otpReason=PAYMENT)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;PAYMENT&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2019-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;&quot;,&#xd;
    &quot;deviceType&quot;: &quot;&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
    &quot;deviceName&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNNakE1T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LnBlNWVJaDlFMmh1T3JSbGE5NGJnMWJJeTUyaFJmUW9HSXlWclNrM1hNUHpfT3lwLTQzMlNTVVppMFBGZmVkOGg5bVBMNWpXZUJfT0N6T1duOFhJWVJwRm1XTFUwSjdXajRrbnpsRWVNVjlIdTJSckNmSm82VzkzWWpSZWZuRllleTg5aHZqdnpDVlhKUzBUVDRiYzZVZjVGREVBY0N0ZkNXYTd2YWVzX2REdkhMMUtCaFNrNDBHRXNLLWs1YVlyTzZhS0Jwdi1OQ2Z3N1QwM3Fhb3FJTEYtdmdVWXcxVDl5cEdRU1V6NnRnODM2OHBNcmFJakVWRFhiQjFTY0xoN1BIQmtLSkZ5NjdHMVhTRjE1eUtPMUJuRnVKRm1YZ196ZmI0YVVJTHhLODFOejVPQjJjVS1FSDRHTW4yRUtsTEpxZmh5WkM1WUNjSlBGbUwzUUxsZ3dCZy5KZDFkRG1hN0FRS0YweHZTLm5FbEo2Xzd3Y01tcVNtR1I2VFZMZkk3UlpqLXpDQWZNVTFDdEFwaWgwek16SDFxLVY3dExUMWxWRUFteWRNSDhHLUtDQzNkY1duenpXeWpBU2w0R0IyQ3VqWlJUTUNnSFVYVS5CV3l0V3kybGNWQzNXME5id1RscUV3.AFz2-QAkYdFRJU8n4guT9a679e0Gzyhsa7_UKH-3qD-pQ2AJdHRHSk5d6S3vKvFZoE-cnSV4jNBOVPr-dsY5fiCAQrm4u70iWVEPphHZhB_tD8mjz75dgnI0ceB-4keH0UGrkafbHEMGKlYbK76OElTTtXdudOecAYgN_NMf1bhq03J55qntEN3s3KviBLuuzCltRZaj39mgCihGr5SS_Etdn2p6Z3DvQ3Xr6ELZMPwmugPuaBNmiomMdQlCLLHGPIGrbYUzBNCeDKFGGgEnxdgb1Ft6wE4h7SsUAO_vLOeB31pgK_hZvQZUAc6hzlfeponXkunKdExpcJaWwqNIrQ&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.2/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (otpReason=UNKNOWN)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;UNKNOWN&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2019-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;&quot;,&#xd;
    &quot;deviceType&quot;: &quot;&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
    &quot;deviceName&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNNakE1T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LnBlNWVJaDlFMmh1T3JSbGE5NGJnMWJJeTUyaFJmUW9HSXlWclNrM1hNUHpfT3lwLTQzMlNTVVppMFBGZmVkOGg5bVBMNWpXZUJfT0N6T1duOFhJWVJwRm1XTFUwSjdXajRrbnpsRWVNVjlIdTJSckNmSm82VzkzWWpSZWZuRllleTg5aHZqdnpDVlhKUzBUVDRiYzZVZjVGREVBY0N0ZkNXYTd2YWVzX2REdkhMMUtCaFNrNDBHRXNLLWs1YVlyTzZhS0Jwdi1OQ2Z3N1QwM3Fhb3FJTEYtdmdVWXcxVDl5cEdRU1V6NnRnODM2OHBNcmFJakVWRFhiQjFTY0xoN1BIQmtLSkZ5NjdHMVhTRjE1eUtPMUJuRnVKRm1YZ196ZmI0YVVJTHhLODFOejVPQjJjVS1FSDRHTW4yRUtsTEpxZmh5WkM1WUNjSlBGbUwzUUxsZ3dCZy5KZDFkRG1hN0FRS0YweHZTLm5FbEo2Xzd3Y01tcVNtR1I2VFZMZkk3UlpqLXpDQWZNVTFDdEFwaWgwek16SDFxLVY3dExUMWxWRUFteWRNSDhHLUtDQzNkY1duenpXeWpBU2w0R0IyQ3VqWlJUTUNnSFVYVS5CV3l0V3kybGNWQzNXME5id1RscUV3.AFz2-QAkYdFRJU8n4guT9a679e0Gzyhsa7_UKH-3qD-pQ2AJdHRHSk5d6S3vKvFZoE-cnSV4jNBOVPr-dsY5fiCAQrm4u70iWVEPphHZhB_tD8mjz75dgnI0ceB-4keH0UGrkafbHEMGKlYbK76OElTTtXdudOecAYgN_NMf1bhq03J55qntEN3s3KviBLuuzCltRZaj39mgCihGr5SS_Etdn2p6Z3DvQ3Xr6ELZMPwmugPuaBNmiomMdQlCLLHGPIGrbYUzBNCeDKFGGgEnxdgb1Ft6wE4h7SsUAO_vLOeB31pgK_hZvQZUAc6hzlfeponXkunKdExpcJaWwqNIrQ&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.2/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sendpasscode (Invalid Json payload)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;tokenRequestorID&quot;: &quot;40010030273&quot;,&#xd;
  &quot;tokenReferenceID&quot;: &quot;DNITHE000${tokenReferenceID}&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;6Gt02SAokOGBxPoKPuP6yVpV&quot;,&#xd;
  &quot;otpMethodIdentifier&quot;: &quot;${identifier}&quot;,&#xd;
  &quot;otpValue&quot;: &quot;363538&quot;,&#xd;
  &quot;otpReason&quot;: &quot;UNKNOWN&quot;,&#xd;
  &quot;otpExpirationDate&quot;: &quot;2019-12-31T21:11:22.123Z&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;&quot;,&#xd;
    &quot;deviceType&quot;: &quot;&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;&quot;,&#xd;
    &quot;deviceName&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNNakE1T0N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LnBlNWVJaDlFMmh1T3JSbGE5NGJnMWJJeTUyaFJmUW9HSXlWclNrM1hNUHpfT3lwLTQzMlNTVVppMFBGZmVkOGg5bVBMNWpXZUJfT0N6T1duOFhJWVJwRm1XTFUwSjdXajRrbnpsRWVNVjlIdTJSckNmSm82VzkzWWpSZWZuRllleTg5aHZqdnpDVlhKUzBUVDRiYzZVZjVGREVBY0N0ZkNXYTd2YWVzX2REdkhMMUtCaFNrNDBHRXNLLWs1YVlyTzZhS0Jwdi1OQ2Z3N1QwM3Fhb3FJTEYtdmdVWXcxVDl5cEdRU1V6NnRnODM2OHBNcmFJakVWRFhiQjFTY0xoN1BIQmtLSkZ5NjdHMVhTRjE1eUtPMUJuRnVKRm1YZ196ZmI0YVVJTHhLODFOejVPQjJjVS1FSDRHTW4yRUtsTEpxZmh5WkM1WUNjSlBGbUwzUUxsZ3dCZy5KZDFkRG1hN0FRS0YweHZTLm5FbEo2Xzd3Y01tcVNtR1I2VFZMZkk3UlpqLXpDQWZNVTFDdEFwaWgwek16SDFxLVY3dExUMWxWRUFteWRNSDhHLUtDQzNkY1duenpXeWpBU2w0R0IyQ3VqWlJUTUNnSFVYVS5CV3l0V3kybGNWQzNXME5id1RscUV3.AFz2-QAkYdFRJU8n4guT9a679e0Gzyhsa7_UKH-3qD-pQ2AJdHRHSk5d6S3vKvFZoE-cnSV4jNBOVPr-dsY5fiCAQrm4u70iWVEPphHZhB_tD8mjz75dgnI0ceB-4keH0UGrkafbHEMGKlYbK76OElTTtXdudOecAYgN_NMf1bhq03J55qntEN3s3KviBLuuzCltRZaj39mgCihGr5SS_Etdn2p6Z3DvQ3Xr6ELZMPwmugPuaBNmiomMdQlCLLHGPIGrbYUzBNCeDKFGGgEnxdgb1Ft6wE4h7SsUAO_vLOeB31pgK_hZvQZUAc6hzlfeponXkunKdExpcJaWwqNIrQ&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-1.3.2/v1/sendPasscode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Token Create Notification" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalV5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLmdEZFBCWlVFQ3E5aE9fQWxZMUpmd2dqcEFSdE9BS0NVdnNlZzBGcV9wSVlXbHJLZnViNWFlMDMwc2VicW1zM0w1YXBlTl9MbkN1cUNCMXFjNktBY2JGQ0IteEljdWs5bmdtRExGbE9DMFJtdUxmUVlDTjdXM1ROTmxDQjdGczhyRHBoX1hWTE5HeFc5U0NHVWJ0UTlvaGcxaUdDR3FxclM5QTZLN0N3RXNwVkRJVS1veEplSkxJN29DYzdGMHJnTjR3MWZTVHhsMGdGOXctY3MxMzc1eWpodk1mY0hDLUc0ajlHMzVwRUI0ZlduRVR4amg4SFphMjFiUEFuUlZaRFBUUVpKc2RNVnZRS1h0Y2lQWGxZcWNFTFJrbGRWRTRMV2ItWkgwdmp0WEZKeUJBeDg3V3F6b1FheTVhUHlrM2Q4dnJhcEdJMGFabGlGTXdwdWNfdFA2dy5GUjhMazhUOC0wRlR0Sm01LnMxNnZPaXFGX3hnQkdwUHJJdjNZY0NfdXg1aTk1LW9mVk5yRzJldTAxNVNPUTlGbUlPNEhad3pZMlhaMmZOOGVlN1JraWZ1MXRHUjZZMGZmSTBOaS1SX0wtMjJ6Z0VlV01TRUpnTjhtUjQtMGJtS3ROckktUHZabnBsSFNWaWRLRkNVZndGclZDMm5wdUlzVkNGanhJeFpOZmMyOVJtSm41QnFtVFR1YlhaR3c5ZEhxaG4xTXVlTlExbHhTWmFjZzQ4RzE5REgzZlc0M2M2R1A4UEFSRjBqZTZNc0dDWG9pM1dQSm10R19qOWZkdWF5UU5fS0ROdFlXTlhVUVVVeHpheExTR0ZkWUZ4ellhTVpwWW95U0tLUFY1M09tT1YyaHVvRkFwcDlKZlAtZmU3NEhqVlI0UnBfRzFBcm5veEdiMldQUzFlaDcyUFlfSzVoQW5MNHNBRktfbGpRckg0a3B0UlQ0VDIzM2xqQnZhMEc0Sm41akRqdDhUTDF2R0NsOTJMWGgwR1BqVFNPN1V6UmVHUGVhREhWZEk4S1BTeVR0VHhLbXRCOWtfSnQtNC12emlUYTdlTF8ydDZTWk1TVG9CZV8wX1VoelBKb0RQNGEtMER4R1hac1M5UWhweVpVUHJ6N2ZsUklIUUlSYi1FaTNwZ1U4eEJ0THo2SFdVTXZiRTR4cGdLd3dWN0U4Skp2SmtOZHEwZFRJd1lUdzhtbG5ZYXhMRjNnRGo1ajF2Z2ZIZExaRG9yQV9ZMUtrd0twZ1IteGppWFpLT05xUFdJN1FMUEtvNHdDU3FKNWlTZmFXblVXQ0U1OElKOVBiOWVTeHNfVlFUdXVQRTEyYXRXc3NGdVBrMmd0ekNpMXZTREZWSlpoV0xXQ3c3UU5qY1M3T2RUcG9RZE1IUUxQWWRTV0lxNUdRX1ktTUtEVlMxbW13azU4ZkxpWWM5REtSY040enM5VWtZOEY4SUhRVmQzb3R4c0pmeG9qVmR3Y3cxSjgtTkVTUjFPT0ljMEZBd3FWLVEzcVNhYWgxd1kyb0hnY3F4WHRFU180WDROaEppd2xMWmh3SUExeTlKekx1aXJ2aVV0WHJ6TGJhRXd2STNydGlpU0JNSmxXWWNRMXk0Q1Q5VWh4M0R3cEk1blM4eTNESU1PQXJXU1YtU1FjQ2RMTDNxaWpwQTlvc1Z4TWxtWWNMSmYtRnlQcU5zbHo2RzlVeV82OFlJbXM0NTZZMkoxSkROOFV6SHp2bHVfUWlKek5halQtanhxVzFYLXdCQnpQU2J3RTdvaHNWWE4xV0REcVRlVkppRjFGbGVPZEhvWGRvbFFMTWJTblhaX1owdGl6N0pfZXRvRG83V2JlclJwU3ZNN0JLSUloRTJYUHRRMUx2TzhPT1QwQTNjNzFBcVdqcFpneks4c0NZUHpwOGZLWG56Snd4b3BOcjlxczM1NHc4Sko2UGdCU1g3LXppeS1nbDFPNTI4ZThLOUJCYU5mM19ITWMxdk9xQWRMZjhZVU1XM3N5dnpRODZ4OHVvdVIya3RRZlhoRlVUUnJ4LUhKM052WS1tSUxmUHNteTlBU0JmZXp4aVl4YVdHU1BwWDNfQUpEY2NVU0ZoaUdEdEFrZ3pKc1h0UlcxQUVqNndhbG5RcU83azdpRUNpdENaZ2FkLWFyZnVqNzZkNy1saHdRblFuM21nSmJDWWp1dXJkbmZRUEo5VUR4TXdYTmZzTWl1cVM0U1h4WnJ2QlNMZXhzajFncGFacm52b3NDMWQ5akxPR2lpbl9jMXFJX1U3N0VwOWNBMnE5MnNMem5ESDJ6VkJ0LWVuT3U4STlNSjNfRUhnR3JoTUpsOFRLS3drNVd0RnRrSnhIQnFvS180SzdTcUpoWWsxa3E1LVhtVXp2cXVfTnFJeU5NSmhJakxTa19BancyZUxGYWF1R3ZpWVoxNWc0REhLZnRoMndVekl6MXB1SUZOVDVmcF92ZF9rY1JXWWVzUlFDYVhHdS1QUmlPOGxZZGI1eDhvY3RmNkc3VnpjNE4tRFBYcHdOamF4M3o4LTBueGtOYUhGQnVDQ0czS18yVmxhX3AyYjBGOXNLZEJ2YzNGZ25Ed2hWR2JHUlF3eWNRSGJXeDlXX0sxQWZmYnU4OXV3d3ZvYVlmQmh2OXdrdUlhOXlfUThJV0tLVEdsdGE5aXVKbW9YUy0tZE0zY19DV3JDTzNRQXI4TWRkMlBlOWFHeGllTjBSYXNvS2J0SWxiQXUtQ2s3V0o3VUhuaFJZWlN2R0lFSUR4bGRfTzM1bFpFdkZPdmFhbUpLMjBPYUNROWRjeWpUSGMyeHpveTVaZmZCM2JBZWlaaGJITFNHSEFIak9mb0NPZ1lGaTExY0NFUE90dGxiN25ISHdMODVXUS5YUVp5NklZZnJ1VTRsa3FxSjZoaDBn.OQUGAwAmQVDapzPokmI0au2e6QwQ2fnNFZAcQMjwz8_gH2YWdJnzxD7yk0R24v0ebQ738jBU3gdUYT8lvofwcC0qwnsqrbI6Q2ZryjoXFhCDQLIqv8mrEfllpKcMBLsUcsuL_J32m6vxQ4PQUa_ENnbaEWhDaNm0Gn8csIwfq_7kgrhaVrCRhLTO05aLlXiMulSySeOnWMDM6cBhQ3fEqJMcr2TjQxfltvjzSCIn0V3-s1t-fX4Zi_ZVSRshAsFpPVK39YDm3OVDccM5E5FBu5L3MEoLfdjQcnFYlrnHM0PvStR2HIiReMW66SuXTr753wndoL8FuyfXRUgSSQxk-A&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE1&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK) DNITHE000302000000000126  (#1)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU9USTRPVEEzTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS50eFZMVjNRTHEyaXRXckV3VnNDZmlOcWhmem5IVmFZcnZqR1JaeGdTTm0zQVdycEVrRlRxVXhHWnUycW1nWHhwNUZUV3NiRVF0ZnNEcXB1UlVQLWxqd2otS083WkplMzFMXzNLY0hQTExPSEJ3MGU2Y3U1R3dZTHFMYnRuaU5HUWx2TjRKQ1B1bFBGX2EtMlM0YmRhcFc0R21sUi0zcnhESkRRMHBURkkxT1hzQjNaYjlkQXhGcGNEWTA2d0syQ2FFczBteUZGV0ZPNGt2MHROSlcya25BaDZSZ29TNlY0UTJmdjFvMzEzUXZsSHlXaFB6WENHQmxkMXg3ZWpGS3ByZC1rUV9TNXg1R2I0WGVNRkxJVjl5N2plVE5fQ3RDZXlPdzJlaXg4NHRybEd5dzNXQUxON3EybExWOXhXejN5eXZFNnRhR0hqVjZjekZ1c01QeVdJOGcuWF9WY1RObjY0U1pVc0FiVC41S3hLWG5BU09oYnpxbHhFX0FTbVlkSEVGUnFMeXE2WF9tWi1zaEZaYXlRWjN5Xzl6dXRMOHhHbk1UcW45dU1OdjdmRldlUXkwdHIwYm5jRHlCSklzcWFBU1NQMmRwTi1nWE1NYjAtbzBpbkhKQlk4Ym1aTUFpbUtxWDgySTA0clR4Mkh2WWI1S2cxRjRDMnBna0xySlRncnpta0t5MHV0emxicUhqS1h1Vy12VDBZU1owTk00UFg0enZiR2NwMndlQWpBUTlNS01ld0s5UDdTWmRGcUhMOWRzUlNsNkF5cHMySU1XRDY1dFdWdmxjX3hvWjF3dHRyR1JTcTAxR1dVMGNwOEpxMEg4aUxoaEdvZXJKZjNFR1AxQTEzZzY5Z0IyVU16cDRwS191UWoxYmtFc0N2NVFZM3M2aTljbk04TG12VWlOZ3hoMzZ0UDVfdTkycWlzUHlkanBtdDQ5TDJBQklxUTlvSUtLMTFWbXJJRHV3VEFQME45U3RBODF1bkZETnk1c1N6UEE5TzktMGd5VmJoaUdsOE5mbm51SnNIR1NRRnl0SXk1T0ROanF6N0JUOV9mc2tsTld2LWVsUXVtTERWeWgzRDhHYmJFbUxIODlMdkhkU3RsMFBoTHlnZzJDcGJsSHlRYkM1RzYxSUNwSkhybWxWcFFJM3RjUFFiakNJNlBVSnItaVpmQkRfS28yQTVXUHFhR0FQYlhHNHdndnY2MWRlY1ZCUVlLUURfV1hVV1lSYmEtcFFYY2FtLU93bW9GTnlKWXFCMk1RVGxzN3ZOajctNjUzdmFpTm5qNVJLb013eEltaV9rVl9jWEM0YlB6NjRGQVh5UlB4ellPd3RkcFVPaTEzNGdGUFgyeFpRa1F1N19UYmVXWjZUWm5DVGNaUG1RRDhCNkY4VEhMNGJQZ1lPcnowTVhlX2lOczJzQTdyaVFFUXJjUWpWZ0tWV3hjSlhGUWhsdmNLb3hVQ2JMT3VSTndwLWhUazdEOGpodzlubm1lYkpRbXEzSWVOMEIyRWFXdkJwYUNMUVU0RGRSbkRSOVYyLWh0ZHBZWFZkamlOTkNsOHJYNmFLLTBXWjI2aWJ0UEtGVzhjQlVfXy1Kb0NuYXRDZWR6Y1pLMTQ0QnctaXo4aFFkY2lKUVRXUmMxOGx1QURGLW9meTNyNUUyMm9rTGxqcUVSeVpSYTlZeXpON2lRVWdkb2tLZFctTS1TMkpobDVaenp3TTRrZVhqQUoxWXllUnBOMUhFYldlbzB4anFzQndJYTBwN2ZBOTAwczRvVi1IQnhzWHVPNmFzTWpRazY3VndfZ0xrQUtQSGNLVDI3NnlUdlpsSkhUOU9SRm4xZFNsclhLdDRxcVM1X1lnZW1BZEpRaU5VbklRdldESnZBdXMyUHhycTJkQk81QVdMZEdRMWN0WmYtSjM3cE9TWWtwV2tFRWNDZU5xZVBnUFVQeG8xVFRpcW0wc0JlTTRoR0JVSGxQNmtuYjcwdEJDdFl4TVJmVW1CUWhZNmhhaG1iN3lmcTV5bVZjWnVKT29hOFh1NnF6V2VadGZiNHpCaHpoSm5ZMER5bmhyQzNTQjIyY0hGb0NoZlYzUEhqYTB2dHNpUkVjSVU3R01MRklzUnR1SVdmd0RjMmd0ZlBjUWp0UjgzOUJkRTc5eVpWTWVPdzNWbkpoWndVaU40RzNuYTF1VVdiWUFtWm1pNEdhZVRNQ0xJUTVtcTBxaG5xbmxzZmgzLV93SmpDSXRSbkdCcV8wenJKd1ktcFBJYmxERkd5MEo0T0dNbm1TcWU1TEZsbVZJMzBuM1BybWJURndfQlNncjR2bU1pZXVJWjNobThUZV9LV1NkblZfN1dPWTRRYkFMYjdoRXc3ZHhLYjI5MmpUSTRRcURDOUNpSndpU3JPd3hvSHJUSmUybkI3WXotUTQ3XzB1WXBmLXc0NVVOTm5IeHZmNjM3cUpCNzdtejBjTUhZTDVaUzBzR2hjeW5hREZ5MjRyWHN4Q0hrY3NGZU9sajVBOGVEM01rOUtnbS1JVnBEY3lhWUhvWnFZZlctdm1QWjJoWktFMGVid2NsdzVidENGQXpDb0QwQjFQd3JDN1Q0SjVJZldURHFvVjJ1MU5hbkFrQ0ZNeEp5R1IyOHdwQ3hkdUVNbk91TEhibFNsSEtGSGdIUldyeGMtTDFEVTgxUF9VM0ZWdWdaZ0NPWE8zM1Zac0oxQnc0b3htQmtfa1hqa1lnNTNMSDBxaFctb1Q3N3lNNFFGdVpRVjJwR0JTU0hCSlY2b25JMU4tcWUwZWFQaTI1UnNaaUYxdjd2aVBaYVV4UEg2aXpoOXd0UFJOdFJ0RlBzZklidjRLaVRDNWswNUtQdFVGbHFpbk9tdHBid3UwSHZLUWMwdk5ZUlFuZXVXaDBrdTV2ak1QcHVfQXdLMlFQd3FGbnN4d3B0b1ItYWJuRkpFVmF5Y2F1S1N0RlhJa0FrZ0Y0VUE4Mk4zVkZ4djc3TGdKaWxFZUxsRVdvNEtZQ1BhZ2wzeDRRZ0lwUml5Nm94a2gxeU1jSHdVWUhyNDRfTGFIWEE0WVN0N29NY2M2Y0FSOVBNVEhwaWVHSFI1LThaOGlON3VQdnJfUHdfQTVpUFhqbFg0Zkw3MWNVcmpSQWFxUXIzejB0VDZpTjVjN0YxN2RKTFpOMkJmLVpjczN0LU1zRGVCSFdObUJPVUpuNWNlUjRuRUNEZmJ0SGRMWWtSS2EzNFg2dlNRMHIxZDNZc0F5MmdKWGxLcm1MS0d4Tmw1MU9Oek02YjV3MHhKbnNBOExNaG5TRWdxdHcweFdmR0M3cmNCdFVtdF9jaU5KRGROcm10LUpsSXpVTFVkcEFCWGZ2TVpJczlPR1FQOC12YlVDWDRxX3Z2aXNnWmgtcks5anI3Z0JNMERlSzBoTFZHTnNaanJ2OGI3cTZHV2FOX245cjQxM29jeFpabG8yYXliUlZ6Wks3emV4OUxpY3BtTFp5Y1ZVckRtaUdEMEhlWnRQQ2tLM1hhdlhuTnNmWUg0cjNuZUdGTDV2MjMyaTVFLWJ4LVlici1ma2JrSS16VVJRenkwVkhleTdiaUhEMzJNMkxkMkIyR1FFczdiNXV6SHd4S1czN3U4cG1NU0ZhcEdwZTB5eUlTQ3BiX0ZyMldlQWJEbDNjMkJxeExtMl9GSC0zVTNiY3VCNGkzSjI2QkdON29URDQ0MXU4ZWhkMlU2N1pPSV9lenNaSUVWTVI0anptR0RFYXFzeFZKZU55ZlM0T3lMS044U09ZQlBnOG1FdThiSF85UHJKMkx1bGFPTFZ4V3F6T2RQTFhPMXhjUEM3UUVra3hkTDh6c3hTb0UzV3BrWE1zWTVvRzhUUGpqVEo5VkxidUFOcmlySjNHSnJncG81OWpjTTZzQ2dJVWtRYkpDQVk1Sk5JaUtCaHR6US1qZEF6cXNaYVJscllKaVFjYTFXdmJXWEJZRW9PVHVuaFJncDdwMXZCRlZLYlhCTk9JRzRpUU8tQ3pobzdRQk5oT2pxZGJfT09GV2NnT3BCYlJtdUFMNEc4OXN2Y19zU1FZUVNZbVd5RjBlSDFBbXQ4Rk1CZ3IxS2x4MDVGQ0w0M1ZlUHhBaUh0d1N3bFFSQ2tVdE0zYXhjWTFqWDJnN0V4c3N3ZmhKdGFYNExQbHlCY0I1OGtTRGN2X1AxcElWOFpUc2NVYXZieVVMR2NmNTFtQVdMM1UzVEhMY2pCQ1JNZ1V2bmxzUkZyV1NRaXFKOFFQOUtkeE5acFM0NEw4N2dDS0tPSDVlVjgtSnVpLUdybUZOOUV1cDE4VjNjc1BDcHNKSHI5UllWR2NsVDNOYU8wc0NoUjhJZVBHODQtUS4zRU1aWGZQcTgtQ0s2andjeVFNSGlR.vEYEa_liINproo-kfLftV-1xUDP93CFTAsdbfD40bL8-cV9PLlRN9hAwS_cXZm1DaVakXNYePUt8_FZtFKsJHnv4VCEO6Xd9C5HnHdahRiO1xNd_LPVezw7nUNFHQjSkx4cdaJunZ_byhT-NCp1ZbY0ueKdBx37T0mS6aha4kcr1VZUUVpbUpqf2FNblzOBZQkpGeJlJnNmiQ8gcQEbTFcACitpsEPmK_AOfXxLg2i2Yr11YwimOMKwp3fGNYkrt6yyFgO5IseFki00mlUEQDgQObJDrnHkFakpZZR_dDeVAVXoqipoNHI6lFGsf0jaJ0WSBl7jNukLriLrjbRWHBg&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE1&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000126/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK) DNITHE000302000000000126  (#2) &apos;MY BEST PHONE1 Looooong Name... MY BEST PHONE1 Looooong Name...&apos;" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU9USTRPVEEzTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS50eFZMVjNRTHEyaXRXckV3VnNDZmlOcWhmem5IVmFZcnZqR1JaeGdTTm0zQVdycEVrRlRxVXhHWnUycW1nWHhwNUZUV3NiRVF0ZnNEcXB1UlVQLWxqd2otS083WkplMzFMXzNLY0hQTExPSEJ3MGU2Y3U1R3dZTHFMYnRuaU5HUWx2TjRKQ1B1bFBGX2EtMlM0YmRhcFc0R21sUi0zcnhESkRRMHBURkkxT1hzQjNaYjlkQXhGcGNEWTA2d0syQ2FFczBteUZGV0ZPNGt2MHROSlcya25BaDZSZ29TNlY0UTJmdjFvMzEzUXZsSHlXaFB6WENHQmxkMXg3ZWpGS3ByZC1rUV9TNXg1R2I0WGVNRkxJVjl5N2plVE5fQ3RDZXlPdzJlaXg4NHRybEd5dzNXQUxON3EybExWOXhXejN5eXZFNnRhR0hqVjZjekZ1c01QeVdJOGcuWF9WY1RObjY0U1pVc0FiVC41S3hLWG5BU09oYnpxbHhFX0FTbVlkSEVGUnFMeXE2WF9tWi1zaEZaYXlRWjN5Xzl6dXRMOHhHbk1UcW45dU1OdjdmRldlUXkwdHIwYm5jRHlCSklzcWFBU1NQMmRwTi1nWE1NYjAtbzBpbkhKQlk4Ym1aTUFpbUtxWDgySTA0clR4Mkh2WWI1S2cxRjRDMnBna0xySlRncnpta0t5MHV0emxicUhqS1h1Vy12VDBZU1owTk00UFg0enZiR2NwMndlQWpBUTlNS01ld0s5UDdTWmRGcUhMOWRzUlNsNkF5cHMySU1XRDY1dFdWdmxjX3hvWjF3dHRyR1JTcTAxR1dVMGNwOEpxMEg4aUxoaEdvZXJKZjNFR1AxQTEzZzY5Z0IyVU16cDRwS191UWoxYmtFc0N2NVFZM3M2aTljbk04TG12VWlOZ3hoMzZ0UDVfdTkycWlzUHlkanBtdDQ5TDJBQklxUTlvSUtLMTFWbXJJRHV3VEFQME45U3RBODF1bkZETnk1c1N6UEE5TzktMGd5VmJoaUdsOE5mbm51SnNIR1NRRnl0SXk1T0ROanF6N0JUOV9mc2tsTld2LWVsUXVtTERWeWgzRDhHYmJFbUxIODlMdkhkU3RsMFBoTHlnZzJDcGJsSHlRYkM1RzYxSUNwSkhybWxWcFFJM3RjUFFiakNJNlBVSnItaVpmQkRfS28yQTVXUHFhR0FQYlhHNHdndnY2MWRlY1ZCUVlLUURfV1hVV1lSYmEtcFFYY2FtLU93bW9GTnlKWXFCMk1RVGxzN3ZOajctNjUzdmFpTm5qNVJLb013eEltaV9rVl9jWEM0YlB6NjRGQVh5UlB4ellPd3RkcFVPaTEzNGdGUFgyeFpRa1F1N19UYmVXWjZUWm5DVGNaUG1RRDhCNkY4VEhMNGJQZ1lPcnowTVhlX2lOczJzQTdyaVFFUXJjUWpWZ0tWV3hjSlhGUWhsdmNLb3hVQ2JMT3VSTndwLWhUazdEOGpodzlubm1lYkpRbXEzSWVOMEIyRWFXdkJwYUNMUVU0RGRSbkRSOVYyLWh0ZHBZWFZkamlOTkNsOHJYNmFLLTBXWjI2aWJ0UEtGVzhjQlVfXy1Kb0NuYXRDZWR6Y1pLMTQ0QnctaXo4aFFkY2lKUVRXUmMxOGx1QURGLW9meTNyNUUyMm9rTGxqcUVSeVpSYTlZeXpON2lRVWdkb2tLZFctTS1TMkpobDVaenp3TTRrZVhqQUoxWXllUnBOMUhFYldlbzB4anFzQndJYTBwN2ZBOTAwczRvVi1IQnhzWHVPNmFzTWpRazY3VndfZ0xrQUtQSGNLVDI3NnlUdlpsSkhUOU9SRm4xZFNsclhLdDRxcVM1X1lnZW1BZEpRaU5VbklRdldESnZBdXMyUHhycTJkQk81QVdMZEdRMWN0WmYtSjM3cE9TWWtwV2tFRWNDZU5xZVBnUFVQeG8xVFRpcW0wc0JlTTRoR0JVSGxQNmtuYjcwdEJDdFl4TVJmVW1CUWhZNmhhaG1iN3lmcTV5bVZjWnVKT29hOFh1NnF6V2VadGZiNHpCaHpoSm5ZMER5bmhyQzNTQjIyY0hGb0NoZlYzUEhqYTB2dHNpUkVjSVU3R01MRklzUnR1SVdmd0RjMmd0ZlBjUWp0UjgzOUJkRTc5eVpWTWVPdzNWbkpoWndVaU40RzNuYTF1VVdiWUFtWm1pNEdhZVRNQ0xJUTVtcTBxaG5xbmxzZmgzLV93SmpDSXRSbkdCcV8wenJKd1ktcFBJYmxERkd5MEo0T0dNbm1TcWU1TEZsbVZJMzBuM1BybWJURndfQlNncjR2bU1pZXVJWjNobThUZV9LV1NkblZfN1dPWTRRYkFMYjdoRXc3ZHhLYjI5MmpUSTRRcURDOUNpSndpU3JPd3hvSHJUSmUybkI3WXotUTQ3XzB1WXBmLXc0NVVOTm5IeHZmNjM3cUpCNzdtejBjTUhZTDVaUzBzR2hjeW5hREZ5MjRyWHN4Q0hrY3NGZU9sajVBOGVEM01rOUtnbS1JVnBEY3lhWUhvWnFZZlctdm1QWjJoWktFMGVid2NsdzVidENGQXpDb0QwQjFQd3JDN1Q0SjVJZldURHFvVjJ1MU5hbkFrQ0ZNeEp5R1IyOHdwQ3hkdUVNbk91TEhibFNsSEtGSGdIUldyeGMtTDFEVTgxUF9VM0ZWdWdaZ0NPWE8zM1Zac0oxQnc0b3htQmtfa1hqa1lnNTNMSDBxaFctb1Q3N3lNNFFGdVpRVjJwR0JTU0hCSlY2b25JMU4tcWUwZWFQaTI1UnNaaUYxdjd2aVBaYVV4UEg2aXpoOXd0UFJOdFJ0RlBzZklidjRLaVRDNWswNUtQdFVGbHFpbk9tdHBid3UwSHZLUWMwdk5ZUlFuZXVXaDBrdTV2ak1QcHVfQXdLMlFQd3FGbnN4d3B0b1ItYWJuRkpFVmF5Y2F1S1N0RlhJa0FrZ0Y0VUE4Mk4zVkZ4djc3TGdKaWxFZUxsRVdvNEtZQ1BhZ2wzeDRRZ0lwUml5Nm94a2gxeU1jSHdVWUhyNDRfTGFIWEE0WVN0N29NY2M2Y0FSOVBNVEhwaWVHSFI1LThaOGlON3VQdnJfUHdfQTVpUFhqbFg0Zkw3MWNVcmpSQWFxUXIzejB0VDZpTjVjN0YxN2RKTFpOMkJmLVpjczN0LU1zRGVCSFdObUJPVUpuNWNlUjRuRUNEZmJ0SGRMWWtSS2EzNFg2dlNRMHIxZDNZc0F5MmdKWGxLcm1MS0d4Tmw1MU9Oek02YjV3MHhKbnNBOExNaG5TRWdxdHcweFdmR0M3cmNCdFVtdF9jaU5KRGROcm10LUpsSXpVTFVkcEFCWGZ2TVpJczlPR1FQOC12YlVDWDRxX3Z2aXNnWmgtcks5anI3Z0JNMERlSzBoTFZHTnNaanJ2OGI3cTZHV2FOX245cjQxM29jeFpabG8yYXliUlZ6Wks3emV4OUxpY3BtTFp5Y1ZVckRtaUdEMEhlWnRQQ2tLM1hhdlhuTnNmWUg0cjNuZUdGTDV2MjMyaTVFLWJ4LVlici1ma2JrSS16VVJRenkwVkhleTdiaUhEMzJNMkxkMkIyR1FFczdiNXV6SHd4S1czN3U4cG1NU0ZhcEdwZTB5eUlTQ3BiX0ZyMldlQWJEbDNjMkJxeExtMl9GSC0zVTNiY3VCNGkzSjI2QkdON29URDQ0MXU4ZWhkMlU2N1pPSV9lenNaSUVWTVI0anptR0RFYXFzeFZKZU55ZlM0T3lMS044U09ZQlBnOG1FdThiSF85UHJKMkx1bGFPTFZ4V3F6T2RQTFhPMXhjUEM3UUVra3hkTDh6c3hTb0UzV3BrWE1zWTVvRzhUUGpqVEo5VkxidUFOcmlySjNHSnJncG81OWpjTTZzQ2dJVWtRYkpDQVk1Sk5JaUtCaHR6US1qZEF6cXNaYVJscllKaVFjYTFXdmJXWEJZRW9PVHVuaFJncDdwMXZCRlZLYlhCTk9JRzRpUU8tQ3pobzdRQk5oT2pxZGJfT09GV2NnT3BCYlJtdUFMNEc4OXN2Y19zU1FZUVNZbVd5RjBlSDFBbXQ4Rk1CZ3IxS2x4MDVGQ0w0M1ZlUHhBaUh0d1N3bFFSQ2tVdE0zYXhjWTFqWDJnN0V4c3N3ZmhKdGFYNExQbHlCY0I1OGtTRGN2X1AxcElWOFpUc2NVYXZieVVMR2NmNTFtQVdMM1UzVEhMY2pCQ1JNZ1V2bmxzUkZyV1NRaXFKOFFQOUtkeE5acFM0NEw4N2dDS0tPSDVlVjgtSnVpLUdybUZOOUV1cDE4VjNjc1BDcHNKSHI5UllWR2NsVDNOYU8wc0NoUjhJZVBHODQtUS4zRU1aWGZQcTgtQ0s2andjeVFNSGlR.vEYEa_liINproo-kfLftV-1xUDP93CFTAsdbfD40bL8-cV9PLlRN9hAwS_cXZm1DaVakXNYePUt8_FZtFKsJHnv4VCEO6Xd9C5HnHdahRiO1xNd_LPVezw7nUNFHQjSkx4cdaJunZ_byhT-NCp1ZbY0ueKdBx37T0mS6aha4kcr1VZUUVpbUpqf2FNblzOBZQkpGeJlJnNmiQ8gcQEbTFcACitpsEPmK_AOfXxLg2i2Yr11YwimOMKwp3fGNYkrt6yyFgO5IseFki00mlUEQDgQObJDrnHkFakpZZR_dDeVAVXoqipoNHI6lFGsf0jaJ0WSBl7jNukLriLrjbRWHBg&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;MY BEST PHONE1 Looooong Name... MY BEST PHONE1 Looooong Name...&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000126/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK) DNITHE000302000000000126  (#3) &apos;❤️Полюся❤️&apos;" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU9USTRPVEEzTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS50eFZMVjNRTHEyaXRXckV3VnNDZmlOcWhmem5IVmFZcnZqR1JaeGdTTm0zQVdycEVrRlRxVXhHWnUycW1nWHhwNUZUV3NiRVF0ZnNEcXB1UlVQLWxqd2otS083WkplMzFMXzNLY0hQTExPSEJ3MGU2Y3U1R3dZTHFMYnRuaU5HUWx2TjRKQ1B1bFBGX2EtMlM0YmRhcFc0R21sUi0zcnhESkRRMHBURkkxT1hzQjNaYjlkQXhGcGNEWTA2d0syQ2FFczBteUZGV0ZPNGt2MHROSlcya25BaDZSZ29TNlY0UTJmdjFvMzEzUXZsSHlXaFB6WENHQmxkMXg3ZWpGS3ByZC1rUV9TNXg1R2I0WGVNRkxJVjl5N2plVE5fQ3RDZXlPdzJlaXg4NHRybEd5dzNXQUxON3EybExWOXhXejN5eXZFNnRhR0hqVjZjekZ1c01QeVdJOGcuWF9WY1RObjY0U1pVc0FiVC41S3hLWG5BU09oYnpxbHhFX0FTbVlkSEVGUnFMeXE2WF9tWi1zaEZaYXlRWjN5Xzl6dXRMOHhHbk1UcW45dU1OdjdmRldlUXkwdHIwYm5jRHlCSklzcWFBU1NQMmRwTi1nWE1NYjAtbzBpbkhKQlk4Ym1aTUFpbUtxWDgySTA0clR4Mkh2WWI1S2cxRjRDMnBna0xySlRncnpta0t5MHV0emxicUhqS1h1Vy12VDBZU1owTk00UFg0enZiR2NwMndlQWpBUTlNS01ld0s5UDdTWmRGcUhMOWRzUlNsNkF5cHMySU1XRDY1dFdWdmxjX3hvWjF3dHRyR1JTcTAxR1dVMGNwOEpxMEg4aUxoaEdvZXJKZjNFR1AxQTEzZzY5Z0IyVU16cDRwS191UWoxYmtFc0N2NVFZM3M2aTljbk04TG12VWlOZ3hoMzZ0UDVfdTkycWlzUHlkanBtdDQ5TDJBQklxUTlvSUtLMTFWbXJJRHV3VEFQME45U3RBODF1bkZETnk1c1N6UEE5TzktMGd5VmJoaUdsOE5mbm51SnNIR1NRRnl0SXk1T0ROanF6N0JUOV9mc2tsTld2LWVsUXVtTERWeWgzRDhHYmJFbUxIODlMdkhkU3RsMFBoTHlnZzJDcGJsSHlRYkM1RzYxSUNwSkhybWxWcFFJM3RjUFFiakNJNlBVSnItaVpmQkRfS28yQTVXUHFhR0FQYlhHNHdndnY2MWRlY1ZCUVlLUURfV1hVV1lSYmEtcFFYY2FtLU93bW9GTnlKWXFCMk1RVGxzN3ZOajctNjUzdmFpTm5qNVJLb013eEltaV9rVl9jWEM0YlB6NjRGQVh5UlB4ellPd3RkcFVPaTEzNGdGUFgyeFpRa1F1N19UYmVXWjZUWm5DVGNaUG1RRDhCNkY4VEhMNGJQZ1lPcnowTVhlX2lOczJzQTdyaVFFUXJjUWpWZ0tWV3hjSlhGUWhsdmNLb3hVQ2JMT3VSTndwLWhUazdEOGpodzlubm1lYkpRbXEzSWVOMEIyRWFXdkJwYUNMUVU0RGRSbkRSOVYyLWh0ZHBZWFZkamlOTkNsOHJYNmFLLTBXWjI2aWJ0UEtGVzhjQlVfXy1Kb0NuYXRDZWR6Y1pLMTQ0QnctaXo4aFFkY2lKUVRXUmMxOGx1QURGLW9meTNyNUUyMm9rTGxqcUVSeVpSYTlZeXpON2lRVWdkb2tLZFctTS1TMkpobDVaenp3TTRrZVhqQUoxWXllUnBOMUhFYldlbzB4anFzQndJYTBwN2ZBOTAwczRvVi1IQnhzWHVPNmFzTWpRazY3VndfZ0xrQUtQSGNLVDI3NnlUdlpsSkhUOU9SRm4xZFNsclhLdDRxcVM1X1lnZW1BZEpRaU5VbklRdldESnZBdXMyUHhycTJkQk81QVdMZEdRMWN0WmYtSjM3cE9TWWtwV2tFRWNDZU5xZVBnUFVQeG8xVFRpcW0wc0JlTTRoR0JVSGxQNmtuYjcwdEJDdFl4TVJmVW1CUWhZNmhhaG1iN3lmcTV5bVZjWnVKT29hOFh1NnF6V2VadGZiNHpCaHpoSm5ZMER5bmhyQzNTQjIyY0hGb0NoZlYzUEhqYTB2dHNpUkVjSVU3R01MRklzUnR1SVdmd0RjMmd0ZlBjUWp0UjgzOUJkRTc5eVpWTWVPdzNWbkpoWndVaU40RzNuYTF1VVdiWUFtWm1pNEdhZVRNQ0xJUTVtcTBxaG5xbmxzZmgzLV93SmpDSXRSbkdCcV8wenJKd1ktcFBJYmxERkd5MEo0T0dNbm1TcWU1TEZsbVZJMzBuM1BybWJURndfQlNncjR2bU1pZXVJWjNobThUZV9LV1NkblZfN1dPWTRRYkFMYjdoRXc3ZHhLYjI5MmpUSTRRcURDOUNpSndpU3JPd3hvSHJUSmUybkI3WXotUTQ3XzB1WXBmLXc0NVVOTm5IeHZmNjM3cUpCNzdtejBjTUhZTDVaUzBzR2hjeW5hREZ5MjRyWHN4Q0hrY3NGZU9sajVBOGVEM01rOUtnbS1JVnBEY3lhWUhvWnFZZlctdm1QWjJoWktFMGVid2NsdzVidENGQXpDb0QwQjFQd3JDN1Q0SjVJZldURHFvVjJ1MU5hbkFrQ0ZNeEp5R1IyOHdwQ3hkdUVNbk91TEhibFNsSEtGSGdIUldyeGMtTDFEVTgxUF9VM0ZWdWdaZ0NPWE8zM1Zac0oxQnc0b3htQmtfa1hqa1lnNTNMSDBxaFctb1Q3N3lNNFFGdVpRVjJwR0JTU0hCSlY2b25JMU4tcWUwZWFQaTI1UnNaaUYxdjd2aVBaYVV4UEg2aXpoOXd0UFJOdFJ0RlBzZklidjRLaVRDNWswNUtQdFVGbHFpbk9tdHBid3UwSHZLUWMwdk5ZUlFuZXVXaDBrdTV2ak1QcHVfQXdLMlFQd3FGbnN4d3B0b1ItYWJuRkpFVmF5Y2F1S1N0RlhJa0FrZ0Y0VUE4Mk4zVkZ4djc3TGdKaWxFZUxsRVdvNEtZQ1BhZ2wzeDRRZ0lwUml5Nm94a2gxeU1jSHdVWUhyNDRfTGFIWEE0WVN0N29NY2M2Y0FSOVBNVEhwaWVHSFI1LThaOGlON3VQdnJfUHdfQTVpUFhqbFg0Zkw3MWNVcmpSQWFxUXIzejB0VDZpTjVjN0YxN2RKTFpOMkJmLVpjczN0LU1zRGVCSFdObUJPVUpuNWNlUjRuRUNEZmJ0SGRMWWtSS2EzNFg2dlNRMHIxZDNZc0F5MmdKWGxLcm1MS0d4Tmw1MU9Oek02YjV3MHhKbnNBOExNaG5TRWdxdHcweFdmR0M3cmNCdFVtdF9jaU5KRGROcm10LUpsSXpVTFVkcEFCWGZ2TVpJczlPR1FQOC12YlVDWDRxX3Z2aXNnWmgtcks5anI3Z0JNMERlSzBoTFZHTnNaanJ2OGI3cTZHV2FOX245cjQxM29jeFpabG8yYXliUlZ6Wks3emV4OUxpY3BtTFp5Y1ZVckRtaUdEMEhlWnRQQ2tLM1hhdlhuTnNmWUg0cjNuZUdGTDV2MjMyaTVFLWJ4LVlici1ma2JrSS16VVJRenkwVkhleTdiaUhEMzJNMkxkMkIyR1FFczdiNXV6SHd4S1czN3U4cG1NU0ZhcEdwZTB5eUlTQ3BiX0ZyMldlQWJEbDNjMkJxeExtMl9GSC0zVTNiY3VCNGkzSjI2QkdON29URDQ0MXU4ZWhkMlU2N1pPSV9lenNaSUVWTVI0anptR0RFYXFzeFZKZU55ZlM0T3lMS044U09ZQlBnOG1FdThiSF85UHJKMkx1bGFPTFZ4V3F6T2RQTFhPMXhjUEM3UUVra3hkTDh6c3hTb0UzV3BrWE1zWTVvRzhUUGpqVEo5VkxidUFOcmlySjNHSnJncG81OWpjTTZzQ2dJVWtRYkpDQVk1Sk5JaUtCaHR6US1qZEF6cXNaYVJscllKaVFjYTFXdmJXWEJZRW9PVHVuaFJncDdwMXZCRlZLYlhCTk9JRzRpUU8tQ3pobzdRQk5oT2pxZGJfT09GV2NnT3BCYlJtdUFMNEc4OXN2Y19zU1FZUVNZbVd5RjBlSDFBbXQ4Rk1CZ3IxS2x4MDVGQ0w0M1ZlUHhBaUh0d1N3bFFSQ2tVdE0zYXhjWTFqWDJnN0V4c3N3ZmhKdGFYNExQbHlCY0I1OGtTRGN2X1AxcElWOFpUc2NVYXZieVVMR2NmNTFtQVdMM1UzVEhMY2pCQ1JNZ1V2bmxzUkZyV1NRaXFKOFFQOUtkeE5acFM0NEw4N2dDS0tPSDVlVjgtSnVpLUdybUZOOUV1cDE4VjNjc1BDcHNKSHI5UllWR2NsVDNOYU8wc0NoUjhJZVBHODQtUS4zRU1aWGZQcTgtQ0s2andjeVFNSGlR.vEYEa_liINproo-kfLftV-1xUDP93CFTAsdbfD40bL8-cV9PLlRN9hAwS_cXZm1DaVakXNYePUt8_FZtFKsJHnv4VCEO6Xd9C5HnHdahRiO1xNd_LPVezw7nUNFHQjSkx4cdaJunZ_byhT-NCp1ZbY0ueKdBx37T0mS6aha4kcr1VZUUVpbUpqf2FNblzOBZQkpGeJlJnNmiQ8gcQEbTFcACitpsEPmK_AOfXxLg2i2Yr11YwimOMKwp3fGNYkrt6yyFgO5IseFki00mlUEQDgQObJDrnHkFakpZZR_dDeVAVXoqipoNHI6lFGsf0jaJ0WSBl7jNukLriLrjbRWHBg&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;4p2k77iP0J_QvtC70Y7RgdGP4p2k77iP&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000126/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK) DNITHE000302000000000126  (#4) &apos;DEVICE NAME 16 TEST&apos;" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU9USTRPVEEzTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS50eFZMVjNRTHEyaXRXckV3VnNDZmlOcWhmem5IVmFZcnZqR1JaeGdTTm0zQVdycEVrRlRxVXhHWnUycW1nWHhwNUZUV3NiRVF0ZnNEcXB1UlVQLWxqd2otS083WkplMzFMXzNLY0hQTExPSEJ3MGU2Y3U1R3dZTHFMYnRuaU5HUWx2TjRKQ1B1bFBGX2EtMlM0YmRhcFc0R21sUi0zcnhESkRRMHBURkkxT1hzQjNaYjlkQXhGcGNEWTA2d0syQ2FFczBteUZGV0ZPNGt2MHROSlcya25BaDZSZ29TNlY0UTJmdjFvMzEzUXZsSHlXaFB6WENHQmxkMXg3ZWpGS3ByZC1rUV9TNXg1R2I0WGVNRkxJVjl5N2plVE5fQ3RDZXlPdzJlaXg4NHRybEd5dzNXQUxON3EybExWOXhXejN5eXZFNnRhR0hqVjZjekZ1c01QeVdJOGcuWF9WY1RObjY0U1pVc0FiVC41S3hLWG5BU09oYnpxbHhFX0FTbVlkSEVGUnFMeXE2WF9tWi1zaEZaYXlRWjN5Xzl6dXRMOHhHbk1UcW45dU1OdjdmRldlUXkwdHIwYm5jRHlCSklzcWFBU1NQMmRwTi1nWE1NYjAtbzBpbkhKQlk4Ym1aTUFpbUtxWDgySTA0clR4Mkh2WWI1S2cxRjRDMnBna0xySlRncnpta0t5MHV0emxicUhqS1h1Vy12VDBZU1owTk00UFg0enZiR2NwMndlQWpBUTlNS01ld0s5UDdTWmRGcUhMOWRzUlNsNkF5cHMySU1XRDY1dFdWdmxjX3hvWjF3dHRyR1JTcTAxR1dVMGNwOEpxMEg4aUxoaEdvZXJKZjNFR1AxQTEzZzY5Z0IyVU16cDRwS191UWoxYmtFc0N2NVFZM3M2aTljbk04TG12VWlOZ3hoMzZ0UDVfdTkycWlzUHlkanBtdDQ5TDJBQklxUTlvSUtLMTFWbXJJRHV3VEFQME45U3RBODF1bkZETnk1c1N6UEE5TzktMGd5VmJoaUdsOE5mbm51SnNIR1NRRnl0SXk1T0ROanF6N0JUOV9mc2tsTld2LWVsUXVtTERWeWgzRDhHYmJFbUxIODlMdkhkU3RsMFBoTHlnZzJDcGJsSHlRYkM1RzYxSUNwSkhybWxWcFFJM3RjUFFiakNJNlBVSnItaVpmQkRfS28yQTVXUHFhR0FQYlhHNHdndnY2MWRlY1ZCUVlLUURfV1hVV1lSYmEtcFFYY2FtLU93bW9GTnlKWXFCMk1RVGxzN3ZOajctNjUzdmFpTm5qNVJLb013eEltaV9rVl9jWEM0YlB6NjRGQVh5UlB4ellPd3RkcFVPaTEzNGdGUFgyeFpRa1F1N19UYmVXWjZUWm5DVGNaUG1RRDhCNkY4VEhMNGJQZ1lPcnowTVhlX2lOczJzQTdyaVFFUXJjUWpWZ0tWV3hjSlhGUWhsdmNLb3hVQ2JMT3VSTndwLWhUazdEOGpodzlubm1lYkpRbXEzSWVOMEIyRWFXdkJwYUNMUVU0RGRSbkRSOVYyLWh0ZHBZWFZkamlOTkNsOHJYNmFLLTBXWjI2aWJ0UEtGVzhjQlVfXy1Kb0NuYXRDZWR6Y1pLMTQ0QnctaXo4aFFkY2lKUVRXUmMxOGx1QURGLW9meTNyNUUyMm9rTGxqcUVSeVpSYTlZeXpON2lRVWdkb2tLZFctTS1TMkpobDVaenp3TTRrZVhqQUoxWXllUnBOMUhFYldlbzB4anFzQndJYTBwN2ZBOTAwczRvVi1IQnhzWHVPNmFzTWpRazY3VndfZ0xrQUtQSGNLVDI3NnlUdlpsSkhUOU9SRm4xZFNsclhLdDRxcVM1X1lnZW1BZEpRaU5VbklRdldESnZBdXMyUHhycTJkQk81QVdMZEdRMWN0WmYtSjM3cE9TWWtwV2tFRWNDZU5xZVBnUFVQeG8xVFRpcW0wc0JlTTRoR0JVSGxQNmtuYjcwdEJDdFl4TVJmVW1CUWhZNmhhaG1iN3lmcTV5bVZjWnVKT29hOFh1NnF6V2VadGZiNHpCaHpoSm5ZMER5bmhyQzNTQjIyY0hGb0NoZlYzUEhqYTB2dHNpUkVjSVU3R01MRklzUnR1SVdmd0RjMmd0ZlBjUWp0UjgzOUJkRTc5eVpWTWVPdzNWbkpoWndVaU40RzNuYTF1VVdiWUFtWm1pNEdhZVRNQ0xJUTVtcTBxaG5xbmxzZmgzLV93SmpDSXRSbkdCcV8wenJKd1ktcFBJYmxERkd5MEo0T0dNbm1TcWU1TEZsbVZJMzBuM1BybWJURndfQlNncjR2bU1pZXVJWjNobThUZV9LV1NkblZfN1dPWTRRYkFMYjdoRXc3ZHhLYjI5MmpUSTRRcURDOUNpSndpU3JPd3hvSHJUSmUybkI3WXotUTQ3XzB1WXBmLXc0NVVOTm5IeHZmNjM3cUpCNzdtejBjTUhZTDVaUzBzR2hjeW5hREZ5MjRyWHN4Q0hrY3NGZU9sajVBOGVEM01rOUtnbS1JVnBEY3lhWUhvWnFZZlctdm1QWjJoWktFMGVid2NsdzVidENGQXpDb0QwQjFQd3JDN1Q0SjVJZldURHFvVjJ1MU5hbkFrQ0ZNeEp5R1IyOHdwQ3hkdUVNbk91TEhibFNsSEtGSGdIUldyeGMtTDFEVTgxUF9VM0ZWdWdaZ0NPWE8zM1Zac0oxQnc0b3htQmtfa1hqa1lnNTNMSDBxaFctb1Q3N3lNNFFGdVpRVjJwR0JTU0hCSlY2b25JMU4tcWUwZWFQaTI1UnNaaUYxdjd2aVBaYVV4UEg2aXpoOXd0UFJOdFJ0RlBzZklidjRLaVRDNWswNUtQdFVGbHFpbk9tdHBid3UwSHZLUWMwdk5ZUlFuZXVXaDBrdTV2ak1QcHVfQXdLMlFQd3FGbnN4d3B0b1ItYWJuRkpFVmF5Y2F1S1N0RlhJa0FrZ0Y0VUE4Mk4zVkZ4djc3TGdKaWxFZUxsRVdvNEtZQ1BhZ2wzeDRRZ0lwUml5Nm94a2gxeU1jSHdVWUhyNDRfTGFIWEE0WVN0N29NY2M2Y0FSOVBNVEhwaWVHSFI1LThaOGlON3VQdnJfUHdfQTVpUFhqbFg0Zkw3MWNVcmpSQWFxUXIzejB0VDZpTjVjN0YxN2RKTFpOMkJmLVpjczN0LU1zRGVCSFdObUJPVUpuNWNlUjRuRUNEZmJ0SGRMWWtSS2EzNFg2dlNRMHIxZDNZc0F5MmdKWGxLcm1MS0d4Tmw1MU9Oek02YjV3MHhKbnNBOExNaG5TRWdxdHcweFdmR0M3cmNCdFVtdF9jaU5KRGROcm10LUpsSXpVTFVkcEFCWGZ2TVpJczlPR1FQOC12YlVDWDRxX3Z2aXNnWmgtcks5anI3Z0JNMERlSzBoTFZHTnNaanJ2OGI3cTZHV2FOX245cjQxM29jeFpabG8yYXliUlZ6Wks3emV4OUxpY3BtTFp5Y1ZVckRtaUdEMEhlWnRQQ2tLM1hhdlhuTnNmWUg0cjNuZUdGTDV2MjMyaTVFLWJ4LVlici1ma2JrSS16VVJRenkwVkhleTdiaUhEMzJNMkxkMkIyR1FFczdiNXV6SHd4S1czN3U4cG1NU0ZhcEdwZTB5eUlTQ3BiX0ZyMldlQWJEbDNjMkJxeExtMl9GSC0zVTNiY3VCNGkzSjI2QkdON29URDQ0MXU4ZWhkMlU2N1pPSV9lenNaSUVWTVI0anptR0RFYXFzeFZKZU55ZlM0T3lMS044U09ZQlBnOG1FdThiSF85UHJKMkx1bGFPTFZ4V3F6T2RQTFhPMXhjUEM3UUVra3hkTDh6c3hTb0UzV3BrWE1zWTVvRzhUUGpqVEo5VkxidUFOcmlySjNHSnJncG81OWpjTTZzQ2dJVWtRYkpDQVk1Sk5JaUtCaHR6US1qZEF6cXNaYVJscllKaVFjYTFXdmJXWEJZRW9PVHVuaFJncDdwMXZCRlZLYlhCTk9JRzRpUU8tQ3pobzdRQk5oT2pxZGJfT09GV2NnT3BCYlJtdUFMNEc4OXN2Y19zU1FZUVNZbVd5RjBlSDFBbXQ4Rk1CZ3IxS2x4MDVGQ0w0M1ZlUHhBaUh0d1N3bFFSQ2tVdE0zYXhjWTFqWDJnN0V4c3N3ZmhKdGFYNExQbHlCY0I1OGtTRGN2X1AxcElWOFpUc2NVYXZieVVMR2NmNTFtQVdMM1UzVEhMY2pCQ1JNZ1V2bmxzUkZyV1NRaXFKOFFQOUtkeE5acFM0NEw4N2dDS0tPSDVlVjgtSnVpLUdybUZOOUV1cDE4VjNjc1BDcHNKSHI5UllWR2NsVDNOYU8wc0NoUjhJZVBHODQtUS4zRU1aWGZQcTgtQ0s2andjeVFNSGlR.vEYEa_liINproo-kfLftV-1xUDP93CFTAsdbfD40bL8-cV9PLlRN9hAwS_cXZm1DaVakXNYePUt8_FZtFKsJHnv4VCEO6Xd9C5HnHdahRiO1xNd_LPVezw7nUNFHQjSkx4cdaJunZ_byhT-NCp1ZbY0ueKdBx37T0mS6aha4kcr1VZUUVpbUpqf2FNblzOBZQkpGeJlJnNmiQ8gcQEbTFcACitpsEPmK_AOfXxLg2i2Yr11YwimOMKwp3fGNYkrt6yyFgO5IseFki00mlUEQDgQObJDrnHkFakpZZR_dDeVAVXoqipoNHI6lFGsf0jaJ0WSBl7jNukLriLrjbRWHBg&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;REVWSUNFIE5BTUUgMTYgVEVTVA&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000126/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK) DNITHE000302000000000126  (#5) &apos;samsung - SM-G975F&apos;" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZeU9USTRPVEEzTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVRYbEdZWFp2Y21sMFpWQnlhWFpoZEdWTFNVUWlmUS50eFZMVjNRTHEyaXRXckV3VnNDZmlOcWhmem5IVmFZcnZqR1JaeGdTTm0zQVdycEVrRlRxVXhHWnUycW1nWHhwNUZUV3NiRVF0ZnNEcXB1UlVQLWxqd2otS083WkplMzFMXzNLY0hQTExPSEJ3MGU2Y3U1R3dZTHFMYnRuaU5HUWx2TjRKQ1B1bFBGX2EtMlM0YmRhcFc0R21sUi0zcnhESkRRMHBURkkxT1hzQjNaYjlkQXhGcGNEWTA2d0syQ2FFczBteUZGV0ZPNGt2MHROSlcya25BaDZSZ29TNlY0UTJmdjFvMzEzUXZsSHlXaFB6WENHQmxkMXg3ZWpGS3ByZC1rUV9TNXg1R2I0WGVNRkxJVjl5N2plVE5fQ3RDZXlPdzJlaXg4NHRybEd5dzNXQUxON3EybExWOXhXejN5eXZFNnRhR0hqVjZjekZ1c01QeVdJOGcuWF9WY1RObjY0U1pVc0FiVC41S3hLWG5BU09oYnpxbHhFX0FTbVlkSEVGUnFMeXE2WF9tWi1zaEZaYXlRWjN5Xzl6dXRMOHhHbk1UcW45dU1OdjdmRldlUXkwdHIwYm5jRHlCSklzcWFBU1NQMmRwTi1nWE1NYjAtbzBpbkhKQlk4Ym1aTUFpbUtxWDgySTA0clR4Mkh2WWI1S2cxRjRDMnBna0xySlRncnpta0t5MHV0emxicUhqS1h1Vy12VDBZU1owTk00UFg0enZiR2NwMndlQWpBUTlNS01ld0s5UDdTWmRGcUhMOWRzUlNsNkF5cHMySU1XRDY1dFdWdmxjX3hvWjF3dHRyR1JTcTAxR1dVMGNwOEpxMEg4aUxoaEdvZXJKZjNFR1AxQTEzZzY5Z0IyVU16cDRwS191UWoxYmtFc0N2NVFZM3M2aTljbk04TG12VWlOZ3hoMzZ0UDVfdTkycWlzUHlkanBtdDQ5TDJBQklxUTlvSUtLMTFWbXJJRHV3VEFQME45U3RBODF1bkZETnk1c1N6UEE5TzktMGd5VmJoaUdsOE5mbm51SnNIR1NRRnl0SXk1T0ROanF6N0JUOV9mc2tsTld2LWVsUXVtTERWeWgzRDhHYmJFbUxIODlMdkhkU3RsMFBoTHlnZzJDcGJsSHlRYkM1RzYxSUNwSkhybWxWcFFJM3RjUFFiakNJNlBVSnItaVpmQkRfS28yQTVXUHFhR0FQYlhHNHdndnY2MWRlY1ZCUVlLUURfV1hVV1lSYmEtcFFYY2FtLU93bW9GTnlKWXFCMk1RVGxzN3ZOajctNjUzdmFpTm5qNVJLb013eEltaV9rVl9jWEM0YlB6NjRGQVh5UlB4ellPd3RkcFVPaTEzNGdGUFgyeFpRa1F1N19UYmVXWjZUWm5DVGNaUG1RRDhCNkY4VEhMNGJQZ1lPcnowTVhlX2lOczJzQTdyaVFFUXJjUWpWZ0tWV3hjSlhGUWhsdmNLb3hVQ2JMT3VSTndwLWhUazdEOGpodzlubm1lYkpRbXEzSWVOMEIyRWFXdkJwYUNMUVU0RGRSbkRSOVYyLWh0ZHBZWFZkamlOTkNsOHJYNmFLLTBXWjI2aWJ0UEtGVzhjQlVfXy1Kb0NuYXRDZWR6Y1pLMTQ0QnctaXo4aFFkY2lKUVRXUmMxOGx1QURGLW9meTNyNUUyMm9rTGxqcUVSeVpSYTlZeXpON2lRVWdkb2tLZFctTS1TMkpobDVaenp3TTRrZVhqQUoxWXllUnBOMUhFYldlbzB4anFzQndJYTBwN2ZBOTAwczRvVi1IQnhzWHVPNmFzTWpRazY3VndfZ0xrQUtQSGNLVDI3NnlUdlpsSkhUOU9SRm4xZFNsclhLdDRxcVM1X1lnZW1BZEpRaU5VbklRdldESnZBdXMyUHhycTJkQk81QVdMZEdRMWN0WmYtSjM3cE9TWWtwV2tFRWNDZU5xZVBnUFVQeG8xVFRpcW0wc0JlTTRoR0JVSGxQNmtuYjcwdEJDdFl4TVJmVW1CUWhZNmhhaG1iN3lmcTV5bVZjWnVKT29hOFh1NnF6V2VadGZiNHpCaHpoSm5ZMER5bmhyQzNTQjIyY0hGb0NoZlYzUEhqYTB2dHNpUkVjSVU3R01MRklzUnR1SVdmd0RjMmd0ZlBjUWp0UjgzOUJkRTc5eVpWTWVPdzNWbkpoWndVaU40RzNuYTF1VVdiWUFtWm1pNEdhZVRNQ0xJUTVtcTBxaG5xbmxzZmgzLV93SmpDSXRSbkdCcV8wenJKd1ktcFBJYmxERkd5MEo0T0dNbm1TcWU1TEZsbVZJMzBuM1BybWJURndfQlNncjR2bU1pZXVJWjNobThUZV9LV1NkblZfN1dPWTRRYkFMYjdoRXc3ZHhLYjI5MmpUSTRRcURDOUNpSndpU3JPd3hvSHJUSmUybkI3WXotUTQ3XzB1WXBmLXc0NVVOTm5IeHZmNjM3cUpCNzdtejBjTUhZTDVaUzBzR2hjeW5hREZ5MjRyWHN4Q0hrY3NGZU9sajVBOGVEM01rOUtnbS1JVnBEY3lhWUhvWnFZZlctdm1QWjJoWktFMGVid2NsdzVidENGQXpDb0QwQjFQd3JDN1Q0SjVJZldURHFvVjJ1MU5hbkFrQ0ZNeEp5R1IyOHdwQ3hkdUVNbk91TEhibFNsSEtGSGdIUldyeGMtTDFEVTgxUF9VM0ZWdWdaZ0NPWE8zM1Zac0oxQnc0b3htQmtfa1hqa1lnNTNMSDBxaFctb1Q3N3lNNFFGdVpRVjJwR0JTU0hCSlY2b25JMU4tcWUwZWFQaTI1UnNaaUYxdjd2aVBaYVV4UEg2aXpoOXd0UFJOdFJ0RlBzZklidjRLaVRDNWswNUtQdFVGbHFpbk9tdHBid3UwSHZLUWMwdk5ZUlFuZXVXaDBrdTV2ak1QcHVfQXdLMlFQd3FGbnN4d3B0b1ItYWJuRkpFVmF5Y2F1S1N0RlhJa0FrZ0Y0VUE4Mk4zVkZ4djc3TGdKaWxFZUxsRVdvNEtZQ1BhZ2wzeDRRZ0lwUml5Nm94a2gxeU1jSHdVWUhyNDRfTGFIWEE0WVN0N29NY2M2Y0FSOVBNVEhwaWVHSFI1LThaOGlON3VQdnJfUHdfQTVpUFhqbFg0Zkw3MWNVcmpSQWFxUXIzejB0VDZpTjVjN0YxN2RKTFpOMkJmLVpjczN0LU1zRGVCSFdObUJPVUpuNWNlUjRuRUNEZmJ0SGRMWWtSS2EzNFg2dlNRMHIxZDNZc0F5MmdKWGxLcm1MS0d4Tmw1MU9Oek02YjV3MHhKbnNBOExNaG5TRWdxdHcweFdmR0M3cmNCdFVtdF9jaU5KRGROcm10LUpsSXpVTFVkcEFCWGZ2TVpJczlPR1FQOC12YlVDWDRxX3Z2aXNnWmgtcks5anI3Z0JNMERlSzBoTFZHTnNaanJ2OGI3cTZHV2FOX245cjQxM29jeFpabG8yYXliUlZ6Wks3emV4OUxpY3BtTFp5Y1ZVckRtaUdEMEhlWnRQQ2tLM1hhdlhuTnNmWUg0cjNuZUdGTDV2MjMyaTVFLWJ4LVlici1ma2JrSS16VVJRenkwVkhleTdiaUhEMzJNMkxkMkIyR1FFczdiNXV6SHd4S1czN3U4cG1NU0ZhcEdwZTB5eUlTQ3BiX0ZyMldlQWJEbDNjMkJxeExtMl9GSC0zVTNiY3VCNGkzSjI2QkdON29URDQ0MXU4ZWhkMlU2N1pPSV9lenNaSUVWTVI0anptR0RFYXFzeFZKZU55ZlM0T3lMS044U09ZQlBnOG1FdThiSF85UHJKMkx1bGFPTFZ4V3F6T2RQTFhPMXhjUEM3UUVra3hkTDh6c3hTb0UzV3BrWE1zWTVvRzhUUGpqVEo5VkxidUFOcmlySjNHSnJncG81OWpjTTZzQ2dJVWtRYkpDQVk1Sk5JaUtCaHR6US1qZEF6cXNaYVJscllKaVFjYTFXdmJXWEJZRW9PVHVuaFJncDdwMXZCRlZLYlhCTk9JRzRpUU8tQ3pobzdRQk5oT2pxZGJfT09GV2NnT3BCYlJtdUFMNEc4OXN2Y19zU1FZUVNZbVd5RjBlSDFBbXQ4Rk1CZ3IxS2x4MDVGQ0w0M1ZlUHhBaUh0d1N3bFFSQ2tVdE0zYXhjWTFqWDJnN0V4c3N3ZmhKdGFYNExQbHlCY0I1OGtTRGN2X1AxcElWOFpUc2NVYXZieVVMR2NmNTFtQVdMM1UzVEhMY2pCQ1JNZ1V2bmxzUkZyV1NRaXFKOFFQOUtkeE5acFM0NEw4N2dDS0tPSDVlVjgtSnVpLUdybUZOOUV1cDE4VjNjc1BDcHNKSHI5UllWR2NsVDNOYU8wc0NoUjhJZVBHODQtUS4zRU1aWGZQcTgtQ0s2andjeVFNSGlR.vEYEa_liINproo-kfLftV-1xUDP93CFTAsdbfD40bL8-cV9PLlRN9hAwS_cXZm1DaVakXNYePUt8_FZtFKsJHnv4VCEO6Xd9C5HnHdahRiO1xNd_LPVezw7nUNFHQjSkx4cdaJunZ_byhT-NCp1ZbY0ueKdBx37T0mS6aha4kcr1VZUUVpbUpqf2FNblzOBZQkpGeJlJnNmiQ8gcQEbTFcACitpsEPmK_AOfXxLg2i2Yr11YwimOMKwp3fGNYkrt6yyFgO5IseFki00mlUEQDgQObJDrnHkFakpZZR_dDeVAVXoqipoNHI6lFGsf0jaJ0WSBl7jNukLriLrjbRWHBg&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;c2Ftc3VuZyAtIFNNLUc5NzVG&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000126/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK - the same)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149300000000003&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;24600F4632F98B4D4809FACEF2FF6B1312E33C57335B2BACC2237622E9AE81DA&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;24600F4632F98B4D&quot;,&#xd;
  &quot;panSource&quot;: &quot;ON_FILE&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5EUTNNelF3TkN3aVlXeG5Jam9pVWxOQkxVOUJSVk F0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LlYzZThfbVRhS3ZnVVZIRkJjSXdma2cwb2k0RjFNREc3bFg4RjRjaHNneVRtN3JfSG40aERsaGlmY2hpZk9Sd2gwcXRRaTd2b FBGY2N0LVdrdFMydktCakF6djl2TGhEZzB3dFV6YjkxV1VFYzc1WGp0ZXZpd2hIQ3hQeG5GN2ZSUUZBc1ZiQW55WUxfR0IzbXI5NzlrN3NRbm9LR2MwakdTbjZVcmw1NEY0NmV1b0tBa0Fnek5FenU2VDFvLWZpdzl6WTI5M2pRaFp3Tk9ZVXBlRXVPTFh6R2RybXpQejluMEd4SWI5 aGZNSEdRcHZtVXlxNWc2WUlRaEtaVnJjM21ZeDRVYkZhNEJucUF0aE41b0tEdERGaDJhUDJrbVJNc09hY05BQ213czlWYklhOFFoM2tuRGhhMTMtbzNLcXVCMklDY2x3Mi1OVmdSdnQ3NklBamw1US5TcUVKRzVpLTQ1enNSZFJVLk1lZ3gzWTktdFVsTERLdUNQUXlzYUdfVVlLYnV iWUY0NUtmdmE2S1Q2NkgzRVI4UHB5YUMxN204T3hCU01zNmNEMFpIOFJsRjZmLVZ0M2hmajNVTE9OTVFDbmtzb0I4M1J0STF5eWE2M25YTkhhRFJrS3NOTGpSVXBmcEVrNm9Bb3FYZHdzVnJoTzg3LVJtQlpnVTJQRjFkMGhwR0tGX1NXTVdXUGVRTXp3eU1mTmVmOF9kb1BZYklxaX hRcnMxS0pPVVNkVDlMLURyNHlvRzJjX1ZMMWpybEFDdVJENTZ4TllsXzFYdmxJV0MweDhiRnJXWTl5eGFsSTU1c2pFWkR1QlJzeHlrQV9ROGtPWnc3OXJUYmEyeERrR3p1RWI4YXdlVVItX1NueDB1LUpSR3FWNTRaX0hTWXBmRHdoYU9lNVQ2VFlNYlgwU05DbFh6cEhFcldrT01ke WdFRGlYQnV2aWhBN2U1d043SnRQVnNVV1ZGVXNGeFZGWVdQTFpFNFZQSmxsaG9zMDFTUUFEamU4WGJGZjBmTHZRNUp0NjFWNkM4TnU0bmx6YUpNNTlxdW5aX3FjUF92ejNKZGJrVEF6cGJsbVF6bmFNbmJjRGNwbGtRQmFqQnJWY3d2SnRYUVNtWEQ3WVZrZEU0YlpHUmlIck5FTkZO alk0akwwOXNWSmJjdV84MlREclFFUjBpMXFkcVlDNjBuQ1VlZG93ajR0TVR4ZGpWUnhDckhzUU9yNzdyYXMyOWJvSWtGdGpHb0ZtTk5TeXlZa3NndHFrQlNRYTB6dmlhRWhJWGwxTjBHTnNQRGw4RFRLSEE1UmJ2NVZXcnRaU0lqdzFCNVRySWdHTU15WFFFX1loQzdPY0dhbUhvSHV PVjAwRzdNa1NNeVN3QzhHTDc1YVlaczFnTEVFZVg0ZnpyOS02aTg4SWtSc2l6MFlZem9rUG1IY3VBeXdyTl9GYW5fTDdhN3dnRzU0WkV5M3RtRk9lSi1GV05jbG5uenVsMnN5WGVSWjQxcUZBRVRXTU8tNXhZWGxMdEtrbUJrRHBQdkEwLTJ3bmhxcDhZT2pLVkdMQnRBck1ianA3aG JYZlFzbHRwUjlyNm9lbXJBaDFRMDB5dThidjgzWFlpVlk0b0ZQVEZHUTllbVRDT1RKRjJWNFZqaVllMmc3ZWZxY1Fjb0ZJUU5WUW1ZYVI0TU1rSGUybHZHUW9fN3R2VEJOZTdRcnZXaWdaU1FaV3VRWWZVbmdDN0FyT3Y3ZXBYcDh1cmFRWUZjcWx5TVNxLVpiWU91blRoWlYwdE1RN XhrRlpaZEJjRjJTNXQwVWhMVkt4Z1kyVjQ5N1JzODk5MmpuNUlKOUdjVE9zZzJnc2FLWTBpMU9oU0ZWTlRYc2lEbUlQR09aVmVIZGRfcGNVWHBiTmtTOTQ0dDdLTUhWaVZZQ3Fpa1A0NHhIN0tyeXRMRTZNZjlEWmJJTzd1eV9LbW1abndmcW9nczlZUFBwUmJhQ21FOHRHRDFPbjRD Y25ZMEJDS2NxVEt4ZnExWXVqYjFscTdSa2UyYlVtZHhWOWJPaXdieVZWVzVyR1BnUmpGSkppWTlQRTVqWlhMUlNzdHJLYVowNmhQRmlNTDBIUkhNX01hVklJV0tjYkp4V3R2bmozV2JybmxrcF8xZlM4MllRSENiUHUwazZ0QklZR3FMTDY0dUZJemx3WXRLRGhzTkc3eWlTemg2Zjh IZ2F0a1c5V0xTM1RsbEJCZll5Ykw2WjJQVWV5VWhuSGhvM0loTHF1eGJ5RVMycUEuekhRTGsyVk96QU5paXVZOVhRaGotZw.vWECiHW1RexPeIlr2NV-5nXXQAoYmA8X-A7QIBGcmkPpG-mp_t4T3KhTVieTSQWIJd-IgOs8ca-ooHmeeGgcW_vllQqMoDnV22MVdb0ZGI7iyzM2EwV yzG6R7_6eQAau3mvm4QXF2eOmXP83QjG6TFLGuOVhFrxcN9W-IyiUYAmaaKnr32yfFmCQpRGIYXzrsoAGUcgre8fJfNAww3DqnefyfjXmAepLGLiJOCrmZUJ6hIvZ9AiKsz7cOJgmLJpxgvYpDsrkyt4ECPfFyqYuwwDHpdJvFl6aehnkPCBvdzTZE3kF8afZBXXKsPtQ-xE-g4Ocfi gllVPb2giKq_3-5g&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;04210463103D800162720226919394951D419A59FABBD747&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;fin&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceName&quot;: &quot;iPhone (Nelli)&quot;,&#xd;
    &quot;osType&quot;: &quot;&quot;,&#xd;
    &quot;osVersion&quot;: &quot;&quot;,&#xd;
    &quot;devi ceManufacturer&quot;: &quot;&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+61.43/+21.87&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;87.92.199.212&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;85&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id &quot;: &quot;520cdc91b59a45e3a65930b420a85fdc&quot;,&#xd;
    &quot;date&quot;: &quot;2019-04-05T13:59:13.666+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-05T14:08:13.000Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000000/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (? - the same)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalV5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLmdEZFBCWlVFQ3E5aE9fQWxZMUpmd2dqcEFSdE9BS0NVdnNlZzBGcV9wSVlXbHJLZnViNWFlMDMwc2VicW1zM0w1YXBlTl9MbkN1cUNCMXFjNktBY2JGQ0IteEljdWs5bmdtRExGbE9DMFJtdUxmUVlDTjdXM1ROTmxDQjdGczhyRHBoX1hWTE5HeFc5U0NHVWJ0UTlvaGcxaUdDR3FxclM5QTZLN0N3RXNwVkRJVS1veEplSkxJN29DYzdGMHJnTjR3MWZTVHhsMGdGOXctY3MxMzc1eWpodk1mY0hDLUc0ajlHMzVwRUI0ZlduRVR4amg4SFphMjFiUEFuUlZaRFBUUVpKc2RNVnZRS1h0Y2lQWGxZcWNFTFJrbGRWRTRMV2ItWkgwdmp0WEZKeUJBeDg3V3F6b1FheTVhUHlrM2Q4dnJhcEdJMGFabGlGTXdwdWNfdFA2dy5GUjhMazhUOC0wRlR0Sm01LnMxNnZPaXFGX3hnQkdwUHJJdjNZY0NfdXg1aTk1LW9mVk5yRzJldTAxNVNPUTlGbUlPNEhad3pZMlhaMmZOOGVlN1JraWZ1MXRHUjZZMGZmSTBOaS1SX0wtMjJ6Z0VlV01TRUpnTjhtUjQtMGJtS3ROckktUHZabnBsSFNWaWRLRkNVZndGclZDMm5wdUlzVkNGanhJeFpOZmMyOVJtSm41QnFtVFR1YlhaR3c5ZEhxaG4xTXVlTlExbHhTWmFjZzQ4RzE5REgzZlc0M2M2R1A4UEFSRjBqZTZNc0dDWG9pM1dQSm10R19qOWZkdWF5UU5fS0ROdFlXTlhVUVVVeHpheExTR0ZkWUZ4ellhTVpwWW95U0tLUFY1M09tT1YyaHVvRkFwcDlKZlAtZmU3NEhqVlI0UnBfRzFBcm5veEdiMldQUzFlaDcyUFlfSzVoQW5MNHNBRktfbGpRckg0a3B0UlQ0VDIzM2xqQnZhMEc0Sm41akRqdDhUTDF2R0NsOTJMWGgwR1BqVFNPN1V6UmVHUGVhREhWZEk4S1BTeVR0VHhLbXRCOWtfSnQtNC12emlUYTdlTF8ydDZTWk1TVG9CZV8wX1VoelBKb0RQNGEtMER4R1hac1M5UWhweVpVUHJ6N2ZsUklIUUlSYi1FaTNwZ1U4eEJ0THo2SFdVTXZiRTR4cGdLd3dWN0U4Skp2SmtOZHEwZFRJd1lUdzhtbG5ZYXhMRjNnRGo1ajF2Z2ZIZExaRG9yQV9ZMUtrd0twZ1IteGppWFpLT05xUFdJN1FMUEtvNHdDU3FKNWlTZmFXblVXQ0U1OElKOVBiOWVTeHNfVlFUdXVQRTEyYXRXc3NGdVBrMmd0ekNpMXZTREZWSlpoV0xXQ3c3UU5qY1M3T2RUcG9RZE1IUUxQWWRTV0lxNUdRX1ktTUtEVlMxbW13azU4ZkxpWWM5REtSY040enM5VWtZOEY4SUhRVmQzb3R4c0pmeG9qVmR3Y3cxSjgtTkVTUjFPT0ljMEZBd3FWLVEzcVNhYWgxd1kyb0hnY3F4WHRFU180WDROaEppd2xMWmh3SUExeTlKekx1aXJ2aVV0WHJ6TGJhRXd2STNydGlpU0JNSmxXWWNRMXk0Q1Q5VWh4M0R3cEk1blM4eTNESU1PQXJXU1YtU1FjQ2RMTDNxaWpwQTlvc1Z4TWxtWWNMSmYtRnlQcU5zbHo2RzlVeV82OFlJbXM0NTZZMkoxSkROOFV6SHp2bHVfUWlKek5halQtanhxVzFYLXdCQnpQU2J3RTdvaHNWWE4xV0REcVRlVkppRjFGbGVPZEhvWGRvbFFMTWJTblhaX1owdGl6N0pfZXRvRG83V2JlclJwU3ZNN0JLSUloRTJYUHRRMUx2TzhPT1QwQTNjNzFBcVdqcFpneks4c0NZUHpwOGZLWG56Snd4b3BOcjlxczM1NHc4Sko2UGdCU1g3LXppeS1nbDFPNTI4ZThLOUJCYU5mM19ITWMxdk9xQWRMZjhZVU1XM3N5dnpRODZ4OHVvdVIya3RRZlhoRlVUUnJ4LUhKM052WS1tSUxmUHNteTlBU0JmZXp4aVl4YVdHU1BwWDNfQUpEY2NVU0ZoaUdEdEFrZ3pKc1h0UlcxQUVqNndhbG5RcU83azdpRUNpdENaZ2FkLWFyZnVqNzZkNy1saHdRblFuM21nSmJDWWp1dXJkbmZRUEo5VUR4TXdYTmZzTWl1cVM0U1h4WnJ2QlNMZXhzajFncGFacm52b3NDMWQ5akxPR2lpbl9jMXFJX1U3N0VwOWNBMnE5MnNMem5ESDJ6VkJ0LWVuT3U4STlNSjNfRUhnR3JoTUpsOFRLS3drNVd0RnRrSnhIQnFvS180SzdTcUpoWWsxa3E1LVhtVXp2cXVfTnFJeU5NSmhJakxTa19BancyZUxGYWF1R3ZpWVoxNWc0REhLZnRoMndVekl6MXB1SUZOVDVmcF92ZF9rY1JXWWVzUlFDYVhHdS1QUmlPOGxZZGI1eDhvY3RmNkc3VnpjNE4tRFBYcHdOamF4M3o4LTBueGtOYUhGQnVDQ0czS18yVmxhX3AyYjBGOXNLZEJ2YzNGZ25Ed2hWR2JHUlF3eWNRSGJXeDlXX0sxQWZmYnU4OXV3d3ZvYVlmQmh2OXdrdUlhOXlfUThJV0tLVEdsdGE5aXVKbW9YUy0tZE0zY19DV3JDTzNRQXI4TWRkMlBlOWFHeGllTjBSYXNvS2J0SWxiQXUtQ2s3V0o3VUhuaFJZWlN2R0lFSUR4bGRfTzM1bFpFdkZPdmFhbUpLMjBPYUNROWRjeWpUSGMyeHpveTVaZmZCM2JBZWlaaGJITFNHSEFIak9mb0NPZ1lGaTExY0NFUE90dGxiN25ISHdMODVXUS5YUVp5NklZZnJ1VTRsa3FxSjZoaDBn.OQUGAwAmQVDapzPokmI0au2e6QwQ2fnNFZAcQMjwz8_gH2YWdJnzxD7yk0R24v0ebQ738jBU3gdUYT8lvofwcC0qwnsqrbI6Q2ZryjoXFhCDQLIqv8mrEfllpKcMBLsUcsuL_J32m6vxQ4PQUa_ENnbaEWhDaNm0Gn8csIwfq_7kgrhaVrCRhLTO05aLlXiMulSySeOnWMDM6cBhQ3fEqJMcr2TjQxfltvjzSCIn0V3-s1t-fX4Zi_ZVSRshAsFpPVK39YDm3OVDccM5E5FBu5L3MEoLfdjQcnFYlrnHM0PvStR2HIiReMW66SuXTr753wndoL8FuyfXRUgSSQxk-A&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;samsung - SM-J500FN&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000302000000000000/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK - Base64)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalV5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLmdEZFBCWlVFQ3E5aE9fQWxZMUpmd2dqcEFSdE9BS0NVdnNlZzBGcV9wSVlXbHJLZnViNWFlMDMwc2VicW1zM0w1YXBlTl9MbkN1cUNCMXFjNktBY2JGQ0IteEljdWs5bmdtRExGbE9DMFJtdUxmUVlDTjdXM1ROTmxDQjdGczhyRHBoX1hWTE5HeFc5U0NHVWJ0UTlvaGcxaUdDR3FxclM5QTZLN0N3RXNwVkRJVS1veEplSkxJN29DYzdGMHJnTjR3MWZTVHhsMGdGOXctY3MxMzc1eWpodk1mY0hDLUc0ajlHMzVwRUI0ZlduRVR4amg4SFphMjFiUEFuUlZaRFBUUVpKc2RNVnZRS1h0Y2lQWGxZcWNFTFJrbGRWRTRMV2ItWkgwdmp0WEZKeUJBeDg3V3F6b1FheTVhUHlrM2Q4dnJhcEdJMGFabGlGTXdwdWNfdFA2dy5GUjhMazhUOC0wRlR0Sm01LnMxNnZPaXFGX3hnQkdwUHJJdjNZY0NfdXg1aTk1LW9mVk5yRzJldTAxNVNPUTlGbUlPNEhad3pZMlhaMmZOOGVlN1JraWZ1MXRHUjZZMGZmSTBOaS1SX0wtMjJ6Z0VlV01TRUpnTjhtUjQtMGJtS3ROckktUHZabnBsSFNWaWRLRkNVZndGclZDMm5wdUlzVkNGanhJeFpOZmMyOVJtSm41QnFtVFR1YlhaR3c5ZEhxaG4xTXVlTlExbHhTWmFjZzQ4RzE5REgzZlc0M2M2R1A4UEFSRjBqZTZNc0dDWG9pM1dQSm10R19qOWZkdWF5UU5fS0ROdFlXTlhVUVVVeHpheExTR0ZkWUZ4ellhTVpwWW95U0tLUFY1M09tT1YyaHVvRkFwcDlKZlAtZmU3NEhqVlI0UnBfRzFBcm5veEdiMldQUzFlaDcyUFlfSzVoQW5MNHNBRktfbGpRckg0a3B0UlQ0VDIzM2xqQnZhMEc0Sm41akRqdDhUTDF2R0NsOTJMWGgwR1BqVFNPN1V6UmVHUGVhREhWZEk4S1BTeVR0VHhLbXRCOWtfSnQtNC12emlUYTdlTF8ydDZTWk1TVG9CZV8wX1VoelBKb0RQNGEtMER4R1hac1M5UWhweVpVUHJ6N2ZsUklIUUlSYi1FaTNwZ1U4eEJ0THo2SFdVTXZiRTR4cGdLd3dWN0U4Skp2SmtOZHEwZFRJd1lUdzhtbG5ZYXhMRjNnRGo1ajF2Z2ZIZExaRG9yQV9ZMUtrd0twZ1IteGppWFpLT05xUFdJN1FMUEtvNHdDU3FKNWlTZmFXblVXQ0U1OElKOVBiOWVTeHNfVlFUdXVQRTEyYXRXc3NGdVBrMmd0ekNpMXZTREZWSlpoV0xXQ3c3UU5qY1M3T2RUcG9RZE1IUUxQWWRTV0lxNUdRX1ktTUtEVlMxbW13azU4ZkxpWWM5REtSY040enM5VWtZOEY4SUhRVmQzb3R4c0pmeG9qVmR3Y3cxSjgtTkVTUjFPT0ljMEZBd3FWLVEzcVNhYWgxd1kyb0hnY3F4WHRFU180WDROaEppd2xMWmh3SUExeTlKekx1aXJ2aVV0WHJ6TGJhRXd2STNydGlpU0JNSmxXWWNRMXk0Q1Q5VWh4M0R3cEk1blM4eTNESU1PQXJXU1YtU1FjQ2RMTDNxaWpwQTlvc1Z4TWxtWWNMSmYtRnlQcU5zbHo2RzlVeV82OFlJbXM0NTZZMkoxSkROOFV6SHp2bHVfUWlKek5halQtanhxVzFYLXdCQnpQU2J3RTdvaHNWWE4xV0REcVRlVkppRjFGbGVPZEhvWGRvbFFMTWJTblhaX1owdGl6N0pfZXRvRG83V2JlclJwU3ZNN0JLSUloRTJYUHRRMUx2TzhPT1QwQTNjNzFBcVdqcFpneks4c0NZUHpwOGZLWG56Snd4b3BOcjlxczM1NHc4Sko2UGdCU1g3LXppeS1nbDFPNTI4ZThLOUJCYU5mM19ITWMxdk9xQWRMZjhZVU1XM3N5dnpRODZ4OHVvdVIya3RRZlhoRlVUUnJ4LUhKM052WS1tSUxmUHNteTlBU0JmZXp4aVl4YVdHU1BwWDNfQUpEY2NVU0ZoaUdEdEFrZ3pKc1h0UlcxQUVqNndhbG5RcU83azdpRUNpdENaZ2FkLWFyZnVqNzZkNy1saHdRblFuM21nSmJDWWp1dXJkbmZRUEo5VUR4TXdYTmZzTWl1cVM0U1h4WnJ2QlNMZXhzajFncGFacm52b3NDMWQ5akxPR2lpbl9jMXFJX1U3N0VwOWNBMnE5MnNMem5ESDJ6VkJ0LWVuT3U4STlNSjNfRUhnR3JoTUpsOFRLS3drNVd0RnRrSnhIQnFvS180SzdTcUpoWWsxa3E1LVhtVXp2cXVfTnFJeU5NSmhJakxTa19BancyZUxGYWF1R3ZpWVoxNWc0REhLZnRoMndVekl6MXB1SUZOVDVmcF92ZF9rY1JXWWVzUlFDYVhHdS1QUmlPOGxZZGI1eDhvY3RmNkc3VnpjNE4tRFBYcHdOamF4M3o4LTBueGtOYUhGQnVDQ0czS18yVmxhX3AyYjBGOXNLZEJ2YzNGZ25Ed2hWR2JHUlF3eWNRSGJXeDlXX0sxQWZmYnU4OXV3d3ZvYVlmQmh2OXdrdUlhOXlfUThJV0tLVEdsdGE5aXVKbW9YUy0tZE0zY19DV3JDTzNRQXI4TWRkMlBlOWFHeGllTjBSYXNvS2J0SWxiQXUtQ2s3V0o3VUhuaFJZWlN2R0lFSUR4bGRfTzM1bFpFdkZPdmFhbUpLMjBPYUNROWRjeWpUSGMyeHpveTVaZmZCM2JBZWlaaGJITFNHSEFIak9mb0NPZ1lGaTExY0NFUE90dGxiN25ISHdMODVXUS5YUVp5NklZZnJ1VTRsa3FxSjZoaDBn.OQUGAwAmQVDapzPokmI0au2e6QwQ2fnNFZAcQMjwz8_gH2YWdJnzxD7yk0R24v0ebQ738jBU3gdUYT8lvofwcC0qwnsqrbI6Q2ZryjoXFhCDQLIqv8mrEfllpKcMBLsUcsuL_J32m6vxQ4PQUa_ENnbaEWhDaNm0Gn8csIwfq_7kgrhaVrCRhLTO05aLlXiMulSySeOnWMDM6cBhQ3fEqJMcr2TjQxfltvjzSCIn0V3-s1t-fX4Zi_ZVSRshAsFpPVK39YDm3OVDccM5E5FBu5L3MEoLfdjQcnFYlrnHM0PvStR2HIiReMW66SuXTr753wndoL8FuyfXRUgSSQxk-A&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;c2Ftc3VuZyAtIFNNLUo1MDBGTg==&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK) deviceName = SgIsbA.." enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalV5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLmdEZFBCWlVFQ3E5aE9fQWxZMUpmd2dqcEFSdE9BS0NVdnNlZzBGcV9wSVlXbHJLZnViNWFlMDMwc2VicW1zM0w1YXBlTl9MbkN1cUNCMXFjNktBY2JGQ0IteEljdWs5bmdtRExGbE9DMFJtdUxmUVlDTjdXM1ROTmxDQjdGczhyRHBoX1hWTE5HeFc5U0NHVWJ0UTlvaGcxaUdDR3FxclM5QTZLN0N3RXNwVkRJVS1veEplSkxJN29DYzdGMHJnTjR3MWZTVHhsMGdGOXctY3MxMzc1eWpodk1mY0hDLUc0ajlHMzVwRUI0ZlduRVR4amg4SFphMjFiUEFuUlZaRFBUUVpKc2RNVnZRS1h0Y2lQWGxZcWNFTFJrbGRWRTRMV2ItWkgwdmp0WEZKeUJBeDg3V3F6b1FheTVhUHlrM2Q4dnJhcEdJMGFabGlGTXdwdWNfdFA2dy5GUjhMazhUOC0wRlR0Sm01LnMxNnZPaXFGX3hnQkdwUHJJdjNZY0NfdXg1aTk1LW9mVk5yRzJldTAxNVNPUTlGbUlPNEhad3pZMlhaMmZOOGVlN1JraWZ1MXRHUjZZMGZmSTBOaS1SX0wtMjJ6Z0VlV01TRUpnTjhtUjQtMGJtS3ROckktUHZabnBsSFNWaWRLRkNVZndGclZDMm5wdUlzVkNGanhJeFpOZmMyOVJtSm41QnFtVFR1YlhaR3c5ZEhxaG4xTXVlTlExbHhTWmFjZzQ4RzE5REgzZlc0M2M2R1A4UEFSRjBqZTZNc0dDWG9pM1dQSm10R19qOWZkdWF5UU5fS0ROdFlXTlhVUVVVeHpheExTR0ZkWUZ4ellhTVpwWW95U0tLUFY1M09tT1YyaHVvRkFwcDlKZlAtZmU3NEhqVlI0UnBfRzFBcm5veEdiMldQUzFlaDcyUFlfSzVoQW5MNHNBRktfbGpRckg0a3B0UlQ0VDIzM2xqQnZhMEc0Sm41akRqdDhUTDF2R0NsOTJMWGgwR1BqVFNPN1V6UmVHUGVhREhWZEk4S1BTeVR0VHhLbXRCOWtfSnQtNC12emlUYTdlTF8ydDZTWk1TVG9CZV8wX1VoelBKb0RQNGEtMER4R1hac1M5UWhweVpVUHJ6N2ZsUklIUUlSYi1FaTNwZ1U4eEJ0THo2SFdVTXZiRTR4cGdLd3dWN0U4Skp2SmtOZHEwZFRJd1lUdzhtbG5ZYXhMRjNnRGo1ajF2Z2ZIZExaRG9yQV9ZMUtrd0twZ1IteGppWFpLT05xUFdJN1FMUEtvNHdDU3FKNWlTZmFXblVXQ0U1OElKOVBiOWVTeHNfVlFUdXVQRTEyYXRXc3NGdVBrMmd0ekNpMXZTREZWSlpoV0xXQ3c3UU5qY1M3T2RUcG9RZE1IUUxQWWRTV0lxNUdRX1ktTUtEVlMxbW13azU4ZkxpWWM5REtSY040enM5VWtZOEY4SUhRVmQzb3R4c0pmeG9qVmR3Y3cxSjgtTkVTUjFPT0ljMEZBd3FWLVEzcVNhYWgxd1kyb0hnY3F4WHRFU180WDROaEppd2xMWmh3SUExeTlKekx1aXJ2aVV0WHJ6TGJhRXd2STNydGlpU0JNSmxXWWNRMXk0Q1Q5VWh4M0R3cEk1blM4eTNESU1PQXJXU1YtU1FjQ2RMTDNxaWpwQTlvc1Z4TWxtWWNMSmYtRnlQcU5zbHo2RzlVeV82OFlJbXM0NTZZMkoxSkROOFV6SHp2bHVfUWlKek5halQtanhxVzFYLXdCQnpQU2J3RTdvaHNWWE4xV0REcVRlVkppRjFGbGVPZEhvWGRvbFFMTWJTblhaX1owdGl6N0pfZXRvRG83V2JlclJwU3ZNN0JLSUloRTJYUHRRMUx2TzhPT1QwQTNjNzFBcVdqcFpneks4c0NZUHpwOGZLWG56Snd4b3BOcjlxczM1NHc4Sko2UGdCU1g3LXppeS1nbDFPNTI4ZThLOUJCYU5mM19ITWMxdk9xQWRMZjhZVU1XM3N5dnpRODZ4OHVvdVIya3RRZlhoRlVUUnJ4LUhKM052WS1tSUxmUHNteTlBU0JmZXp4aVl4YVdHU1BwWDNfQUpEY2NVU0ZoaUdEdEFrZ3pKc1h0UlcxQUVqNndhbG5RcU83azdpRUNpdENaZ2FkLWFyZnVqNzZkNy1saHdRblFuM21nSmJDWWp1dXJkbmZRUEo5VUR4TXdYTmZzTWl1cVM0U1h4WnJ2QlNMZXhzajFncGFacm52b3NDMWQ5akxPR2lpbl9jMXFJX1U3N0VwOWNBMnE5MnNMem5ESDJ6VkJ0LWVuT3U4STlNSjNfRUhnR3JoTUpsOFRLS3drNVd0RnRrSnhIQnFvS180SzdTcUpoWWsxa3E1LVhtVXp2cXVfTnFJeU5NSmhJakxTa19BancyZUxGYWF1R3ZpWVoxNWc0REhLZnRoMndVekl6MXB1SUZOVDVmcF92ZF9rY1JXWWVzUlFDYVhHdS1QUmlPOGxZZGI1eDhvY3RmNkc3VnpjNE4tRFBYcHdOamF4M3o4LTBueGtOYUhGQnVDQ0czS18yVmxhX3AyYjBGOXNLZEJ2YzNGZ25Ed2hWR2JHUlF3eWNRSGJXeDlXX0sxQWZmYnU4OXV3d3ZvYVlmQmh2OXdrdUlhOXlfUThJV0tLVEdsdGE5aXVKbW9YUy0tZE0zY19DV3JDTzNRQXI4TWRkMlBlOWFHeGllTjBSYXNvS2J0SWxiQXUtQ2s3V0o3VUhuaFJZWlN2R0lFSUR4bGRfTzM1bFpFdkZPdmFhbUpLMjBPYUNROWRjeWpUSGMyeHpveTVaZmZCM2JBZWlaaGJITFNHSEFIak9mb0NPZ1lGaTExY0NFUE90dGxiN25ISHdMODVXUS5YUVp5NklZZnJ1VTRsa3FxSjZoaDBn.OQUGAwAmQVDapzPokmI0au2e6QwQ2fnNFZAcQMjwz8_gH2YWdJnzxD7yk0R24v0ebQ738jBU3gdUYT8lvofwcC0qwnsqrbI6Q2ZryjoXFhCDQLIqv8mrEfllpKcMBLsUcsuL_J32m6vxQ4PQUa_ENnbaEWhDaNm0Gn8csIwfq_7kgrhaVrCRhLTO05aLlXiMulSySeOnWMDM6cBhQ3fEqJMcr2TjQxfltvjzSCIn0V3-s1t-fX4Zi_ZVSRshAsFpPVK39YDm3OVDccM5E5FBu5L3MEoLfdjQcnFYlrnHM0PvStR2HIiReMW66SuXTr753wndoL8FuyfXRUgSSQxk-A&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;SgIsbA..&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK) deviceName = WlRFIC0gWlRFIDgwMTA." enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalV5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLmdEZFBCWlVFQ3E5aE9fQWxZMUpmd2dqcEFSdE9BS0NVdnNlZzBGcV9wSVlXbHJLZnViNWFlMDMwc2VicW1zM0w1YXBlTl9MbkN1cUNCMXFjNktBY2JGQ0IteEljdWs5bmdtRExGbE9DMFJtdUxmUVlDTjdXM1ROTmxDQjdGczhyRHBoX1hWTE5HeFc5U0NHVWJ0UTlvaGcxaUdDR3FxclM5QTZLN0N3RXNwVkRJVS1veEplSkxJN29DYzdGMHJnTjR3MWZTVHhsMGdGOXctY3MxMzc1eWpodk1mY0hDLUc0ajlHMzVwRUI0ZlduRVR4amg4SFphMjFiUEFuUlZaRFBUUVpKc2RNVnZRS1h0Y2lQWGxZcWNFTFJrbGRWRTRMV2ItWkgwdmp0WEZKeUJBeDg3V3F6b1FheTVhUHlrM2Q4dnJhcEdJMGFabGlGTXdwdWNfdFA2dy5GUjhMazhUOC0wRlR0Sm01LnMxNnZPaXFGX3hnQkdwUHJJdjNZY0NfdXg1aTk1LW9mVk5yRzJldTAxNVNPUTlGbUlPNEhad3pZMlhaMmZOOGVlN1JraWZ1MXRHUjZZMGZmSTBOaS1SX0wtMjJ6Z0VlV01TRUpnTjhtUjQtMGJtS3ROckktUHZabnBsSFNWaWRLRkNVZndGclZDMm5wdUlzVkNGanhJeFpOZmMyOVJtSm41QnFtVFR1YlhaR3c5ZEhxaG4xTXVlTlExbHhTWmFjZzQ4RzE5REgzZlc0M2M2R1A4UEFSRjBqZTZNc0dDWG9pM1dQSm10R19qOWZkdWF5UU5fS0ROdFlXTlhVUVVVeHpheExTR0ZkWUZ4ellhTVpwWW95U0tLUFY1M09tT1YyaHVvRkFwcDlKZlAtZmU3NEhqVlI0UnBfRzFBcm5veEdiMldQUzFlaDcyUFlfSzVoQW5MNHNBRktfbGpRckg0a3B0UlQ0VDIzM2xqQnZhMEc0Sm41akRqdDhUTDF2R0NsOTJMWGgwR1BqVFNPN1V6UmVHUGVhREhWZEk4S1BTeVR0VHhLbXRCOWtfSnQtNC12emlUYTdlTF8ydDZTWk1TVG9CZV8wX1VoelBKb0RQNGEtMER4R1hac1M5UWhweVpVUHJ6N2ZsUklIUUlSYi1FaTNwZ1U4eEJ0THo2SFdVTXZiRTR4cGdLd3dWN0U4Skp2SmtOZHEwZFRJd1lUdzhtbG5ZYXhMRjNnRGo1ajF2Z2ZIZExaRG9yQV9ZMUtrd0twZ1IteGppWFpLT05xUFdJN1FMUEtvNHdDU3FKNWlTZmFXblVXQ0U1OElKOVBiOWVTeHNfVlFUdXVQRTEyYXRXc3NGdVBrMmd0ekNpMXZTREZWSlpoV0xXQ3c3UU5qY1M3T2RUcG9RZE1IUUxQWWRTV0lxNUdRX1ktTUtEVlMxbW13azU4ZkxpWWM5REtSY040enM5VWtZOEY4SUhRVmQzb3R4c0pmeG9qVmR3Y3cxSjgtTkVTUjFPT0ljMEZBd3FWLVEzcVNhYWgxd1kyb0hnY3F4WHRFU180WDROaEppd2xMWmh3SUExeTlKekx1aXJ2aVV0WHJ6TGJhRXd2STNydGlpU0JNSmxXWWNRMXk0Q1Q5VWh4M0R3cEk1blM4eTNESU1PQXJXU1YtU1FjQ2RMTDNxaWpwQTlvc1Z4TWxtWWNMSmYtRnlQcU5zbHo2RzlVeV82OFlJbXM0NTZZMkoxSkROOFV6SHp2bHVfUWlKek5halQtanhxVzFYLXdCQnpQU2J3RTdvaHNWWE4xV0REcVRlVkppRjFGbGVPZEhvWGRvbFFMTWJTblhaX1owdGl6N0pfZXRvRG83V2JlclJwU3ZNN0JLSUloRTJYUHRRMUx2TzhPT1QwQTNjNzFBcVdqcFpneks4c0NZUHpwOGZLWG56Snd4b3BOcjlxczM1NHc4Sko2UGdCU1g3LXppeS1nbDFPNTI4ZThLOUJCYU5mM19ITWMxdk9xQWRMZjhZVU1XM3N5dnpRODZ4OHVvdVIya3RRZlhoRlVUUnJ4LUhKM052WS1tSUxmUHNteTlBU0JmZXp4aVl4YVdHU1BwWDNfQUpEY2NVU0ZoaUdEdEFrZ3pKc1h0UlcxQUVqNndhbG5RcU83azdpRUNpdENaZ2FkLWFyZnVqNzZkNy1saHdRblFuM21nSmJDWWp1dXJkbmZRUEo5VUR4TXdYTmZzTWl1cVM0U1h4WnJ2QlNMZXhzajFncGFacm52b3NDMWQ5akxPR2lpbl9jMXFJX1U3N0VwOWNBMnE5MnNMem5ESDJ6VkJ0LWVuT3U4STlNSjNfRUhnR3JoTUpsOFRLS3drNVd0RnRrSnhIQnFvS180SzdTcUpoWWsxa3E1LVhtVXp2cXVfTnFJeU5NSmhJakxTa19BancyZUxGYWF1R3ZpWVoxNWc0REhLZnRoMndVekl6MXB1SUZOVDVmcF92ZF9rY1JXWWVzUlFDYVhHdS1QUmlPOGxZZGI1eDhvY3RmNkc3VnpjNE4tRFBYcHdOamF4M3o4LTBueGtOYUhGQnVDQ0czS18yVmxhX3AyYjBGOXNLZEJ2YzNGZ25Ed2hWR2JHUlF3eWNRSGJXeDlXX0sxQWZmYnU4OXV3d3ZvYVlmQmh2OXdrdUlhOXlfUThJV0tLVEdsdGE5aXVKbW9YUy0tZE0zY19DV3JDTzNRQXI4TWRkMlBlOWFHeGllTjBSYXNvS2J0SWxiQXUtQ2s3V0o3VUhuaFJZWlN2R0lFSUR4bGRfTzM1bFpFdkZPdmFhbUpLMjBPYUNROWRjeWpUSGMyeHpveTVaZmZCM2JBZWlaaGJITFNHSEFIak9mb0NPZ1lGaTExY0NFUE90dGxiN25ISHdMODVXUS5YUVp5NklZZnJ1VTRsa3FxSjZoaDBn.OQUGAwAmQVDapzPokmI0au2e6QwQ2fnNFZAcQMjwz8_gH2YWdJnzxD7yk0R24v0ebQ738jBU3gdUYT8lvofwcC0qwnsqrbI6Q2ZryjoXFhCDQLIqv8mrEfllpKcMBLsUcsuL_J32m6vxQ4PQUa_ENnbaEWhDaNm0Gn8csIwfq_7kgrhaVrCRhLTO05aLlXiMulSySeOnWMDM6cBhQ3fEqJMcr2TjQxfltvjzSCIn0V3-s1t-fX4Zi_ZVSRshAsFpPVK39YDm3OVDccM5E5FBu5L3MEoLfdjQcnFYlrnHM0PvStR2HIiReMW66SuXTr753wndoL8FuyfXRUgSSQxk-A&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;WlRFIC0gWlRFIDgwMTA.&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK) deviceName = samsung - SM-J500FN" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalV5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLmdEZFBCWlVFQ3E5aE9fQWxZMUpmd2dqcEFSdE9BS0NVdnNlZzBGcV9wSVlXbHJLZnViNWFlMDMwc2VicW1zM0w1YXBlTl9MbkN1cUNCMXFjNktBY2JGQ0IteEljdWs5bmdtRExGbE9DMFJtdUxmUVlDTjdXM1ROTmxDQjdGczhyRHBoX1hWTE5HeFc5U0NHVWJ0UTlvaGcxaUdDR3FxclM5QTZLN0N3RXNwVkRJVS1veEplSkxJN29DYzdGMHJnTjR3MWZTVHhsMGdGOXctY3MxMzc1eWpodk1mY0hDLUc0ajlHMzVwRUI0ZlduRVR4amg4SFphMjFiUEFuUlZaRFBUUVpKc2RNVnZRS1h0Y2lQWGxZcWNFTFJrbGRWRTRMV2ItWkgwdmp0WEZKeUJBeDg3V3F6b1FheTVhUHlrM2Q4dnJhcEdJMGFabGlGTXdwdWNfdFA2dy5GUjhMazhUOC0wRlR0Sm01LnMxNnZPaXFGX3hnQkdwUHJJdjNZY0NfdXg1aTk1LW9mVk5yRzJldTAxNVNPUTlGbUlPNEhad3pZMlhaMmZOOGVlN1JraWZ1MXRHUjZZMGZmSTBOaS1SX0wtMjJ6Z0VlV01TRUpnTjhtUjQtMGJtS3ROckktUHZabnBsSFNWaWRLRkNVZndGclZDMm5wdUlzVkNGanhJeFpOZmMyOVJtSm41QnFtVFR1YlhaR3c5ZEhxaG4xTXVlTlExbHhTWmFjZzQ4RzE5REgzZlc0M2M2R1A4UEFSRjBqZTZNc0dDWG9pM1dQSm10R19qOWZkdWF5UU5fS0ROdFlXTlhVUVVVeHpheExTR0ZkWUZ4ellhTVpwWW95U0tLUFY1M09tT1YyaHVvRkFwcDlKZlAtZmU3NEhqVlI0UnBfRzFBcm5veEdiMldQUzFlaDcyUFlfSzVoQW5MNHNBRktfbGpRckg0a3B0UlQ0VDIzM2xqQnZhMEc0Sm41akRqdDhUTDF2R0NsOTJMWGgwR1BqVFNPN1V6UmVHUGVhREhWZEk4S1BTeVR0VHhLbXRCOWtfSnQtNC12emlUYTdlTF8ydDZTWk1TVG9CZV8wX1VoelBKb0RQNGEtMER4R1hac1M5UWhweVpVUHJ6N2ZsUklIUUlSYi1FaTNwZ1U4eEJ0THo2SFdVTXZiRTR4cGdLd3dWN0U4Skp2SmtOZHEwZFRJd1lUdzhtbG5ZYXhMRjNnRGo1ajF2Z2ZIZExaRG9yQV9ZMUtrd0twZ1IteGppWFpLT05xUFdJN1FMUEtvNHdDU3FKNWlTZmFXblVXQ0U1OElKOVBiOWVTeHNfVlFUdXVQRTEyYXRXc3NGdVBrMmd0ekNpMXZTREZWSlpoV0xXQ3c3UU5qY1M3T2RUcG9RZE1IUUxQWWRTV0lxNUdRX1ktTUtEVlMxbW13azU4ZkxpWWM5REtSY040enM5VWtZOEY4SUhRVmQzb3R4c0pmeG9qVmR3Y3cxSjgtTkVTUjFPT0ljMEZBd3FWLVEzcVNhYWgxd1kyb0hnY3F4WHRFU180WDROaEppd2xMWmh3SUExeTlKekx1aXJ2aVV0WHJ6TGJhRXd2STNydGlpU0JNSmxXWWNRMXk0Q1Q5VWh4M0R3cEk1blM4eTNESU1PQXJXU1YtU1FjQ2RMTDNxaWpwQTlvc1Z4TWxtWWNMSmYtRnlQcU5zbHo2RzlVeV82OFlJbXM0NTZZMkoxSkROOFV6SHp2bHVfUWlKek5halQtanhxVzFYLXdCQnpQU2J3RTdvaHNWWE4xV0REcVRlVkppRjFGbGVPZEhvWGRvbFFMTWJTblhaX1owdGl6N0pfZXRvRG83V2JlclJwU3ZNN0JLSUloRTJYUHRRMUx2TzhPT1QwQTNjNzFBcVdqcFpneks4c0NZUHpwOGZLWG56Snd4b3BOcjlxczM1NHc4Sko2UGdCU1g3LXppeS1nbDFPNTI4ZThLOUJCYU5mM19ITWMxdk9xQWRMZjhZVU1XM3N5dnpRODZ4OHVvdVIya3RRZlhoRlVUUnJ4LUhKM052WS1tSUxmUHNteTlBU0JmZXp4aVl4YVdHU1BwWDNfQUpEY2NVU0ZoaUdEdEFrZ3pKc1h0UlcxQUVqNndhbG5RcU83azdpRUNpdENaZ2FkLWFyZnVqNzZkNy1saHdRblFuM21nSmJDWWp1dXJkbmZRUEo5VUR4TXdYTmZzTWl1cVM0U1h4WnJ2QlNMZXhzajFncGFacm52b3NDMWQ5akxPR2lpbl9jMXFJX1U3N0VwOWNBMnE5MnNMem5ESDJ6VkJ0LWVuT3U4STlNSjNfRUhnR3JoTUpsOFRLS3drNVd0RnRrSnhIQnFvS180SzdTcUpoWWsxa3E1LVhtVXp2cXVfTnFJeU5NSmhJakxTa19BancyZUxGYWF1R3ZpWVoxNWc0REhLZnRoMndVekl6MXB1SUZOVDVmcF92ZF9rY1JXWWVzUlFDYVhHdS1QUmlPOGxZZGI1eDhvY3RmNkc3VnpjNE4tRFBYcHdOamF4M3o4LTBueGtOYUhGQnVDQ0czS18yVmxhX3AyYjBGOXNLZEJ2YzNGZ25Ed2hWR2JHUlF3eWNRSGJXeDlXX0sxQWZmYnU4OXV3d3ZvYVlmQmh2OXdrdUlhOXlfUThJV0tLVEdsdGE5aXVKbW9YUy0tZE0zY19DV3JDTzNRQXI4TWRkMlBlOWFHeGllTjBSYXNvS2J0SWxiQXUtQ2s3V0o3VUhuaFJZWlN2R0lFSUR4bGRfTzM1bFpFdkZPdmFhbUpLMjBPYUNROWRjeWpUSGMyeHpveTVaZmZCM2JBZWlaaGJITFNHSEFIak9mb0NPZ1lGaTExY0NFUE90dGxiN25ISHdMODVXUS5YUVp5NklZZnJ1VTRsa3FxSjZoaDBn.OQUGAwAmQVDapzPokmI0au2e6QwQ2fnNFZAcQMjwz8_gH2YWdJnzxD7yk0R24v0ebQ738jBU3gdUYT8lvofwcC0qwnsqrbI6Q2ZryjoXFhCDQLIqv8mrEfllpKcMBLsUcsuL_J32m6vxQ4PQUa_ENnbaEWhDaNm0Gn8csIwfq_7kgrhaVrCRhLTO05aLlXiMulSySeOnWMDM6cBhQ3fEqJMcr2TjQxfltvjzSCIn0V3-s1t-fX4Zi_ZVSRshAsFpPVK39YDm3OVDccM5E5FBu5L3MEoLfdjQcnFYlrnHM0PvStR2HIiReMW66SuXTr753wndoL8FuyfXRUgSSQxk-A&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;samsung - SM-J500FN&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (200 OK) deviceName = Телефон #1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalV5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLmdEZFBCWlVFQ3E5aE9fQWxZMUpmd2dqcEFSdE9BS0NVdnNlZzBGcV9wSVlXbHJLZnViNWFlMDMwc2VicW1zM0w1YXBlTl9MbkN1cUNCMXFjNktBY2JGQ0IteEljdWs5bmdtRExGbE9DMFJtdUxmUVlDTjdXM1ROTmxDQjdGczhyRHBoX1hWTE5HeFc5U0NHVWJ0UTlvaGcxaUdDR3FxclM5QTZLN0N3RXNwVkRJVS1veEplSkxJN29DYzdGMHJnTjR3MWZTVHhsMGdGOXctY3MxMzc1eWpodk1mY0hDLUc0ajlHMzVwRUI0ZlduRVR4amg4SFphMjFiUEFuUlZaRFBUUVpKc2RNVnZRS1h0Y2lQWGxZcWNFTFJrbGRWRTRMV2ItWkgwdmp0WEZKeUJBeDg3V3F6b1FheTVhUHlrM2Q4dnJhcEdJMGFabGlGTXdwdWNfdFA2dy5GUjhMazhUOC0wRlR0Sm01LnMxNnZPaXFGX3hnQkdwUHJJdjNZY0NfdXg1aTk1LW9mVk5yRzJldTAxNVNPUTlGbUlPNEhad3pZMlhaMmZOOGVlN1JraWZ1MXRHUjZZMGZmSTBOaS1SX0wtMjJ6Z0VlV01TRUpnTjhtUjQtMGJtS3ROckktUHZabnBsSFNWaWRLRkNVZndGclZDMm5wdUlzVkNGanhJeFpOZmMyOVJtSm41QnFtVFR1YlhaR3c5ZEhxaG4xTXVlTlExbHhTWmFjZzQ4RzE5REgzZlc0M2M2R1A4UEFSRjBqZTZNc0dDWG9pM1dQSm10R19qOWZkdWF5UU5fS0ROdFlXTlhVUVVVeHpheExTR0ZkWUZ4ellhTVpwWW95U0tLUFY1M09tT1YyaHVvRkFwcDlKZlAtZmU3NEhqVlI0UnBfRzFBcm5veEdiMldQUzFlaDcyUFlfSzVoQW5MNHNBRktfbGpRckg0a3B0UlQ0VDIzM2xqQnZhMEc0Sm41akRqdDhUTDF2R0NsOTJMWGgwR1BqVFNPN1V6UmVHUGVhREhWZEk4S1BTeVR0VHhLbXRCOWtfSnQtNC12emlUYTdlTF8ydDZTWk1TVG9CZV8wX1VoelBKb0RQNGEtMER4R1hac1M5UWhweVpVUHJ6N2ZsUklIUUlSYi1FaTNwZ1U4eEJ0THo2SFdVTXZiRTR4cGdLd3dWN0U4Skp2SmtOZHEwZFRJd1lUdzhtbG5ZYXhMRjNnRGo1ajF2Z2ZIZExaRG9yQV9ZMUtrd0twZ1IteGppWFpLT05xUFdJN1FMUEtvNHdDU3FKNWlTZmFXblVXQ0U1OElKOVBiOWVTeHNfVlFUdXVQRTEyYXRXc3NGdVBrMmd0ekNpMXZTREZWSlpoV0xXQ3c3UU5qY1M3T2RUcG9RZE1IUUxQWWRTV0lxNUdRX1ktTUtEVlMxbW13azU4ZkxpWWM5REtSY040enM5VWtZOEY4SUhRVmQzb3R4c0pmeG9qVmR3Y3cxSjgtTkVTUjFPT0ljMEZBd3FWLVEzcVNhYWgxd1kyb0hnY3F4WHRFU180WDROaEppd2xMWmh3SUExeTlKekx1aXJ2aVV0WHJ6TGJhRXd2STNydGlpU0JNSmxXWWNRMXk0Q1Q5VWh4M0R3cEk1blM4eTNESU1PQXJXU1YtU1FjQ2RMTDNxaWpwQTlvc1Z4TWxtWWNMSmYtRnlQcU5zbHo2RzlVeV82OFlJbXM0NTZZMkoxSkROOFV6SHp2bHVfUWlKek5halQtanhxVzFYLXdCQnpQU2J3RTdvaHNWWE4xV0REcVRlVkppRjFGbGVPZEhvWGRvbFFMTWJTblhaX1owdGl6N0pfZXRvRG83V2JlclJwU3ZNN0JLSUloRTJYUHRRMUx2TzhPT1QwQTNjNzFBcVdqcFpneks4c0NZUHpwOGZLWG56Snd4b3BOcjlxczM1NHc4Sko2UGdCU1g3LXppeS1nbDFPNTI4ZThLOUJCYU5mM19ITWMxdk9xQWRMZjhZVU1XM3N5dnpRODZ4OHVvdVIya3RRZlhoRlVUUnJ4LUhKM052WS1tSUxmUHNteTlBU0JmZXp4aVl4YVdHU1BwWDNfQUpEY2NVU0ZoaUdEdEFrZ3pKc1h0UlcxQUVqNndhbG5RcU83azdpRUNpdENaZ2FkLWFyZnVqNzZkNy1saHdRblFuM21nSmJDWWp1dXJkbmZRUEo5VUR4TXdYTmZzTWl1cVM0U1h4WnJ2QlNMZXhzajFncGFacm52b3NDMWQ5akxPR2lpbl9jMXFJX1U3N0VwOWNBMnE5MnNMem5ESDJ6VkJ0LWVuT3U4STlNSjNfRUhnR3JoTUpsOFRLS3drNVd0RnRrSnhIQnFvS180SzdTcUpoWWsxa3E1LVhtVXp2cXVfTnFJeU5NSmhJakxTa19BancyZUxGYWF1R3ZpWVoxNWc0REhLZnRoMndVekl6MXB1SUZOVDVmcF92ZF9rY1JXWWVzUlFDYVhHdS1QUmlPOGxZZGI1eDhvY3RmNkc3VnpjNE4tRFBYcHdOamF4M3o4LTBueGtOYUhGQnVDQ0czS18yVmxhX3AyYjBGOXNLZEJ2YzNGZ25Ed2hWR2JHUlF3eWNRSGJXeDlXX0sxQWZmYnU4OXV3d3ZvYVlmQmh2OXdrdUlhOXlfUThJV0tLVEdsdGE5aXVKbW9YUy0tZE0zY19DV3JDTzNRQXI4TWRkMlBlOWFHeGllTjBSYXNvS2J0SWxiQXUtQ2s3V0o3VUhuaFJZWlN2R0lFSUR4bGRfTzM1bFpFdkZPdmFhbUpLMjBPYUNROWRjeWpUSGMyeHpveTVaZmZCM2JBZWlaaGJITFNHSEFIak9mb0NPZ1lGaTExY0NFUE90dGxiN25ISHdMODVXUS5YUVp5NklZZnJ1VTRsa3FxSjZoaDBn.OQUGAwAmQVDapzPokmI0au2e6QwQ2fnNFZAcQMjwz8_gH2YWdJnzxD7yk0R24v0ebQ738jBU3gdUYT8lvofwcC0qwnsqrbI6Q2ZryjoXFhCDQLIqv8mrEfllpKcMBLsUcsuL_J32m6vxQ4PQUa_ENnbaEWhDaNm0Gn8csIwfq_7kgrhaVrCRhLTO05aLlXiMulSySeOnWMDM6cBhQ3fEqJMcr2TjQxfltvjzSCIn0V3-s1t-fX4Zi_ZVSRshAsFpPVK39YDm3OVDccM5E5FBu5L3MEoLfdjQcnFYlrnHM0PvStR2HIiReMW66SuXTr753wndoL8FuyfXRUgSSQxk-A&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Телефон #1&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (DeviceInfo=UNKNOWN #1)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU9EUXpORE0wT1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5Lno1Nm5Na3g1bldhU0RwNS1NcTNsaXlTT3lNdzBFa3VMaXNSbkNHMlV6SVAtWkpqVjNvNklYYjRCVzIxbFNzLW53S3FTQUt3ZzFGUkZZZmZFdG4tb3RmLVpGVDNvM1JNTk52dENLYmFKcnh0d3dkTGhqNGFoUzY2RlV0VGtMdm5YZm1Yc0U1dFhaV3lQQTlGUll3aS1jZHR0dGhjQWFkSjBETmM1VEFIS1E3Tk9BdWVRU1d2THRRZ2haVXpCSHJheExqUzV2empMTEhxOGJ5aExEVllILVZZSVVFVVpLQXRUWGk1d3N5bDVPNDZXN2VWRjc1b1lOS3Q3bWthdm1BX2drOWpnTWpaREVER2pUenUxclF4ZUtyai1EVmdYT2dKbk82cTlFZDcxRUJGaHdQXzBiajRVTXFlQVd4d2lMS0ZmdFJtNm9PVDR5eE9QLW5hQXB3cDVfQS5oQ0UxLVEzSmdhRkNqMEhtLldTYkxjRjI2MFpLVkx0OEktdmR5cUZQNmQ5ZVk5ckxENUhLNS1mcWNfalFUREdZRkV6Q1J6SG1DNHV1YkhWYm1aX1RGNlVOc2xhRmhTRWprWHVLU1Nwal81dGpiNThfbkNhZkk2UTU5ZFVzeFpUM3JYVnZ5NXAtZG5rS0R0dVZ6eTdfMzExQmY0LVVlWFFSd0l3TVNlSHVGbkEwU2t4R2dmNlpSeFdneUltczBlTjFXRFZMYWxINVotTEFJTjV1UmhXTk84cWNhenp4MUxxbUtRUFVEcmQtU1NmcmRPMVNnTGVUYUpGbkhrbDZZZ3FWdlFUMmV5WUxLaGxyODNJRGFOQXlsSmItWGpfLS1VRmhmV3NOWmMtRUctQ3BQSDZULUxqYm5RYW5ZbFVGQkJvUndLc0ZwM2dUa3M4SU5UQ1k5Z0pacnJOTUtFMFpmQVFVRFJHLTlycXdZUnVOSVN3clFkbUEyTWozNVFCUTVQMnlFOEtoMFRHYVFHZmU1b2tBSEptUjRzajVCNVBnajZpUGZseWZaNE9CVURGWldtS2l4SEQ5dmJNSFlfU0lteTFvMEhaMDJjXzlRdDFZZGhweko4dGlhWms1MDJPUXF4Q3h0ZW5ZeTZaU042dGk3NzVVNmtlcGZ3dWlWZlRnRWdUbmdsaTVnbUpyYjdUejZUSlVUblBhOU5fMFhfMktHMHlnRS1pX2FXWTBwOFFvNW9RZW1YcmNsR2hxRGZwTVhOQWVZeHpZSEVrOWlmcy1WTXNHa1NrOFM0cHotRHRqZHZVc2E3TUxiQmRFWmtDc2tfTDgtWHZFUGtHMVVrSjRTZEcyU0FybDN6YzZaV3VlZnlWbWR0RElYQnRDdklYYV9fZUt5R01WVkRkN2ZuSFlGSVNTVGdlaS1rcHFDY1pmWVdyNnhIeG5YTDJkUlFFQk56X0MzazltT09zRDZDbzZWYTNicExJZEhBcldGUmV6VGltSTh2QVNJdG9GQXdHaUs1bGdCaE1YZk5UWTEyTHBZN0NzRnRuOExEZi1RV3JKZDFoaTBCdWs1Z2tGaWhtVEtqVlA1Q2ZwMDVSZ1kzNVUzYVI5RDg3U1U3UWF4ekQ0Uk55UjUwT21Hai1hNzhwc2xUb2pfa2lEa2w0SXNXWS1nRkx3dm5STENRakJBSkkwWm90enk1dzdHQTJLaE1YUm03R0JxYnJHbnN2bGZfYVA3aDdHWnVGeUdRTExhQTViMm9jTEVrcmFJaHhlQ2MwS2JUQ3cteHBKWEs0Y1FfdFhQdDJEeXNDVURnWlBXeGVZUmp6dERPZHVTeXdzeENmNFM3eXJJNXlGemRMa0lTWXAxTXhqOHpiTzRSVmZVWHhqOHNSNi0tMzNrLTZ0ZEhzNVdPeUl6ejJoRHpVekMtM09uQkhtVUtiemhmSV93ZEFpdDlGNkN0RmhsS003SlVWbkZsVU5neWl4R3J4S1lTQVByNG9sN2NTLVVySjlwUW9SNkdSVHJGN29yenBHcXh6YUt6cVZqZHJhS25YbXBTS1diYlRVUENOUVhyQmZQOWZUZXFrc1NXcTEyRlR6cTFPcVpjN3NodEtFT0NUSjVSX3lSUUdGbHkyTi1NTHQwd2w4cGNzdkJJUTdYblpfWkUtM21lSDFYZE1DNzcwQ215ZVkwdEh1RTZ2VFBZanU1ME9vNXpNWXQ0N0YwcW1SRHdzN3JZNDBHTE5rUDBJY2dEYjVPMDh5NGR4ZndFcjZKQl9rbnlZQnR5LVNNS0tXWFpSZ3Yxb3RQWVhfOF9NbnAtclg5N0trTExOeHRvdlpfYkpPWm4zb2xvVVlRUmNsbWRhNFR3TUFvOVA5RDhaLURZekJIeXRoY28zdVA0dDI5UndET2F2SGVXVkgzZjFYVlNzb0VOTU53YWpMb1ZqTjluOWVoQ1d1S3oybW9lUzBpdkctVVcwaVI1OWxhWVV3Nk1nZjFuYTlUUjhlVTJBNEo5YWs0a3lRQ3BybmtvSHVQZUpfWnpCQXFqOUk2anNHOWhMeWg4SzRTZVR0N0lZemFJdjhyZU5UQkllenFFX2NfMUt2UDctYlg2NkhONndpQ2t0RzRnMDFfcDhaVGh5T1RpNk1xLUtVVjdlMk11eGV3YlBHaTk5d2NQNjZwdFJHNElGX0hpYWo2WlVXTmlzMTNBaHZvWHA4aHJ5M0QyTWFDMzZUTy1sS2dXUmx3NDBpNmQ0RlhZNXZLOHIzdWRoUDNacUV2bEZNQThPdkVscmZRVkRtVHRjcDFlYXJlNHZSSTdCcS1mNnNicTBIX0wzeWtXczU1cnozQ3pzSzBFMXJvcnk5Z2ctTWRySHlhU0xzbDd0QVEwSXB0dFlTUFpkeVMzOXd4bE9lNHpEQjhfbl9DVVhJSFNBX1F1NGh0Z2pjc3ZuMUs3Y0dERmt5WWszTDlmQ0t6ZndrTGhTb3g1MllrNG41RG05SEhOR2JBZlJGcGtycEhNX1RYem5xRE4xSV9fTUFDVGRqZ3o1OGdiUklJdFJ6bzRncFNsWmlwV0lVNzhyNXZwcFNTVDFxSFpGSFpGejQwZ2V5bnNhSUhSX3BneTUyeC1SSGNhNFF3MkQtR3llWEN6b09rRUdoU04xQldkQlhfcHJkV3RTR2FOeTlPQ3Z1bHZ2VUdDbkQwOXVtcjdJNjFEQTRGZVlPaEtOOGVVc1I0QjJocTNyR28xdnVyNmE2MFhwMjlKaHVMbEhhcm1LbkZJOXlSdHUzNHJVRVltVEFXRUtmeDEyOEpJVUFRUWM4QmJtQ0F0b1VmandRTGhuODRra0IwX2o5eUpGdmNXTjZWdVR2cUljNXRJR1NRc2RFakdZM1luOS1QZl9HZnFmUFRVS0NuelZQVkY2V19nZTdiYUdHa29BSXNBY0RoX01IZVhRYkN5Vm5jbnBFbkNHclNLd0t2WjcxTEZtYldrVkowTnJpdS1BSmZNOFlwSU9XV0xqMjVPVml5UFJLRFlaSGVBZWtnaG54TVVqdFJtd0Z4MndFM1owTjF3dGVpM28yZVZ0QjhHR0pGLUp2YmVFd3F5MUl4STZvc2RxeVFXandKcFpvSDcxUHFlS0c3aHVjS3ZCc1pLRjhaUmx4QkR1SlBjZnBSb3BWWHNpTVNxRUNfUmZLZFdQYmdVUGRYN25ZYWZVMkN4YzM0MGNSaDVTWm5aNklLQ2l1c05kcVRoV2JONkZzb0dsaXo2N1drTDFBNXBKdjBnZTlPdWNuVlcyU2kxdkE5aDdEUXhJOVlZblVIUkZaeGFUTDI1blQxSUxGbG00WXVBM2JXcHJmVjNhdDBBV09DTWZDZU9WeGVkd2p3VXp3ZFM1YjhwNy12dkhxUDBYNlgyMUVLZDd6X1htS3NjZ2J4eWhCRWpDcEIyY2JIbXFfX25UZHpaakdjemNac0IzYjhrbmFUU1B3YnlzYkNoaU0wOW41QnVvM3lKWFlBaEp5NHFxb1RCZUIzSWZIZkI5Ul9CNXhaMmw5QWMzdlV5bGE5WUkybHlHUmxfbU5KRkZaZUJjTzlYeUptMVF2ZUtYWjZXZVRlY2NfVkVSR1Z2MkM4Q3hPSFV5RTVyVEhjOTNOc29odlA0VURFRERGYzYwSFd6VXBYMjJCaEJla1VOMVFLbzI1T2tXT2dmZUdHNnZQYmE0eHJnY2Q0R09oNjhhRm81dzE0emlBcURLcE92b1FOV2o4OWVpZVhrMnQxbHhnWFQ1WHpTOGZEaFQtbmJGdTkyRjZDT081aDQ5QTE3dzhoYWwzSHl3d2F4WHF3bUVvcVhhOUxVRkxtdUFNWUxlbTBDSUlNUURtRmtGUG9KMXRfYUFEbGhpSzRJRzB1T3kzRzVlR016ekt5VGVnNC5WNVc4SlU5bGNmbVpOVVlmTjFVa01B.TrBOk81h8G5jnodBg5ICPNciIsJ0n0VHlWwmT7WAxyVRvsaTVngQIbMy7x2sAMjx-0Nn1n9jrZu_H1qemyxVYJQL0IpqOt_wSiO8j9XmhcvFZ7Etl1PEZWJlTvQRa5WF3RsAFZAWSer4vFkz5gaOMuSkdTvLpj24NR2dfuu5dWoy6ys5kyAyuzEIAB2frgBOQxdujGluFjfFcBiGDuksDeg4Qmo6hFb1ouAtfyUy0PzCmwBd5c0ky-QqXeW4B5XUz8j20BYhoalVQtjS04CyNspg3RXyOqvHV5PfppifZUR8DjVGfPcirnuCk72RHCB7qgWaDJGTi4lCXjHMeB54Dw&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;0414103B864980018088017685946200D290CAE7D7860CA7&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILE_PHONE&quot;,&#xd;
    &quot;deviceName&quot;: &quot;RXVnZW4ncyBpUGhvbmU.&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380952711598&quot;,&#xd;
    &quot;deviceLocation&quot;: &quot;+52.14/+4.51&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;171.33.134.77&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (DeviceInfo=UNKNOWN #2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU9EUXpORE0wT1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5Lno1Nm5Na3g1bldhU0RwNS1NcTNsaXlTT3lNdzBFa3VMaXNSbkNHMlV6SVAtWkpqVjNvNklYYjRCVzIxbFNzLW53S3FTQUt3ZzFGUkZZZmZFdG4tb3RmLVpGVDNvM1JNTk52dENLYmFKcnh0d3dkTGhqNGFoUzY2RlV0VGtMdm5YZm1Yc0U1dFhaV3lQQTlGUll3aS1jZHR0dGhjQWFkSjBETmM1VEFIS1E3Tk9BdWVRU1d2THRRZ2haVXpCSHJheExqUzV2empMTEhxOGJ5aExEVllILVZZSVVFVVpLQXRUWGk1d3N5bDVPNDZXN2VWRjc1b1lOS3Q3bWthdm1BX2drOWpnTWpaREVER2pUenUxclF4ZUtyai1EVmdYT2dKbk82cTlFZDcxRUJGaHdQXzBiajRVTXFlQVd4d2lMS0ZmdFJtNm9PVDR5eE9QLW5hQXB3cDVfQS5oQ0UxLVEzSmdhRkNqMEhtLldTYkxjRjI2MFpLVkx0OEktdmR5cUZQNmQ5ZVk5ckxENUhLNS1mcWNfalFUREdZRkV6Q1J6SG1DNHV1YkhWYm1aX1RGNlVOc2xhRmhTRWprWHVLU1Nwal81dGpiNThfbkNhZkk2UTU5ZFVzeFpUM3JYVnZ5NXAtZG5rS0R0dVZ6eTdfMzExQmY0LVVlWFFSd0l3TVNlSHVGbkEwU2t4R2dmNlpSeFdneUltczBlTjFXRFZMYWxINVotTEFJTjV1UmhXTk84cWNhenp4MUxxbUtRUFVEcmQtU1NmcmRPMVNnTGVUYUpGbkhrbDZZZ3FWdlFUMmV5WUxLaGxyODNJRGFOQXlsSmItWGpfLS1VRmhmV3NOWmMtRUctQ3BQSDZULUxqYm5RYW5ZbFVGQkJvUndLc0ZwM2dUa3M4SU5UQ1k5Z0pacnJOTUtFMFpmQVFVRFJHLTlycXdZUnVOSVN3clFkbUEyTWozNVFCUTVQMnlFOEtoMFRHYVFHZmU1b2tBSEptUjRzajVCNVBnajZpUGZseWZaNE9CVURGWldtS2l4SEQ5dmJNSFlfU0lteTFvMEhaMDJjXzlRdDFZZGhweko4dGlhWms1MDJPUXF4Q3h0ZW5ZeTZaU042dGk3NzVVNmtlcGZ3dWlWZlRnRWdUbmdsaTVnbUpyYjdUejZUSlVUblBhOU5fMFhfMktHMHlnRS1pX2FXWTBwOFFvNW9RZW1YcmNsR2hxRGZwTVhOQWVZeHpZSEVrOWlmcy1WTXNHa1NrOFM0cHotRHRqZHZVc2E3TUxiQmRFWmtDc2tfTDgtWHZFUGtHMVVrSjRTZEcyU0FybDN6YzZaV3VlZnlWbWR0RElYQnRDdklYYV9fZUt5R01WVkRkN2ZuSFlGSVNTVGdlaS1rcHFDY1pmWVdyNnhIeG5YTDJkUlFFQk56X0MzazltT09zRDZDbzZWYTNicExJZEhBcldGUmV6VGltSTh2QVNJdG9GQXdHaUs1bGdCaE1YZk5UWTEyTHBZN0NzRnRuOExEZi1RV3JKZDFoaTBCdWs1Z2tGaWhtVEtqVlA1Q2ZwMDVSZ1kzNVUzYVI5RDg3U1U3UWF4ekQ0Uk55UjUwT21Hai1hNzhwc2xUb2pfa2lEa2w0SXNXWS1nRkx3dm5STENRakJBSkkwWm90enk1dzdHQTJLaE1YUm03R0JxYnJHbnN2bGZfYVA3aDdHWnVGeUdRTExhQTViMm9jTEVrcmFJaHhlQ2MwS2JUQ3cteHBKWEs0Y1FfdFhQdDJEeXNDVURnWlBXeGVZUmp6dERPZHVTeXdzeENmNFM3eXJJNXlGemRMa0lTWXAxTXhqOHpiTzRSVmZVWHhqOHNSNi0tMzNrLTZ0ZEhzNVdPeUl6ejJoRHpVekMtM09uQkhtVUtiemhmSV93ZEFpdDlGNkN0RmhsS003SlVWbkZsVU5neWl4R3J4S1lTQVByNG9sN2NTLVVySjlwUW9SNkdSVHJGN29yenBHcXh6YUt6cVZqZHJhS25YbXBTS1diYlRVUENOUVhyQmZQOWZUZXFrc1NXcTEyRlR6cTFPcVpjN3NodEtFT0NUSjVSX3lSUUdGbHkyTi1NTHQwd2w4cGNzdkJJUTdYblpfWkUtM21lSDFYZE1DNzcwQ215ZVkwdEh1RTZ2VFBZanU1ME9vNXpNWXQ0N0YwcW1SRHdzN3JZNDBHTE5rUDBJY2dEYjVPMDh5NGR4ZndFcjZKQl9rbnlZQnR5LVNNS0tXWFpSZ3Yxb3RQWVhfOF9NbnAtclg5N0trTExOeHRvdlpfYkpPWm4zb2xvVVlRUmNsbWRhNFR3TUFvOVA5RDhaLURZekJIeXRoY28zdVA0dDI5UndET2F2SGVXVkgzZjFYVlNzb0VOTU53YWpMb1ZqTjluOWVoQ1d1S3oybW9lUzBpdkctVVcwaVI1OWxhWVV3Nk1nZjFuYTlUUjhlVTJBNEo5YWs0a3lRQ3BybmtvSHVQZUpfWnpCQXFqOUk2anNHOWhMeWg4SzRTZVR0N0lZemFJdjhyZU5UQkllenFFX2NfMUt2UDctYlg2NkhONndpQ2t0RzRnMDFfcDhaVGh5T1RpNk1xLUtVVjdlMk11eGV3YlBHaTk5d2NQNjZwdFJHNElGX0hpYWo2WlVXTmlzMTNBaHZvWHA4aHJ5M0QyTWFDMzZUTy1sS2dXUmx3NDBpNmQ0RlhZNXZLOHIzdWRoUDNacUV2bEZNQThPdkVscmZRVkRtVHRjcDFlYXJlNHZSSTdCcS1mNnNicTBIX0wzeWtXczU1cnozQ3pzSzBFMXJvcnk5Z2ctTWRySHlhU0xzbDd0QVEwSXB0dFlTUFpkeVMzOXd4bE9lNHpEQjhfbl9DVVhJSFNBX1F1NGh0Z2pjc3ZuMUs3Y0dERmt5WWszTDlmQ0t6ZndrTGhTb3g1MllrNG41RG05SEhOR2JBZlJGcGtycEhNX1RYem5xRE4xSV9fTUFDVGRqZ3o1OGdiUklJdFJ6bzRncFNsWmlwV0lVNzhyNXZwcFNTVDFxSFpGSFpGejQwZ2V5bnNhSUhSX3BneTUyeC1SSGNhNFF3MkQtR3llWEN6b09rRUdoU04xQldkQlhfcHJkV3RTR2FOeTlPQ3Z1bHZ2VUdDbkQwOXVtcjdJNjFEQTRGZVlPaEtOOGVVc1I0QjJocTNyR28xdnVyNmE2MFhwMjlKaHVMbEhhcm1LbkZJOXlSdHUzNHJVRVltVEFXRUtmeDEyOEpJVUFRUWM4QmJtQ0F0b1VmandRTGhuODRra0IwX2o5eUpGdmNXTjZWdVR2cUljNXRJR1NRc2RFakdZM1luOS1QZl9HZnFmUFRVS0NuelZQVkY2V19nZTdiYUdHa29BSXNBY0RoX01IZVhRYkN5Vm5jbnBFbkNHclNLd0t2WjcxTEZtYldrVkowTnJpdS1BSmZNOFlwSU9XV0xqMjVPVml5UFJLRFlaSGVBZWtnaG54TVVqdFJtd0Z4MndFM1owTjF3dGVpM28yZVZ0QjhHR0pGLUp2YmVFd3F5MUl4STZvc2RxeVFXandKcFpvSDcxUHFlS0c3aHVjS3ZCc1pLRjhaUmx4QkR1SlBjZnBSb3BWWHNpTVNxRUNfUmZLZFdQYmdVUGRYN25ZYWZVMkN4YzM0MGNSaDVTWm5aNklLQ2l1c05kcVRoV2JONkZzb0dsaXo2N1drTDFBNXBKdjBnZTlPdWNuVlcyU2kxdkE5aDdEUXhJOVlZblVIUkZaeGFUTDI1blQxSUxGbG00WXVBM2JXcHJmVjNhdDBBV09DTWZDZU9WeGVkd2p3VXp3ZFM1YjhwNy12dkhxUDBYNlgyMUVLZDd6X1htS3NjZ2J4eWhCRWpDcEIyY2JIbXFfX25UZHpaakdjemNac0IzYjhrbmFUU1B3YnlzYkNoaU0wOW41QnVvM3lKWFlBaEp5NHFxb1RCZUIzSWZIZkI5Ul9CNXhaMmw5QWMzdlV5bGE5WUkybHlHUmxfbU5KRkZaZUJjTzlYeUptMVF2ZUtYWjZXZVRlY2NfVkVSR1Z2MkM4Q3hPSFV5RTVyVEhjOTNOc29odlA0VURFRERGYzYwSFd6VXBYMjJCaEJla1VOMVFLbzI1T2tXT2dmZUdHNnZQYmE0eHJnY2Q0R09oNjhhRm81dzE0emlBcURLcE92b1FOV2o4OWVpZVhrMnQxbHhnWFQ1WHpTOGZEaFQtbmJGdTkyRjZDT081aDQ5QTE3dzhoYWwzSHl3d2F4WHF3bUVvcVhhOUxVRkxtdUFNWUxlbTBDSUlNUURtRmtGUG9KMXRfYUFEbGhpSzRJRzB1T3kzRzVlR016ekt5VGVnNC5WNVc4SlU5bGNmbVpOVVlmTjFVa01B.TrBOk81h8G5jnodBg5ICPNciIsJ0n0VHlWwmT7WAxyVRvsaTVngQIbMy7x2sAMjx-0Nn1n9jrZu_H1qemyxVYJQL0IpqOt_wSiO8j9XmhcvFZ7Etl1PEZWJlTvQRa5WF3RsAFZAWSer4vFkz5gaOMuSkdTvLpj24NR2dfuu5dWoy6ys5kyAyuzEIAB2frgBOQxdujGluFjfFcBiGDuksDeg4Qmo6hFb1ouAtfyUy0PzCmwBd5c0ky-QqXeW4B5XUz8j20BYhoalVQtjS04CyNspg3RXyOqvHV5PfppifZUR8DjVGfPcirnuCk72RHCB7qgWaDJGTi4lCXjHMeB54Dw&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;0414103B864980018088017685946200D290CAE7D7860CA7&quot;,&#xd;
    &quot;deviceType&quot;: &quot;UNKNOWN&quot;,&#xd;
    &quot;deviceNumber&quot;: &quot;380952711598&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TOKEN_CREATED (CARD_TOKENIZED) &lt;" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;CARD_TOKENIZED&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.card_tokenized</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object history = vars.getObject(&quot;msg_history.card_tokenized&quot;).get(0);

String tokenRefId = &quot;DNITHE000${tokenReferenceID}&quot;;
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(tokenRefId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found tokenRefId `&quot; + tokenRefId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TOKEN_CREATED (SEND_NOTIFICATION_TO_CUSTOMER) &lt;" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;SEND_NOTIFICATION_TO_CUSTOMER&apos; ORDER BY id DESC LIMIT 1;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.send_notification_to_customer</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object history = vars.getObject(&quot;msg_history.send_notification_to_customer&quot;).get(0);

String tokenRefId = &quot;DNITHE000${tokenReferenceID}&quot;;
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);

boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(tokenRefId);
//boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;\&quot;code\&quot;:\&quot;0\&quot;&quot;);
if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found tokenRefId `&quot; + tokenRefId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TOKEN_CREATED &lt; token_info" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenRefId = token.get(&quot;token_ref_id&quot;);
boolean equalTokenRefId = tokenRefId.equals(&quot;DNITHE000${tokenReferenceID}&quot;);
if (!equalTokenRefId) {
	Failure = true;
	FailureMessage = &quot;&apos;token_ref_id&apos;: &quot; + tokenRefId;
}

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;A&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

String tokenActiveTokenCount = token.get(&quot;active_token_count&quot;);
if (tokenActiveTokenCount==null) {
	Failure = true;
	FailureMessage = &quot;&apos;active_token_count&apos;: is empty&quot;;
}

String tokenTokenType = token.get(&quot;token_type&quot;);
if (tokenTokenType==null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_type&apos;: is empty&quot;;
}

String tokenPanSource = token.get(&quot;pan_source&quot;);
if (tokenPanSource==null) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_source&apos;: is empty&quot;;
}

String tokenPanInternalGuid = token.get(&quot;pan_internal_guid&quot;);
if (tokenPanInternalGuid==null) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_guid&apos;: is empty&quot;;
}

boolean equalTokenPanInternalGuid = tokenPanInternalGuid.equals(&quot;CardID00000000000004&quot;);
if (!equalTokenPanInternalGuid) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_guid&apos;: &quot; + tokenPanInternalID;
}

String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
boolean equalTokenPanInternalID = tokenPanInternalID.equals(&quot;CardID4&quot;);
if (!equalTokenPanInternalID) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: &quot; + tokenPanInternalID;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate==null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is empty&quot;;
}

Date tokenDigitizeDate = token.get(&quot;digitize_date&quot;);
if (tokenDigitizeDate==null) {
	Failure = true;
	FailureMessage = &quot;&apos;digitize_date&apos;: is empty&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (400 Bad Request - invalid Json payload)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalV5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLmdEZFBCWlVFQ3E5aE9fQWxZMUpmd2dqcEFSdE9BS0NVdnNlZzBGcV9wSVlXbHJLZnViNWFlMDMwc2VicW1zM0w1YXBlTl9MbkN1cUNCMXFjNktBY2JGQ0IteEljdWs5bmdtRExGbE9DMFJtdUxmUVlDTjdXM1ROTmxDQjdGczhyRHBoX1hWTE5HeFc5U0NHVWJ0UTlvaGcxaUdDR3FxclM5QTZLN0N3RXNwVkRJVS1veEplSkxJN29DYzdGMHJnTjR3MWZTVHhsMGdGOXctY3MxMzc1eWpodk1mY0hDLUc0ajlHMzVwRUI0ZlduRVR4amg4SFphMjFiUEFuUlZaRFBUUVpKc2RNVnZRS1h0Y2lQWGxZcWNFTFJrbGRWRTRMV2ItWkgwdmp0WEZKeUJBeDg3V3F6b1FheTVhUHlrM2Q4dnJhcEdJMGFabGlGTXdwdWNfdFA2dy5GUjhMazhUOC0wRlR0Sm01LnMxNnZPaXFGX3hnQkdwUHJJdjNZY0NfdXg1aTk1LW9mVk5yRzJldTAxNVNPUTlGbUlPNEhad3pZMlhaMmZOOGVlN1JraWZ1MXRHUjZZMGZmSTBOaS1SX0wtMjJ6Z0VlV01TRUpnTjhtUjQtMGJtS3ROckktUHZabnBsSFNWaWRLRkNVZndGclZDMm5wdUlzVkNGanhJeFpOZmMyOVJtSm41QnFtVFR1YlhaR3c5ZEhxaG4xTXVlTlExbHhTWmFjZzQ4RzE5REgzZlc0M2M2R1A4UEFSRjBqZTZNc0dDWG9pM1dQSm10R19qOWZkdWF5UU5fS0ROdFlXTlhVUVVVeHpheExTR0ZkWUZ4ellhTVpwWW95U0tLUFY1M09tT1YyaHVvRkFwcDlKZlAtZmU3NEhqVlI0UnBfRzFBcm5veEdiMldQUzFlaDcyUFlfSzVoQW5MNHNBRktfbGpRckg0a3B0UlQ0VDIzM2xqQnZhMEc0Sm41akRqdDhUTDF2R0NsOTJMWGgwR1BqVFNPN1V6UmVHUGVhREhWZEk4S1BTeVR0VHhLbXRCOWtfSnQtNC12emlUYTdlTF8ydDZTWk1TVG9CZV8wX1VoelBKb0RQNGEtMER4R1hac1M5UWhweVpVUHJ6N2ZsUklIUUlSYi1FaTNwZ1U4eEJ0THo2SFdVTXZiRTR4cGdLd3dWN0U4Skp2SmtOZHEwZFRJd1lUdzhtbG5ZYXhMRjNnRGo1ajF2Z2ZIZExaRG9yQV9ZMUtrd0twZ1IteGppWFpLT05xUFdJN1FMUEtvNHdDU3FKNWlTZmFXblVXQ0U1OElKOVBiOWVTeHNfVlFUdXVQRTEyYXRXc3NGdVBrMmd0ekNpMXZTREZWSlpoV0xXQ3c3UU5qY1M3T2RUcG9RZE1IUUxQWWRTV0lxNUdRX1ktTUtEVlMxbW13azU4ZkxpWWM5REtSY040enM5VWtZOEY4SUhRVmQzb3R4c0pmeG9qVmR3Y3cxSjgtTkVTUjFPT0ljMEZBd3FWLVEzcVNhYWgxd1kyb0hnY3F4WHRFU180WDROaEppd2xMWmh3SUExeTlKekx1aXJ2aVV0WHJ6TGJhRXd2STNydGlpU0JNSmxXWWNRMXk0Q1Q5VWh4M0R3cEk1blM4eTNESU1PQXJXU1YtU1FjQ2RMTDNxaWpwQTlvc1Z4TWxtWWNMSmYtRnlQcU5zbHo2RzlVeV82OFlJbXM0NTZZMkoxSkROOFV6SHp2bHVfUWlKek5halQtanhxVzFYLXdCQnpQU2J3RTdvaHNWWE4xV0REcVRlVkppRjFGbGVPZEhvWGRvbFFMTWJTblhaX1owdGl6N0pfZXRvRG83V2JlclJwU3ZNN0JLSUloRTJYUHRRMUx2TzhPT1QwQTNjNzFBcVdqcFpneks4c0NZUHpwOGZLWG56Snd4b3BOcjlxczM1NHc4Sko2UGdCU1g3LXppeS1nbDFPNTI4ZThLOUJCYU5mM19ITWMxdk9xQWRMZjhZVU1XM3N5dnpRODZ4OHVvdVIya3RRZlhoRlVUUnJ4LUhKM052WS1tSUxmUHNteTlBU0JmZXp4aVl4YVdHU1BwWDNfQUpEY2NVU0ZoaUdEdEFrZ3pKc1h0UlcxQUVqNndhbG5RcU83azdpRUNpdENaZ2FkLWFyZnVqNzZkNy1saHdRblFuM21nSmJDWWp1dXJkbmZRUEo5VUR4TXdYTmZzTWl1cVM0U1h4WnJ2QlNMZXhzajFncGFacm52b3NDMWQ5akxPR2lpbl9jMXFJX1U3N0VwOWNBMnE5MnNMem5ESDJ6VkJ0LWVuT3U4STlNSjNfRUhnR3JoTUpsOFRLS3drNVd0RnRrSnhIQnFvS180SzdTcUpoWWsxa3E1LVhtVXp2cXVfTnFJeU5NSmhJakxTa19BancyZUxGYWF1R3ZpWVoxNWc0REhLZnRoMndVekl6MXB1SUZOVDVmcF92ZF9rY1JXWWVzUlFDYVhHdS1QUmlPOGxZZGI1eDhvY3RmNkc3VnpjNE4tRFBYcHdOamF4M3o4LTBueGtOYUhGQnVDQ0czS18yVmxhX3AyYjBGOXNLZEJ2YzNGZ25Ed2hWR2JHUlF3eWNRSGJXeDlXX0sxQWZmYnU4OXV3d3ZvYVlmQmh2OXdrdUlhOXlfUThJV0tLVEdsdGE5aXVKbW9YUy0tZE0zY19DV3JDTzNRQXI4TWRkMlBlOWFHeGllTjBSYXNvS2J0SWxiQXUtQ2s3V0o3VUhuaFJZWlN2R0lFSUR4bGRfTzM1bFpFdkZPdmFhbUpLMjBPYUNROWRjeWpUSGMyeHpveTVaZmZCM2JBZWlaaGJITFNHSEFIak9mb0NPZ1lGaTExY0NFUE90dGxiN25ISHdMODVXUS5YUVp5NklZZnJ1VTRsa3FxSjZoaDBn.OQUGAwAmQVDapzPokmI0au2e6QwQ2fnNFZAcQMjwz8_gH2YWdJnzxD7yk0R24v0ebQ738jBU3gdUYT8lvofwcC0qwnsqrbI6Q2ZryjoXFhCDQLIqv8mrEfllpKcMBLsUcsuL_J32m6vxQ4PQUa_ENnbaEWhDaNm0Gn8csIwfq_7kgrhaVrCRhLTO05aLlXiMulSySeOnWMDM6cBhQ3fEqJMcr2TjQxfltvjzSCIn0V3-s1t-fX4Zi_ZVSRshAsFpPVK39YDm3OVDccM5E5FBu5L3MEoLfdjQcnFYlrnHM0PvStR2HIiReMW66SuXTr753wndoL8FuyfXRUgSSQxk-A&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;samsung - SM-J500FN&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (400 Bad Request)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalV5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLmdEZFBCWlVFQ3E5aE9fQWxZMUpmd2dqcEFSdE9BS0NVdnNlZzBGcV9wSVlXbHJLZnViNWFlMDMwc2VicW1zM0w1YXBlTl9MbkN1cUNCMXFjNktBY2JGQ0IteEljdWs5bmdtRExGbE9DMFJtdUxmUVlDTjdXM1ROTmxDQjdGczhyRHBoX1hWTE5HeFc5U0NHVWJ0UTlvaGcxaUdDR3FxclM5QTZLN0N3RXNwVkRJVS1veEplSkxJN29DYzdGMHJnTjR3MWZTVHhsMGdGOXctY3MxMzc1eWpodk1mY0hDLUc0ajlHMzVwRUI0ZlduRVR4amg4SFphMjFiUEFuUlZaRFBUUVpKc2RNVnZRS1h0Y2lQWGxZcWNFTFJrbGRWRTRMV2ItWkgwdmp0WEZKeUJBeDg3V3F6b1FheTVhUHlrM2Q4dnJhcEdJMGFabGlGTXdwdWNfdFA2dy5GUjhMazhUOC0wRlR0Sm01LnMxNnZPaXFGX3hnQkdwUHJJdjNZY0NfdXg1aTk1LW9mVk5yRzJldTAxNVNPUTlGbUlPNEhad3pZMlhaMmZOOGVlN1JraWZ1MXRHUjZZMGZmSTBOaS1SX0wtMjJ6Z0VlV01TRUpnTjhtUjQtMGJtS3ROckktUHZabnBsSFNWaWRLRkNVZndGclZDMm5wdUlzVkNGanhJeFpOZmMyOVJtSm41QnFtVFR1YlhaR3c5ZEhxaG4xTXVlTlExbHhTWmFjZzQ4RzE5REgzZlc0M2M2R1A4UEFSRjBqZTZNc0dDWG9pM1dQSm10R19qOWZkdWF5UU5fS0ROdFlXTlhVUVVVeHpheExTR0ZkWUZ4ellhTVpwWW95U0tLUFY1M09tT1YyaHVvRkFwcDlKZlAtZmU3NEhqVlI0UnBfRzFBcm5veEdiMldQUzFlaDcyUFlfSzVoQW5MNHNBRktfbGpRckg0a3B0UlQ0VDIzM2xqQnZhMEc0Sm41akRqdDhUTDF2R0NsOTJMWGgwR1BqVFNPN1V6UmVHUGVhREhWZEk4S1BTeVR0VHhLbXRCOWtfSnQtNC12emlUYTdlTF8ydDZTWk1TVG9CZV8wX1VoelBKb0RQNGEtMER4R1hac1M5UWhweVpVUHJ6N2ZsUklIUUlSYi1FaTNwZ1U4eEJ0THo2SFdVTXZiRTR4cGdLd3dWN0U4Skp2SmtOZHEwZFRJd1lUdzhtbG5ZYXhMRjNnRGo1ajF2Z2ZIZExaRG9yQV9ZMUtrd0twZ1IteGppWFpLT05xUFdJN1FMUEtvNHdDU3FKNWlTZmFXblVXQ0U1OElKOVBiOWVTeHNfVlFUdXVQRTEyYXRXc3NGdVBrMmd0ekNpMXZTREZWSlpoV0xXQ3c3UU5qY1M3T2RUcG9RZE1IUUxQWWRTV0lxNUdRX1ktTUtEVlMxbW13azU4ZkxpWWM5REtSY040enM5VWtZOEY4SUhRVmQzb3R4c0pmeG9qVmR3Y3cxSjgtTkVTUjFPT0ljMEZBd3FWLVEzcVNhYWgxd1kyb0hnY3F4WHRFU180WDROaEppd2xMWmh3SUExeTlKekx1aXJ2aVV0WHJ6TGJhRXd2STNydGlpU0JNSmxXWWNRMXk0Q1Q5VWh4M0R3cEk1blM4eTNESU1PQXJXU1YtU1FjQ2RMTDNxaWpwQTlvc1Z4TWxtWWNMSmYtRnlQcU5zbHo2RzlVeV82OFlJbXM0NTZZMkoxSkROOFV6SHp2bHVfUWlKek5halQtanhxVzFYLXdCQnpQU2J3RTdvaHNWWE4xV0REcVRlVkppRjFGbGVPZEhvWGRvbFFMTWJTblhaX1owdGl6N0pfZXRvRG83V2JlclJwU3ZNN0JLSUloRTJYUHRRMUx2TzhPT1QwQTNjNzFBcVdqcFpneks4c0NZUHpwOGZLWG56Snd4b3BOcjlxczM1NHc4Sko2UGdCU1g3LXppeS1nbDFPNTI4ZThLOUJCYU5mM19ITWMxdk9xQWRMZjhZVU1XM3N5dnpRODZ4OHVvdVIya3RRZlhoRlVUUnJ4LUhKM052WS1tSUxmUHNteTlBU0JmZXp4aVl4YVdHU1BwWDNfQUpEY2NVU0ZoaUdEdEFrZ3pKc1h0UlcxQUVqNndhbG5RcU83azdpRUNpdENaZ2FkLWFyZnVqNzZkNy1saHdRblFuM21nSmJDWWp1dXJkbmZRUEo5VUR4TXdYTmZzTWl1cVM0U1h4WnJ2QlNMZXhzajFncGFacm52b3NDMWQ5akxPR2lpbl9jMXFJX1U3N0VwOWNBMnE5MnNMem5ESDJ6VkJ0LWVuT3U4STlNSjNfRUhnR3JoTUpsOFRLS3drNVd0RnRrSnhIQnFvS180SzdTcUpoWWsxa3E1LVhtVXp2cXVfTnFJeU5NSmhJakxTa19BancyZUxGYWF1R3ZpWVoxNWc0REhLZnRoMndVekl6MXB1SUZOVDVmcF92ZF9rY1JXWWVzUlFDYVhHdS1QUmlPOGxZZGI1eDhvY3RmNkc3VnpjNE4tRFBYcHdOamF4M3o4LTBueGtOYUhGQnVDQ0czS18yVmxhX3AyYjBGOXNLZEJ2YzNGZ25Ed2hWR2JHUlF3eWNRSGJXeDlXX0sxQWZmYnU4OXV3d3ZvYVlmQmh2OXdrdUlhOXlfUThJV0tLVEdsdGE5aXVKbW9YUy0tZE0zY19DV3JDTzNRQXI4TWRkMlBlOWFHeGllTjBSYXNvS2J0SWxiQXUtQ2s3V0o3VUhuaFJZWlN2R0lFSUR4bGRfTzM1bFpFdkZPdmFhbUpLMjBPYUNROWRjeWpUSGMyeHpveTVaZmZCM2JBZWlaaGJITFNHSEFIak9mb0NPZ1lGaTExY0NFUE90dGxiN25ISHdMODVXUS5YUVp5NklZZnJ1VTRsa3FxSjZoaDBn.OQUGAwAmQVDapzPokmI0au2e6QwQ2fnNFZAcQMjwz8_gH2YWdJnzxD7yk0R24v0ebQ738jBU3gdUYT8lvofwcC0qwnsqrbI6Q2ZryjoXFhCDQLIqv8mrEfllpKcMBLsUcsuL_J32m6vxQ4PQUa_ENnbaEWhDaNm0Gn8csIwfq_7kgrhaVrCRhLTO05aLlXiMulSySeOnWMDM6cBhQ3fEqJMcr2TjQxfltvjzSCIn0V3-s1t-fX4Zi_ZVSRshAsFpPVK39YDm3OVDccM5E5FBu5L3MEoLfdjQcnFYlrnHM0PvStR2HIiReMW66SuXTr753wndoL8FuyfXRUgSSQxk-A&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;samsung - SM-J500FN&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_CREATED (400 Bad Request - payload is not a valid Json)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832252&quot;,&#xd;
  &quot;walletAccountEmailAddressHash&quot;: &quot;19F6683D83B8A5236E6A9599EB167D46E593ECBCF4717225415EB9F5A8256272&quot;,&#xd;
  &quot;clientWalletAccountID&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;panSource&quot;: &quot;KEY_ENTERED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU16QTVOalV5TUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLmdEZFBCWlVFQ3E5aE9fQWxZMUpmd2dqcEFSdE9BS0NVdnNlZzBGcV9wSVlXbHJLZnViNWFlMDMwc2VicW1zM0w1YXBlTl9MbkN1cUNCMXFjNktBY2JGQ0IteEljdWs5bmdtRExGbE9DMFJtdUxmUVlDTjdXM1ROTmxDQjdGczhyRHBoX1hWTE5HeFc5U0NHVWJ0UTlvaGcxaUdDR3FxclM5QTZLN0N3RXNwVkRJVS1veEplSkxJN29DYzdGMHJnTjR3MWZTVHhsMGdGOXctY3MxMzc1eWpodk1mY0hDLUc0ajlHMzVwRUI0ZlduRVR4amg4SFphMjFiUEFuUlZaRFBUUVpKc2RNVnZRS1h0Y2lQWGxZcWNFTFJrbGRWRTRMV2ItWkgwdmp0WEZKeUJBeDg3V3F6b1FheTVhUHlrM2Q4dnJhcEdJMGFabGlGTXdwdWNfdFA2dy5GUjhMazhUOC0wRlR0Sm01LnMxNnZPaXFGX3hnQkdwUHJJdjNZY0NfdXg1aTk1LW9mVk5yRzJldTAxNVNPUTlGbUlPNEhad3pZMlhaMmZOOGVlN1JraWZ1MXRHUjZZMGZmSTBOaS1SX0wtMjJ6Z0VlV01TRUpnTjhtUjQtMGJtS3ROckktUHZabnBsSFNWaWRLRkNVZndGclZDMm5wdUlzVkNGanhJeFpOZmMyOVJtSm41QnFtVFR1YlhaR3c5ZEhxaG4xTXVlTlExbHhTWmFjZzQ4RzE5REgzZlc0M2M2R1A4UEFSRjBqZTZNc0dDWG9pM1dQSm10R19qOWZkdWF5UU5fS0ROdFlXTlhVUVVVeHpheExTR0ZkWUZ4ellhTVpwWW95U0tLUFY1M09tT1YyaHVvRkFwcDlKZlAtZmU3NEhqVlI0UnBfRzFBcm5veEdiMldQUzFlaDcyUFlfSzVoQW5MNHNBRktfbGpRckg0a3B0UlQ0VDIzM2xqQnZhMEc0Sm41akRqdDhUTDF2R0NsOTJMWGgwR1BqVFNPN1V6UmVHUGVhREhWZEk4S1BTeVR0VHhLbXRCOWtfSnQtNC12emlUYTdlTF8ydDZTWk1TVG9CZV8wX1VoelBKb0RQNGEtMER4R1hac1M5UWhweVpVUHJ6N2ZsUklIUUlSYi1FaTNwZ1U4eEJ0THo2SFdVTXZiRTR4cGdLd3dWN0U4Skp2SmtOZHEwZFRJd1lUdzhtbG5ZYXhMRjNnRGo1ajF2Z2ZIZExaRG9yQV9ZMUtrd0twZ1IteGppWFpLT05xUFdJN1FMUEtvNHdDU3FKNWlTZmFXblVXQ0U1OElKOVBiOWVTeHNfVlFUdXVQRTEyYXRXc3NGdVBrMmd0ekNpMXZTREZWSlpoV0xXQ3c3UU5qY1M3T2RUcG9RZE1IUUxQWWRTV0lxNUdRX1ktTUtEVlMxbW13azU4ZkxpWWM5REtSY040enM5VWtZOEY4SUhRVmQzb3R4c0pmeG9qVmR3Y3cxSjgtTkVTUjFPT0ljMEZBd3FWLVEzcVNhYWgxd1kyb0hnY3F4WHRFU180WDROaEppd2xMWmh3SUExeTlKekx1aXJ2aVV0WHJ6TGJhRXd2STNydGlpU0JNSmxXWWNRMXk0Q1Q5VWh4M0R3cEk1blM4eTNESU1PQXJXU1YtU1FjQ2RMTDNxaWpwQTlvc1Z4TWxtWWNMSmYtRnlQcU5zbHo2RzlVeV82OFlJbXM0NTZZMkoxSkROOFV6SHp2bHVfUWlKek5halQtanhxVzFYLXdCQnpQU2J3RTdvaHNWWE4xV0REcVRlVkppRjFGbGVPZEhvWGRvbFFMTWJTblhaX1owdGl6N0pfZXRvRG83V2JlclJwU3ZNN0JLSUloRTJYUHRRMUx2TzhPT1QwQTNjNzFBcVdqcFpneks4c0NZUHpwOGZLWG56Snd4b3BOcjlxczM1NHc4Sko2UGdCU1g3LXppeS1nbDFPNTI4ZThLOUJCYU5mM19ITWMxdk9xQWRMZjhZVU1XM3N5dnpRODZ4OHVvdVIya3RRZlhoRlVUUnJ4LUhKM052WS1tSUxmUHNteTlBU0JmZXp4aVl4YVdHU1BwWDNfQUpEY2NVU0ZoaUdEdEFrZ3pKc1h0UlcxQUVqNndhbG5RcU83azdpRUNpdENaZ2FkLWFyZnVqNzZkNy1saHdRblFuM21nSmJDWWp1dXJkbmZRUEo5VUR4TXdYTmZzTWl1cVM0U1h4WnJ2QlNMZXhzajFncGFacm52b3NDMWQ5akxPR2lpbl9jMXFJX1U3N0VwOWNBMnE5MnNMem5ESDJ6VkJ0LWVuT3U4STlNSjNfRUhnR3JoTUpsOFRLS3drNVd0RnRrSnhIQnFvS180SzdTcUpoWWsxa3E1LVhtVXp2cXVfTnFJeU5NSmhJakxTa19BancyZUxGYWF1R3ZpWVoxNWc0REhLZnRoMndVekl6MXB1SUZOVDVmcF92ZF9rY1JXWWVzUlFDYVhHdS1QUmlPOGxZZGI1eDhvY3RmNkc3VnpjNE4tRFBYcHdOamF4M3o4LTBueGtOYUhGQnVDQ0czS18yVmxhX3AyYjBGOXNLZEJ2YzNGZ25Ed2hWR2JHUlF3eWNRSGJXeDlXX0sxQWZmYnU4OXV3d3ZvYVlmQmh2OXdrdUlhOXlfUThJV0tLVEdsdGE5aXVKbW9YUy0tZE0zY19DV3JDTzNRQXI4TWRkMlBlOWFHeGllTjBSYXNvS2J0SWxiQXUtQ2s3V0o3VUhuaFJZWlN2R0lFSUR4bGRfTzM1bFpFdkZPdmFhbUpLMjBPYUNROWRjeWpUSGMyeHpveTVaZmZCM2JBZWlaaGJITFNHSEFIak9mb0NPZ1lGaTExY0NFUE90dGxiN25ISHdMODVXUS5YUVp5NklZZnJ1VTRsa3FxSjZoaDBn.OQUGAwAmQVDapzPokmI0au2e6QwQ2fnNFZAcQMjwz8_gH2YWdJnzxD7yk0R24v0ebQ738jBU3gdUYT8lvofwcC0qwnsqrbI6Q2ZryjoXFhCDQLIqv8mrEfllpKcMBLsUcsuL_J32m6vxQ4PQUa_ENnbaEWhDaNm0Gn8csIwfq_7kgrhaVrCRhLTO05aLlXiMulSySeOnWMDM6cBhQ3fEqJMcr2TjQxfltvjzSCIn0V3-s1t-fX4Zi_ZVSRshAsFpPVK39YDm3OVDccM5E5FBu5L3MEoLfdjQcnFYlrnHM0PvStR2HIiReMW66SuXTr753wndoL8FuyfXRUgSSQxk-A&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
    &quot;deviceLanguageCode&quot;: &quot;eng&quot;,&#xd;
    &quot;osType&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;osVersion&quot;: &quot;5.1.1&quot;,&#xd;
    &quot;deviceType&quot;: &quot;MOBILEPHONE_OR_TABLET&quot;,&#xd;
    &quot;deviceManufacturer&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceBrand&quot;: &quot;samsung&quot;,&#xd;
    &quot;deviceModel&quot;: &quot;SM-J500FN&quot;,&#xd;
    &quot;deviceName&quot;: &quot;samsung - SM-J500FN&quot;,&#xd;
    &quot;deviceIPAddressV4&quot;: &quot;91.197.217.52&quot;,&#xd;
    &quot;tokenProtectionMethod&quot;: &quot;SOFTWARE&quot;&#xd;
  },&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_CREATED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;termsAndConditions&quot;: {&#xd;
    &quot;id&quot;: &quot;73208cd0469c4e08a8b8b3c72b41ae13&quot;,&#xd;
    &quot;date&quot;: &quot;2018-03-19T10:44:46.321+0000&quot;&#xd;
  },&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-03-19T10:44:47.123Z&quot;this_is_invalid_json&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_CREATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Token Notification - 3701" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (200 OK)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;OTP_VERIFICATION_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-05-26T08:15:01.123Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832253&quot;,&#xd;
  &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;VERIFICATION_SUCCESS&quot;,&#xd;
  &quot;cardHolderStepupResult&quot;: &quot;CARDHOLDER_STEPUP_OTP&quot;,&#xd;
  &quot;lifeCycleTraceID&quot;: 705431602765649,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (TOKEN_DEVICE_BINDING_RESULT = 200 OK)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_DEVICE_BINDING_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-05-26T08:15:01.123Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832253&quot;,&#xd;
  &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
  	&quot;deviceIndex&quot;: &quot;1&quot;&#xd;
  },&#xd;
  &quot;deviceBindingResult&quot;: &quot;DEVICE_BINDING_APPROVED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (CARDHOLDER_STEPUP_RESULT = 200 OK)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;CARDHOLDER_STEPUP_RESULT&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;CARDHOLDER_STEPUP_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-05-26T08:15:01.123Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3020279313398406854484&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;VERIFICATION_SUCCESS&quot;,&#xd;
  &quot;cardHolderStepupResult&quot;: &quot;CARDHOLDER_STEPUP_OTP&quot;,&#xd;
  &quot;lifeCycleTraceID&quot;: 705431602765649,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJOamswTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5Lmo0akVWckFrWndXZ1lHZlZZRWRvalVwVHdSZ3RXZTh1ZVd6OUdpa0lHVGZfOURXSi1teWZuNGpDQVd5LWxyazVxQ3JEaEJfZ0FPR0pfYXF3a3NnWnJHNW5Ud2FQTnJBVmVZWElJcXo2QkNDT192dk9naWhwbjJFOHR6U3Q5UjI4aG96ckxMRUxtMkJ1R2lEWHh4b3FzQW5oSTdCRmg1WU0yMW4zOTN5OWJrQnJwRndBMTFpTURzUWxGY3RyVWFUYWs3WjQ3Sk9jTEd5VGpWY0RxbkxJb21TVHNYTl80eVZfXzFKeENIQi1VUFQ4Q2lQd1M2U05FdGFYSnY2U2ozWl9DUDd1SWVDRVkxNFR0VDg2MVBGeVJLNzFKTVNKY1NzQXdvMnBIUTVJNWo4X3U1UHpmQkxwMlVLRFFtbFFrTW5TY2NmZnhOalRQT3Z3QkQzMzYxeG8tUS5jcUVmalF2bWRmNWh3d1gyLkpsQjIyLWtid2RTdXRUZUNxZUdDejBnWGhjMTFLbTlkYVJFMDV4d2pjQnVoQk5TSUVQOU5IMURVeVhmNDNXal9zaWVDd29URXdVTDE3V3pGVDNQWVZsV2lWT2dWbUwyUDl3ZmRXaUM3VEhNSmhUZVlkaF9iOC0xVUdYQkEyTW1tQjQzVG1EYm9EM3RydUM4dnpBby1KMklEOFBaR0h0eUJ1Zmx3LUdJVE41clZXcXYwMkZ4cFZyaEhrR0k3XzZWUWNscHFiSGlEc3o5bmRwVzBxQ2ZPWDRzeDA1aV9zb19rd3RJUGdtcGZaVDJjdnRnM2dUUE5ZSE5FWnFXeXRDWU1jaURuLW9xc1FrTzhhSXdhVHpkOWhHb0ZmY2lpSTBobzVIdjRZSDlCS1ZmY1FnSTI4WGVrNURrM3lCdEEuT1REQ2ZEaGZ4SF9WaFRMZF80QXVBQQ.YN2UfaTt62TmyP0kDAsDJITJYHyCl7-8riMUZY6K-wZLQA_I3SvaDCrI-T--KcY5ioEzAEf3o25o2VQiufdx0Ovzfzb1j9s64kpqi7L0FgPaJYm409CYKkL8gf6dltTSyx0ocwwH_LvnmWgTsSd0V5C74C9E7OcS0jgU_Gy8qlfqW_a37Y6Y4fCN58P_gowkdbIgjRnPv0DphRx0_EuGcDoDeXhe2OlTnQOntAQLwKRCeUmHotJcBR1Uez10ZKgbgcHViOOoQuO72waO_fpl7MxKOTkaRJQ4WqBOuXCMF6sl3M7k9tpncgElffSBJD-F_RmdQ2m3txbDP8eiRCbBRw&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (CARDHOLDER_STEPUP_RESULT = 200 OK) test-2" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;CARDHOLDER_STEPUP_RESULT&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;CARDHOLDER_STEPUP_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-05-26T08:15:01.123Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832253&quot;,&#xd;
  &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
  	&quot;deviceIndex&quot;: &quot;1&quot;&#xd;
  },&#xd;
  &quot;deviceBindingResult&quot;: &quot;DEVICE_BINDING_APPROVED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;cardHolderStepupResult&quot;: &quot;CARDHOLDER_STEPUP_OTP&quot;,&#xd;
  &quot;lifeCycleTraceID&quot;: 705431602765649,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (TOKEN_DEVICE_BINDING_REMOVED without encryptedData)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_DEVICE_BINDING_REMOVED&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-05-26T08:15:01.123Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832253&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
  	&quot;deviceIndex&quot;: &quot;1&quot;&#xd;
  },&#xd;
  &quot;deviceBindingResult&quot;: &quot;DEVICE_BINDING_REMOVED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
&quot;encryptedData&quot;:&quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRZd01qSXpOekkxTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaU1FbFJRVmhCUlVOWlVWQlFUa2RITlRWTVV6TXhNelpZYVZweFNrTnFaME4yVm5NelFUSkNjRVY0ZUVGR1RHSkJZeUo5LkZ6UnN6QnlXSmljd3phRVlHTUJQVHFiMHJlS0dJa29PV3FUT1dFTm12WmhFN0Vnclh1dXUxLWJoMU5RMlNUbWZDczZkdWxva3JFeXpENDVpQ2x2UTdLd2dsWkwxbXBQdnRfS3hkYXl3YUJHV0FNYURQOTRCVDVVbERPSXpEXzhTUk5ra185Z19qcm5yU3ZFWkh2OEFXYXNIYzdXT3lWeXVoeHNTd2gtaGxpWGtsTDkyU1ZrbGNJNUYtek5xNUQybFQ3YlFIeDdUakU5d0JDbVNVMmdFejVaZGl6LWJQd004dnp6Qzh1aXBKMUthWnpidGZvZGFOc0dfOUxHR3RGSXZiS0NJN3AwOEFGM0lJVWdFa2Q1NFpLR3pld3pXLUhkajI5Qlc0WUdud1dCVS03Y2Z0eTFHT0tnUWx2TUE4RFdkZm5YOEd3ajdtNmNpYmtxclRENzQ1QS5KSEVvSF96eE9KSHVvWlVlLnNMdngxMWpaNXpPTjdUMmlkcEVmUm5RRjFyUW1tTGd3REtIUkwwbEh0QlZteVVwTGV1Sk5wWEtlNW1sQzJSU05pdjZOM2t4Q0pBODFKT25TdU9LY2g1TTEzOEdDM00tdUpFWDQ5UXRFckJ5LXROZnl1bEdmQXRFRVI3UWp3UG5JWk1SX3prN3VHZ1I0YWNEUTdLTDgyYTVKS0Uyc3h0YnlWRlQ4V2ttWWY4S0dKTW4yajZrZzhTS21TRmtUOWtCc0VubkRacnpOUHhuNHA4ZmJoMWNvWmVuVDVHRERtcWRLLVk0WlUzWmtBN3hCV3llekV5UXZ3c0VHUjhOaktxd0laVUtaMW4yUnF2akp1RGRGNVdWdTJmQS4yZWNIME40MmNBd0I4VUQ1dnh0bXRB.KNhdSLzm6epE6-4GTs3X4g2IB9Z8FK5TfKayzvvowN9q_MVuymtJFOysQcFwOY-2SSiV4l46Q5KCdr8AS2CqKhCeUYtb1HiCFYAcr4U4YDQ55S1XIy7_1wYGe05HzzrgZWFNwiBeHG3DQ-VONiC0FG6GHwZshlnAE9MsNQxAuBCIrxcb0meNKayenE7QIUnY6Mdi1UC61xH_XRnmQ93ShN6rWoi7ZSKsX4jkcUa48KEX7UBBViRmkb80Durmp_Qzt8IdN0MadlQUpTZ0-q-1P0QBmQK7IfVPrBvO-xq0JlGQ5EQl7Zz3qN_OILZhqta5LxUaoyfAaH1Yl09-KvEpfg&quot;&#xd;
&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (TOKEN_DEVICE_BINDING_RESULT = 200 OK) --tokenInfo.token, --tokenInfo.tokenStatus" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_DEVICE_BINDING_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-05-26T08:15:01.123Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832253&quot;,&#xd;
  &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
  	&quot;deviceIndex&quot;: &quot;1&quot;&#xd;
  },&#xd;
  &quot;deviceBindingResult&quot;: &quot;DEVICE_BINDING_ISSUER_APP&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNU5UZzNOVGMxTlN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LklxVDJwTmRmUkc1ZVpyUWk2a0UtTmw3RVdKbDlTanFfNi1qZHdlaS1KTUxwaGpoelB0bU9sZ1NwS2pfUHVJeFIxOHQwNUVmX0NhVWM5VEE0V3hmd0otRWlPbGNaLV9Ya0JmeEJIWkd2blNvZzl0d2ZnaWprU2xkOWZ3aE15QkhvYmpmZW5IeU92TVA4TU5wTW52LUNtbDhXTkotMzlmSkdTUUhrS0huS3hfcDFSaXhJY2s5aEpoMHNoVVpNZnA3Z2dEUmFxaWFOUmtjb2lCOGRKN3NjQVRIVGFTX3RTdFFNVlM5cmtWZHRKMUxaYmhzNVBzcjZTTHVFbXVXUnpOSzY2am1IdWNMUE1qWEpfcFJFMmlSYWVmMl9mTnp5Mk5Hd04xV2RyXzJvRFNWcElfcjUxSXFwTE9SYzRmaEdPbWk1NWRNeGk2SkxoY2tBQjZNSWpPbzA3dy44R09DeVFWUjF0YkM1YmFPLjdvcWw4ZGx5NVAtanp1VkZWaHVIeURzNF9pb3lHaHJPQ1d6MkRFXzZGa25OLWR6SDhIcEZIbHNEQzI2VWJuaWo1d3Q2Z1JCalVMYlBVMGlQTktDYjdJakJxd1Zpckg3UWJobFNaLXZPTWRWaVNuT0didnJSWGxjRVVPeW5HbGUzbENxUV9wbkFTWlBFRjBqbVR0MlRWMEhEOVhFdUc4cVpBeTA3VnVndGItODBpOWl2Y0N5aUZLV1dnWG1zVFBSX0R0UWxyQ3FFY1h5Q0U1bU8tRVFvTUtGVnZ4T1hiNUpnNDZWNG9EeEx1UkdhVnZqbkNOaGZyZUh2X2dNakwxUE9ROTlEVGpMRjFnLjNTdFVQcVYxcDE1Mk9GanlEYlVNS3c.cAI83hlBgFE0BHrsMd_8b_A7rkEsETto5cCONyymPYALwlQsh6IBrMcU_IhzQ-g_0cHaMa9EMVcMAjahLVtY5ysm1yzNTiz81RZFfmCeWlCSyFjad6R1JvZL8nuL7ge5EORV3FVuca22KQh1iUoz3iDNSFdMkWNoNmNoUUtF95QwHRB_1i0Xi46ZCMnEpi736wWg4iGMLJPG8KDaQdvc5Dw4O8cp07gej8YqZLtRenNWolImJIHaOPkjnygsu58dur6mU2uGKW9jJfohk6EbleVk6-3ELbd0_nQsHIBP3ievx_QP5N_6KqkHNKmlGoWo3jDhs1vjIHzZFns2ZFJ93A&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (TOKEN_DEVICE_BINDING_RESULT = 200 OK) --tokenInfo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;TOKEN_DEVICE_BINDING_REMOVED&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_DEVICE_BINDING_REMOVED&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-05-26T08:15:01.123Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832253&quot;,&#xd;
  &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
  	&quot;deviceIndex&quot;: &quot;1&quot;&#xd;
  },&#xd;
  &quot;deviceBindingResult&quot;: &quot;DEVICE_BINDING_ISSUER_APP&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJTaWduaW5nS2V5SWRlbnRpZmllciIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVNU5UZzNOakV6TlN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVYwOURObGhGTmt0RldqUldSMG81UzBkQlYwVXhNelJUWm5GSGFUZGFOVkJFU25WRlJYcEtRVkppVHpKWVRXMVhTU0o5LnV0ckVYeEotcm9jbE9RSk1WeHhFRjRzdHNscW1LTkM3MTd6WlZHUEFIRXMyd0VCcERCSFBNU3FlbFZqOUlNRVd4bTFRTk92RFA0TXM4UkhqaDJ4YTU1MzdWVHN2a1E2NldJalJ2N0FPcldURlU5YmVkUkxHcnFCamRzRjczdklpNERhNjdGOTc4Vm94Ul8wUVlhZ3M4ZTQwWU1paUVVY3dTcWpha0h0YzdrOVNXdGtEM0ZnOHhjZG9wMmdGd1cwUEVqdlV3S2lCNUlKdWpCb19MNk0tbFZkdFVWY09oemxOdVpQdFhUODJJek1YSV9RVzVUNG8yWUV4UWNYbFlJeWJidDRBOWw4czdDM1JOS3VvMjRiMURydjhEWm1wMTRMTlBtOTFFcGVQZi1uV19vQzVESG8xVlpQMUtURG9qbGp3NEQybzFGUHp3WUxJdzd0VEhGVTRpUS5kWXl0RGhxNU9IMWZVX3JfLkxzQ21RN2h4R3hLVmNITElEYXJzNjhXNVVQY0RPRERBbU85RUJZUDZBR2oyTGVKV2psV25zSy15YVEzNHVQdW90Z0FTSnBrRGlCaGVWZmpEOExJSFBFcWFsZW8uYlRJSWdHTUh2SWttV00zXy1FT1E0UQ.ZfUHymYPQyp00ixVHuv616sLQxifQzTAHCq1tatsHt5xMJhWKsSfhUX8AbP1tc_S91R1w-5BNapQBjayo5Ky--obvEwfEPUFXshTu6OJx0mIACiVf2qG78O6gwDBTZT_QGv8mYq1Sela-ZUMLPyvqdi0tjnY7aT37BgkovC_VbHG38wJvLb8J27g40Bx-dIjwSw4qYbd6hRDe54R169TGmDct90yvwVDv72PHWC_LqAANmJ239K4V9RZp6gnwkMqKNUjKKVvS__QcUWxoy4EJmtE1pTqkCKjQ6xs36hhi-7kK4PqUMyEVhaPEn2MQf2bIZ6BUIwXHs8FMvyYI5ds9Q&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (TOKEN_DEVICE_BINDING_REMOVED = 200 OK)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_DEVICE_BINDING_REMOVED&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-05-26T08:15:01.123Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832253&quot;,&#xd;
  &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
  	&quot;deviceIndex&quot;: &quot;1&quot;&#xd;
  },&#xd;
  &quot;deviceBindingResult&quot;: &quot;DEVICE_BINDING_APPROVED&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TOKEN_STATUS_UPDATED (TOKEN_STATUS_UPDATED) &lt;" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;TOKEN_STATUS_UPDATED&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.token_status_updated</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object history = vars.getObject(&quot;msg_history.token_status_updated&quot;).get(0);

String tokenRefId = &quot;DNITHE000${tokenReferenceID}&quot;;
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);

boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(tokenRefId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);
if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found tokenRefId `&quot; + tokenRefId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TOKEN_STATUS_UPDATED &lt; token_info" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenRefId = token.get(&quot;token_ref_id&quot;);
boolean equalTokenRefId = tokenRefId.equals(&quot;DNITHE000${tokenReferenceID}&quot;);
if (!equalTokenRefId) {
	Failure = true;
	FailureMessage = &quot;&apos;token_ref_id&apos;: &quot; + tokenRefId;
}

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;I&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate==null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is empty&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (400 Bad Request)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;Internal Call to Activate Token&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;DEVICE_PROVISIONING_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-05-26&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832253&quot;,&#xd;
  &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 11 = 200)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;OTP_VERIFICATION_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-13T14:51:58.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;06&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;VERIFICATION_CODE_FAILED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 12 = 200)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;OTP_VERIFICATION_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-13T14:51:58.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;06&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;VERIFICATION_CODE_RETRIES_EXCEEDED&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 21 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;*CUSTOMER_CONFIRMED||CLIENT_USER_ACTION&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_SUSPEND&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-13T15:01:27.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJOemM1T1N3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LlV2V3ctRnNxNmJSMVJUWElHTmcyZUZBbjlGOGUxbS1MYkNlRzM5ZzJidVFkTmJfdTJRSHhBeUkweThhY3lJR1FScWxDWGNyTkp3MGZhcldWMm9yUFo4Q08tM3lQaXNRclNMU3FHcjJqU043dG9vX1MxeTZyWTFpcmhHaWg0U2NKbzFrQk1SZThZUGNCR0V6SUxKQU1La3lNYlV0LU1EVlNja0ZFYlV3dTNOSW9zaExudkg2ZUZvb0pmRnBPYzdGQ1RFOGtCZi1haU1iYzJSdzRUT2F0WXgxRGJTb0xKUWV3Umk5Q0ttd3ZuTk1fV0d1ZFZoaGQtWGNKV3E3LXVPc0NQdHo0XzM2aUdOSFd3M3otWUxHRVJTOVZ2WVdIUXlsRS1MWDktTlhHYXVLdjNBNTFtaUhFWFNFSHBpQ1Q3Z2JDRWpfOWc3ZTFSbDJOeXhxQkR2Q0l2Zy5TSlE3UGJkcjVBZVprSTRhLlZCb21qaWdpM0hySHpDRkVYZzB4bGx3X2hhaDByYlJkZm9ubWF4YlFNV2o3dG1oaHdyMTFDbW04N2NjVFY3VGpkVVluX3RJcUNWOVBMVWItd21RcG9LWnRSX3N6d0Q2V2E0WEtlVGhUUkZwVVlocUx1YUVXbXB1SkV0Ukx1bkxHVmZINUQxdUZGSEVjZTI2RHA2a0dDelR6cE4zRndLZmJNYk1kdVl2eHJkTUM1cldCQzRYWTJYdW5lRmdWbWk3SGI3dzh4djNuMENOcHZhNEEyMk1seHNNdWg2RlU4VFFmeksxWnRPellFWnR0MTJJUFFkdHp1VjNzbl9wRGlyYnR5ZHktYmFhLWlqVld0T0JteGw1N21acjZOSE94dGp4Y2kxcTE5MXNnWWRhd2RQLUdCdzBCU3NxRTZETkFZQS40aHRMOU92M2hRaTQ5R256aUgxcnV3.0CmT2gLNZLH7k4Zp3qMhnIzw0ubQQbIL-FAVZDqrOL9nJW3j4RctcFoIbK95LBzD32llkTWqHryN44hmWVJq1DPkQbw5qROn5SF_NpL2hkCWWByHNhu8zQukN9UDNz669ouPscb4CLMhgJpJAN5jZDpplD0xMzitWNL0TPg0QOvBAh8n8Z1G3Q2dNeT140JES4wPoGqW8MOZUP5_wG4tNUH_o6IOMF-9xBnfQNk9olhER2QfTYgZl_uSW4C4MY3mnlf_fOLm8RbWn2Ga47ah9jQY_NkDl8kGMPA08lNZk1bsr57s2oZ1POlG_iQcD5PmEUPF8XAzMqhhLUoLGeqV-Q&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 23 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;*CUSTOMER_CONFIRMED||CLIENT_USER_ACTION&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_SUSPEND&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-13T15:01:27.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJOemczTUN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LmlvdV91YXp3SVVxRFQ3MExCY20xNUJ2Tjc5Q3g4VW9UT1l0VnBRRkN5bkF2VFgzOXRPa1VvZmxPTnVXMmVISzhOSFowYkRSTXQtNkJlaHBPS1lRMlJZN2hZWTVDS1pVbjk2X3FhWkFhY285dUVXM2F1SEZHUUtKQWVLZF82T2pWVWtod2xCZTB3MWlsSGlZSm5nMVN6RksycTZKanZVU1JNQkgwMnEwN2x1R0IwSlNRZXZmWHVHOWFvUkxkNDM2UWJreXBocFdxUDV2SU5jbVRtNlRYZDVxWXdGU0RlTHc2Q0ZvbDlWekF5NjBETVlaYUUyeVZ5Yk1PdnhTQTRaSU5WcHZEaWZwMmdhdnZMTGRSYjBueDhBcTFvcldMd1RCNkdsazBKZ2laR1lvbjdVWUUwSG1mRjJzUG5abmNRSmczbjhjLS05SmZna0ZtOVlnOTRhRkh0dy5CRVVmSmc0ZmFLVjBJWjdqLktJN0QtVjZaeVRYMnNoYlJYQ2J1UXZ3WHZ6X0JGSjM1YWdnVjlkWkFLQnpLVzNMRUpZM21PbC1ydXM5TzVJczh3b3FnU3JMSk0xMG9lMjRxRzBqdm5MMkg4WXpOT1NEM25WSFdLTzhwUGkxWVRjZjhCYVg1T3UtRDhRa0w1N0pNV2lyLUpZY1NSOThGcjgxRU5TaWNJUlV4M1pvY3daRUFwTjVaOWhwR3d4WTRQS1VIQkVnUU1tZU1aTC1vXzZ4T3hWOHV5UWhJcHFkb19MN1BQT2huUmxsZ0NKVHM3Q2g5QmhnU1N5TThCQm81c0JYaUg3WWNsekdKa1dfMjZId2pZTkUtb0xWM0FVamthSGxzYTJ3NU5DVU8xRU01VUQzOWt5dHFaV21RWE5FZkU5ZFVFTDQzblFOZk9MTE5kVEZkcnEzQzBzOWtKR25FMmF1OUloRS5MTXlPWlBoRHh0MEQ3bjlWSHlmUWFB.b41R8ZXrrDzAqUZBjIE29dVXs-OsJ5W7qHFqpyztin5OQer1z0rTKx9aH_hOe5NMJX_wQEOEyPAw9MSCKGLAcRzO3gG976lfIS8yKpHj6whuQWJdnE5pV9y-gLMzT4hJYV0XSFRPjc_YC2IBXu2_mqENDEt0bV_bQfS0Byh9mkEVrSTp6-u8OyzW2W2QXXovDGcDDLww9jODg3UlQnJgF1_RFcbPyTCqUxVMVX6PRESCwUngTIpl56tSewm1Qxed0gfacToT2cIII4u1-Su2GiOTPDpS4QWBdXexLptMJp1Nf5vBTjS_GKOQiSxrHpcPae7WMBe6hUw4t18DtQYtsw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 24 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;*CUSTOMER_CONFIRMED||CLIENT_USER_ACTION&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_SUSPEND&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-13T15:01:27.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJOemt3TVN3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5LkxqcnRncW5WQnVSMmZjNUVtVG5JSFQ0SUtuTUFRUWJwcERaOExSS080azFNU3VubGxlMmJnbjBLb0lSSVZBTjNEcFROV3NkbHp1T0Q5RGl6enEtcGVEa1lQSExKMUhhWlRyaTFTR0ktOTdqSzgyUkI3SlZYV05ua0VPRzFLUTZYZmlTd0lZejZpQ29aVFZfSWtiU0FXNElLUXctSVNjYWxHS0pEdktvbDQ2bHIzaHRXQkxZSmFmbGp2TkxyV3l4LWZFNXgwcUV6RTNvYTVwaGVtaEYzNi1zZTFiOUFDYzhEMDdmdFduMElhWWxkS2d1TFNYTE9wM3FPZ0tTWlpCdFFQWEN3YXRKa3JKMmlCMFZCYXNMbHVQUUFuaFBkVHYzUXpxb3MxZjJ4WmJhN0NPcy1aSFJnWXNIX29LSUNuWHh0VXM3SDh6eWVmZ0RPS2JlMHlkMlh4US5rM2RsTVV2UlY5TzBYWDJjLmJlYXBkUFU3My1odDdaWWd1Z0tRNEpGZERTNk1VcmZtczYwVERkSS1ucUxJdnc0eXR4VndETzVPcWI0eXVmTlJJcVRBLXQ3Rm9TanhES2hiYkdBWURzdThiVEpnMUozSkd6NERoNVJ5dlZWbkNmZkpmQ2c4endyb1VWMjNFZTZXdWVaRlN3VUtpWGs0bUlXS3hJOGRVeTg2dGJyaTctaHhTQ0tyWVhiZmZaQ21uQjZaVElPLXgta0k3bDd1Q0t4RVc4S0o4ZnVISDZLTURwa20xZmRERTU2QzdER216R01IRlU3RWdBNWowcy1YdkswdkJ4blFuWFZXRU51Qk5zTU5KYzBmUnQ0WXRqYUZMeXVkVlhSMUZLZ1o2WDZTa0xPbmFKNTBMenZZTld1T0RuQmVlMGJ3OWV4aFpkQ0ZGbGJCelZ1eFVibHY3Zy50LXNFMDNmdEREMnFDeWFFVlM4RFVB.Wyh1TmLB_Pnx2EAXwuNmgLX2Wawm185k6ErMG9WO_HSQJ8A4V2Ltm60i-gAqcezdJ6bYvr1dlAB8Tp29paWEdZaF9MTKb9mIUSDaQjlnzBIymiXKj22Q92Qc2w_y-nnuaUYwMKevM6-pwsWJNwMx7G-V3pfNc_zxDCDyFKYrV6Fhp6kUAhKTQQMZ6ixJ5Bnf9pOMkz3swW7AAIHEDZZHnW_8Nve4l0_5hYuFREnqCnSmAQb0YScBxas02FtAJRNJYQtEtVOpUY7e-l0UxmCpblLxvu-ULWXqLbUYDLdc-cO9pLirurJFLV4ejCeVbNr6UE11DZqI0wC70UqRG5yhrg&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 25 = 400) ?" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;Internal Call to Activate Token&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;DEVICE_PROVISIONING_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-05-26T08:15:01.123Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-3017192484534844832253&quot;,&#xd;
  &quot;deviceID&quot;: &quot;oUL7aJtruSi4rUO_WyMe1oF3&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 26 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;TOKEN_ABANDONED&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_ABANDONED&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-13T15:01:27.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 27 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;*CUSTOMER_CONFIRMED||CLIENT_USER_ACTION&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_SUSPEND&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-13T15:01:27.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;99&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 28 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;*CUSTOMER_CONFIRMED||CLIENT_USER_ACTION&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_SUSPEND&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;This is not a timestamp&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 29 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;*CUSTOMER_CONFIRMED||CLIENT_USER_ACTION&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_SUSPEND&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-10-22T16:21:37.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702144400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;185&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 30 = 400)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;*CUSTOMER_CONFIRMED||CLIENT_USER_ACTION&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;TOKEN_SUSPEND&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2018-10-22T16:21:37.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702144400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJGQVNUVEFDSyIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5ERTVORGc0Tml3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVJrRlRWRlJCUTBzaWZRLnNrUVhoenRTalRLb29DMUVQa24wVElQSy1Eb1lwT2ZXN2hVZ1FOcjdMOUVYd185eURCM3dTdmZSeFBvYVFabk1VMUhXRzZ4aFluUk1MTGdJbXI0aDRKX0lKUDMtWmtUdDlpWkYyUG5xTWlaek54ZnB4SU5zeTI0OVc0OXAwcnFJYkdfeTJTVjBIalpuT1RrZ3RDRmFiYS1MTndLemR0Nzd5OS1XeVZjT0RFTTAwWkZsSl9KRFJER0YtNDlHZlFxaF8wUms1cktUOF8wMnJmNnM5bHkxZDhVd1ZsUkhYWG1udS1fUkdsTWNDVkhzTnZMUHpIVXUzTFEwZndaTGJ5T0ppZ1gwWG9qMFNLazJPeEx0UjlYREVJT05uUlhNclhkT0QyR0E1TGVoWGZUd1FfcGVvTUxDT3NaNWlTZ3o5SFJxR2VKOWIzN1NZS0pBQWdlTXJjaEVRdy56a0FaWVRfVml4TmZMMlRFLm01REgxTmhLcXN6N3FuVzFBazNiMjZtMWpYNEFYbGU4QmppZHZPV3BvZzdJMUtmbjN0YTZ3bGE4NGFHZVcwNnV3M2JycTVvUlFyUDNVNDZrV0ZrLV9pZGJGTTdwbWF2OHhmeVlUd1V2OGZSR3lBMVN1VGMzWUJFZE5BcHljQjBQT2JSUGZmVjVRM2NETUVqTFlneGM4clBId0RCSVJwSVBtaGFfVjhxY1dWR2VKbm1QLWp0OXA5WmZ4Yl9GQmdPQlpIY0p3LTc0YzVsazA4TXhBT1dBWWM3Q056ajZxUGNoVkxUdlBnNTBLQVMtSW5WWXVpZ2c0S0dQUTgxaFcwY19DeXNVTzR5NjJsM1BCV0d5QTNFUmNiXy1ucm1XRmRIbjBhTGc1T2NqeWRyTnZZMU1NSTdwemUtTWk4OGpvR0hzY2JHTjlFNjNvVzJKcGw4WE03Unc5RFdtdjMtUkhSeUJQVUFEYjU1OEdnS0hCV0wxRXVqbFRVekR0eloxbjlQVDhrREhsUnJoOW9hMVBHbUJwZFVsRmRrQkk0LUdVVUg1S21zRXc3QmtkVnFTYUpDVkVfSUszMnhDcFI1eEh2Q3VqbEJGc1J2VlhKeDBwa0pwZHRQVkFKOFcxdUM1cGJncGJqMEMtXzRJV0ZvR1BIYzdROU5FQ1M2dVZUSlFxVFpNTVVUa1JSOEVPVkRKV3QxTTMzWGo2eTBMb0V3VXVaaXZXRUMzbDFHd05mSWtzSWdzT1p1cWM2UlBTazVBUjNkWnBST2JueExkcFBLYkNHSW9oSWZMUTYzdktpcC1ubzBQS1FSU0NzWVZmcUhXaVVMbTdBLU1TZUZfajhvVU9fN1RQblExT1daVjJrSzZGbUFVMzJXZTFXaWFLc0lySDZLdFdkSGhERWg5Y2FScWtRcHphbVFlNnRxVXJoMVJmYVY1Sm50YWVfNkZYLUpNQ3pqOHlpUHRiZFBzNlF5VEhyMTgxeUtLMjk3RVpkV3NZVE5pdGl4czcwMGlseUc1TkprakV0N21YWGx3QmpFRlJBaENOcmdmcWNtZzJzRUJ2aVJSdHB1MkdCbGRNR2JSQ1piLWx6cVd5dGZyZVlRVUZWTzRjTFJvZGFsc010Z2Zrc0N2VnRhSlBydFQxWTFzTkFSb3ZwN1F4SDJ3bnF5U0owXzdsMGVDd1Y2VldmRGhXdXdpVElBelkwVDIyN1dGY21XM2NYYlBsMTVWZXQxbExSN0FlQ0ZSNldmRnFVZnV4V3BvN0YyRUdYZ2dZTUU0cTgtMlhiSkRtTHlyLXcwUVVjU2k4S3VWaHQta0lwWm9HZjZtckIyZFUwM0pBZTNoXzVyLV9CTkxGc0F4b1ExX2VnNUlyelJ2aEVSTFhidkE2eFZhX29wajU5VFpWdFRFa09ZbDB0cFRab2drRXJ4Q1FmU3ZKc0V6Y291SWFHaVJ3NDdJelh5Nmx1Z2ZrREZLanBvdm1icWxQSHRNcVE3dl9Bcm1tZXlGb28waUJVRC0zaXU4NVVzeHd4VWpyVy1rUnozMHFKQmVJTVc3cC1JdUdrbkhya2M1eENmTE55bEFPaFp0a010Z3EyZi1qTzBhNjhzUUJKZGRGYUREWXlJejZPNGxvYjMyemlNanFCZTZEcm9wWVhlQ1N2VGdHRlBCeThySE1WMjU2RGE2YVhuVmJVMGNnSExKZHBJLXRHQUowMG8xV19ldWlQMFVSUWVFX3dhS2dYMFh3MnVmLTdZRktwQ1RfcHU3QXlBYWUzemRYUk9ETTFwNTZFWXduM0Mxc01hX3BxOVRTNXMyM0ExMkhnU0J5eVA1aFRtRHJZZWQwSHVwaWZRdFNJUUxYSzAxa3k5dkp2ZEstbkhsdkRVM2FIOXdqRTB3RDkxOFJiMHhCbEFnclU0RlQ3d2Yyc2ZEQWFZUURXSVJhak9zY3lEeGRBa1ZBa21hNndyaE1QY2wwY3pabXA3c2RIVGdVWXA4am91c0pCSFZST0IwNTllczhUTWMwZFY3MW9ubUo0bWhTMV9HWUthT0xXTjd3Ul83MmxuNmh3OFNoZXN3RDMzdmhrX2FLQ2pqM2xZdVQzMlBZN0lxOFltM2I2dWpJZG51Zk9IZkJFUF9JckE2Mk5rVFFKRlVMZmMyZkdDTm5hdXZlRlc2SVQwQ2x6azVneVZwaEduZ1Jlc1hxMGloSXlJcW85NENFWmsybUtzbzRlZllUenJWSDNUVmZtb2VyZV90SU92YXd6TDZfcWtWR2czNUxOaldPeTV0Nk9mZGJYNkItZnNQYWJHSGx3ZDFwTzBDYXJyNXJmaVU3WjlqeDAxcXl5YklBVlJCWTEteTlFeXRQUVB3cDlLTy05dDlIOTRBR0VaTkREMkl3NjNoSVdtX2MxSWlTMEhvLmcxOVYyT0lhNW0tRnB3VHlwSmcya2c.iv75E6RVJrTOU_qblmS_m-af1y2Nj1TfUuGcKj10XqqpZlCAlqLpoVTiHcj9_8wlTr5NSNRSzF-b2Pj9BdrYP9RcCCFRY5dGXo507n_208GCuOUvA1E3Pa98KtnX9HY_xAeWbEn3m7UpvQ9opRq4jE1CJym1gAsc8oOIMP6jrmeQTusKsnfubKzsZqFt4yevi6_uxuNlSTI0-vIm8ZHSr_cIyLSV-pCYDvJ-U-zbzxTz_QklVF1H2uGjzqL0ZLw4JpVfNYWyrV1lAbLAJyYRHju6e-T3mCp2pE_sz5eR5i8cRtd6AqGiMsb4rUh3fFZ4Ifa29LCALP5BBYfiGjYBQw&quot;this_is_invalid_json&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1278 - Case 03 = 200)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;DEVICE_PROVISIONING_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-13T14:47:09.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJOamswTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5Lmo0akVWckFrWndXZ1lHZlZZRWRvalVwVHdSZ3RXZTh1ZVd6OUdpa0lHVGZfOURXSi1teWZuNGpDQVd5LWxyazVxQ3JEaEJfZ0FPR0pfYXF3a3NnWnJHNW5Ud2FQTnJBVmVZWElJcXo2QkNDT192dk9naWhwbjJFOHR6U3Q5UjI4aG96ckxMRUxtMkJ1R2lEWHh4b3FzQW5oSTdCRmg1WU0yMW4zOTN5OWJrQnJwRndBMTFpTURzUWxGY3RyVWFUYWs3WjQ3Sk9jTEd5VGpWY0RxbkxJb21TVHNYTl80eVZfXzFKeENIQi1VUFQ4Q2lQd1M2U05FdGFYSnY2U2ozWl9DUDd1SWVDRVkxNFR0VDg2MVBGeVJLNzFKTVNKY1NzQXdvMnBIUTVJNWo4X3U1UHpmQkxwMlVLRFFtbFFrTW5TY2NmZnhOalRQT3Z3QkQzMzYxeG8tUS5jcUVmalF2bWRmNWh3d1gyLkpsQjIyLWtid2RTdXRUZUNxZUdDejBnWGhjMTFLbTlkYVJFMDV4d2pjQnVoQk5TSUVQOU5IMURVeVhmNDNXal9zaWVDd29URXdVTDE3V3pGVDNQWVZsV2lWT2dWbUwyUDl3ZmRXaUM3VEhNSmhUZVlkaF9iOC0xVUdYQkEyTW1tQjQzVG1EYm9EM3RydUM4dnpBby1KMklEOFBaR0h0eUJ1Zmx3LUdJVE41clZXcXYwMkZ4cFZyaEhrR0k3XzZWUWNscHFiSGlEc3o5bmRwVzBxQ2ZPWDRzeDA1aV9zb19rd3RJUGdtcGZaVDJjdnRnM2dUUE5ZSE5FWnFXeXRDWU1jaURuLW9xc1FrTzhhSXdhVHpkOWhHb0ZmY2lpSTBobzVIdjRZSDlCS1ZmY1FnSTI4WGVrNURrM3lCdEEuT1REQ2ZEaGZ4SF9WaFRMZF80QXVBQQ.YN2UfaTt62TmyP0kDAsDJITJYHyCl7-8riMUZY6K-wZLQA_I3SvaDCrI-T--KcY5ioEzAEf3o25o2VQiufdx0Ovzfzb1j9s64kpqi7L0FgPaJYm409CYKkL8gf6dltTSyx0ocwwH_LvnmWgTsSd0V5C74C9E7OcS0jgU_Gy8qlfqW_a37Y6Y4fCN58P_gowkdbIgjRnPv0DphRx0_EuGcDoDeXhe2OlTnQOntAQLwKRCeUmHotJcBR1Uez10ZKgbgcHViOOoQuO72waO_fpl7MxKOTkaRJQ4WqBOuXCMF6sl3M7k9tpncgElffSBJD-F_RmdQ2m3txbDP8eiRCbBRw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE000${tokenReferenceID}/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (#1302 - otpInfo parse)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;DEVICE_PROVISIONING_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-13T14:47:09.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJOamswTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5Lmo0akVWckFrWndXZ1lHZlZZRWRvalVwVHdSZ3RXZTh1ZVd6OUdpa0lHVGZfOURXSi1teWZuNGpDQVd5LWxyazVxQ3JEaEJfZ0FPR0pfYXF3a3NnWnJHNW5Ud2FQTnJBVmVZWElJcXo2QkNDT192dk9naWhwbjJFOHR6U3Q5UjI4aG96ckxMRUxtMkJ1R2lEWHh4b3FzQW5oSTdCRmg1WU0yMW4zOTN5OWJrQnJwRndBMTFpTURzUWxGY3RyVWFUYWs3WjQ3Sk9jTEd5VGpWY0RxbkxJb21TVHNYTl80eVZfXzFKeENIQi1VUFQ4Q2lQd1M2U05FdGFYSnY2U2ozWl9DUDd1SWVDRVkxNFR0VDg2MVBGeVJLNzFKTVNKY1NzQXdvMnBIUTVJNWo4X3U1UHpmQkxwMlVLRFFtbFFrTW5TY2NmZnhOalRQT3Z3QkQzMzYxeG8tUS5jcUVmalF2bWRmNWh3d1gyLkpsQjIyLWtid2RTdXRUZUNxZUdDejBnWGhjMTFLbTlkYVJFMDV4d2pjQnVoQk5TSUVQOU5IMURVeVhmNDNXal9zaWVDd29URXdVTDE3V3pGVDNQWVZsV2lWT2dWbUwyUDl3ZmRXaUM3VEhNSmhUZVlkaF9iOC0xVUdYQkEyTW1tQjQzVG1EYm9EM3RydUM4dnpBby1KMklEOFBaR0h0eUJ1Zmx3LUdJVE41clZXcXYwMkZ4cFZyaEhrR0k3XzZWUWNscHFiSGlEc3o5bmRwVzBxQ2ZPWDRzeDA1aV9zb19rd3RJUGdtcGZaVDJjdnRnM2dUUE5ZSE5FWnFXeXRDWU1jaURuLW9xc1FrTzhhSXdhVHpkOWhHb0ZmY2lpSTBobzVIdjRZSDlCS1ZmY1FnSTI4WGVrNURrM3lCdEEuT1REQ2ZEaGZ4SF9WaFRMZF80QXVBQQ.YN2UfaTt62TmyP0kDAsDJITJYHyCl7-8riMUZY6K-wZLQA_I3SvaDCrI-T--KcY5ioEzAEf3o25o2VQiufdx0Ovzfzb1j9s64kpqi7L0FgPaJYm409CYKkL8gf6dltTSyx0ocwwH_LvnmWgTsSd0V5C74C9E7OcS0jgU_Gy8qlfqW_a37Y6Y4fCN58P_gowkdbIgjRnPv0DphRx0_EuGcDoDeXhe2OlTnQOntAQLwKRCeUmHotJcBR1Uez10ZKgbgcHViOOoQuO72waO_fpl7MxKOTkaRJQ4WqBOuXCMF6sl3M7k9tpncgElffSBJD-F_RmdQ2m3txbDP8eiRCbBRw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE301911652187007387/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TOKEN_STATUS_UPDATED (tokenInquiry +DeviceInfo)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;messageReason&quot;: &quot;&quot;,&#xd;
  &quot;messageReasonCode&quot;: &quot;DEVICE_PROVISIONING_RESULT&quot;,&#xd;
  &quot;dateTimeOfEvent&quot;: &quot;2019-04-13T14:47:09.000Z&quot;,&#xd;
  &quot;panReferenceID&quot;: &quot;V-5180702149400000000002&quot;,&#xd;
  &quot;deviceID&quot;: &quot;04081D63532C8001433104668993299285458DDCCF87EFA6&quot;,&#xd;
  &quot;actionCode&quot;: &quot;00&quot;,&#xd;
  &quot;activationVerificationResult&quot;: &quot;&quot;,&#xd;
  &quot;encryptedData&quot;: &quot;eyJraWQiOiJ5cHlseXBlbiIsImN0eSI6IkpXRSIsInR5cCI6IkpPU0UiLCJhbGciOiJQUzI1NiJ9.ZXlKMGVYQWlPaUpLVDFORklpd2laVzVqSWpvaVFUSTFOa2REVFNJc0ltbGhkQ0k2TVRVMU5URTJOamswTXl3aVlXeG5Jam9pVWxOQkxVOUJSVkF0TWpVMklpd2lhMmxrSWpvaVZrODVNRWMzTmtGRE1rdE5TbE5XVmpkTFNWWXhNMFYwVUZWU1dIVmhVMUl5Ykc5RVlqZFdZWFIyVVRsWFRURnJUU0o5Lmo0akVWckFrWndXZ1lHZlZZRWRvalVwVHdSZ3RXZTh1ZVd6OUdpa0lHVGZfOURXSi1teWZuNGpDQVd5LWxyazVxQ3JEaEJfZ0FPR0pfYXF3a3NnWnJHNW5Ud2FQTnJBVmVZWElJcXo2QkNDT192dk9naWhwbjJFOHR6U3Q5UjI4aG96ckxMRUxtMkJ1R2lEWHh4b3FzQW5oSTdCRmg1WU0yMW4zOTN5OWJrQnJwRndBMTFpTURzUWxGY3RyVWFUYWs3WjQ3Sk9jTEd5VGpWY0RxbkxJb21TVHNYTl80eVZfXzFKeENIQi1VUFQ4Q2lQd1M2U05FdGFYSnY2U2ozWl9DUDd1SWVDRVkxNFR0VDg2MVBGeVJLNzFKTVNKY1NzQXdvMnBIUTVJNWo4X3U1UHpmQkxwMlVLRFFtbFFrTW5TY2NmZnhOalRQT3Z3QkQzMzYxeG8tUS5jcUVmalF2bWRmNWh3d1gyLkpsQjIyLWtid2RTdXRUZUNxZUdDejBnWGhjMTFLbTlkYVJFMDV4d2pjQnVoQk5TSUVQOU5IMURVeVhmNDNXal9zaWVDd29URXdVTDE3V3pGVDNQWVZsV2lWT2dWbUwyUDl3ZmRXaUM3VEhNSmhUZVlkaF9iOC0xVUdYQkEyTW1tQjQzVG1EYm9EM3RydUM4dnpBby1KMklEOFBaR0h0eUJ1Zmx3LUdJVE41clZXcXYwMkZ4cFZyaEhrR0k3XzZWUWNscHFiSGlEc3o5bmRwVzBxQ2ZPWDRzeDA1aV9zb19rd3RJUGdtcGZaVDJjdnRnM2dUUE5ZSE5FWnFXeXRDWU1jaURuLW9xc1FrTzhhSXdhVHpkOWhHb0ZmY2lpSTBobzVIdjRZSDlCS1ZmY1FnSTI4WGVrNURrM3lCdEEuT1REQ2ZEaGZ4SF9WaFRMZF80QXVBQQ.YN2UfaTt62TmyP0kDAsDJITJYHyCl7-8riMUZY6K-wZLQA_I3SvaDCrI-T--KcY5ioEzAEf3o25o2VQiufdx0Ovzfzb1j9s64kpqi7L0FgPaJYm409CYKkL8gf6dltTSyx0ocwwH_LvnmWgTsSd0V5C74C9E7OcS0jgU_Gy8qlfqW_a37Y6Y4fCN58P_gowkdbIgjRnPv0DphRx0_EuGcDoDeXhe2OlTnQOntAQLwKRCeUmHotJcBR1Uez10ZKgbgcHViOOoQuO72waO_fpl7MxKOTkaRJQ4WqBOuXCMF6sl3M7k9tpncgElffSBJD-F_RmdQ2m3txbDP8eiRCbBRw&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE301911652187007387/tokenChanged?eventType=TOKEN_STATUS_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Pushprovisioning" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createInAppProvisioningData" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;nonceSignature&quot;: &quot;4082f883ae62d0700c283e225ee9d286713ef74456ba1f07376cf17d71bf0be013f926d486619394060ced56030f41f84df916eaab5504e456a8530dc9c821f6ed3e3af62b5d8f3e4a22ca2018670fee4e&quot;,&#xd;
 &quot;certificates&quot;: [&#xd;
    &quot;MIID/TCCA6OgAwIBAgIIGM2CpiS9WyYwCgYIKoZIzj0EAwIwgYAxNDAyBgNVBAMMK0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENBIC0gRzIxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzAeFw0xODA2MDEyMjE0MTVaFw0yMDA2MzAyMjE0MTVaMGwxMjAwBgNVBAMMKWVjYy1jcnlwdG8tc2VydmljZXMtZW5jaXBoZXJtZW50X1VDNi1QUk9EMRQwEgYDVQQLDAtpT1MgU3lzdGVtczETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASzCVyQGX3syyW2aI6nyfNQe+vjjzjU4rLO0ZiWiVZZSmEzYfACFI8tuDFiDLv9XWrHEeX0/yNtGVjwAzpanWb/o4ICGDCCAhQwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBSEtoTMOoZichZZlOgao71I3zrfCzBHBggrBgEFBQcBAQQ7MDkwNwYIKwYBBQUHMAGGK2h0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDMtYXBwbGV3d2RyY2EyMDUwggEdBgNVHSAEggEUMIIBEDCCAQwGCSqGSIb3Y2QFATCB/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxld3dkcmNhMi5jcmwwHQYDVR0OBBYEFI5aYtQKaJCRpvI1Dgh+Ra4x2iCrMA4GA1UdDwEB/wQEAwIDKDASBgkqhkiG92NkBicBAf8EAgUAMAoGCCqGSM49BAMCA0gAMEUCIAY/9gwN/KAAw3EtW3NyeX1UVM3fO+wVt0cbeHL8eM/mAiEAppLm5O/2Ox8uHkxI4U/kU5vDhJA21DRbzm2rsYN+EcQ=&quot;,&#xd;
    &quot;MIIC9zCCAnygAwIBAgIIb+/Y9emjp+4wCgYIKoZIzj0EAwIwZzEbMBkGA1UEAwwSQXBwbGUgUm9vdCBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTQwNTA2MjM0MzI0WhcNMjkwNTA2MjM0MzI0WjCBgDE0MDIGA1UEAwwrQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ0EgLSBHMjEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE3fC3BkvP3XMEE8RDiQOTgPte9nStQmFSWAImUxnIYyIHCVJhysTZV+9tJmiLdJGMxPmAaCj8CWjwENrp0C7JGqOB9zCB9DBGBggrBgEFBQcBAQQ6MDgwNgYIKwYBBQUHMAGGKmh0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDQtYXBwbGVyb290Y2FnMzAdBgNVHQ4EFgQUhLaEzDqGYnIWWZToGqO9SN863wswDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBS7sN6hWDOImqSKmd6+veuv2sskqzA3BgNVHR8EMDAuMCygKqAohiZodHRwOi8vY3JsLmFwcGxlLmNvbS9hcHBsZXJvb3RjYWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwEAYKKoZIhvdjZAYCDwQCBQAwCgYIKoZIzj0EAwIDaQAwZgIxANmxxzHGI/ZPTdDZR8V9GGkRh3En02it4Jtlmr5s3z9GppAJvm6hOyywUYlBPIfSvwIxAPxkUolLPF2/axzCiZgvcq61m6oaCyNUd1ToFUOixRLal1BzfF7QbrJcYlDXUfE6Wg==&quot;&#xd;
    ],&#xd;
    &quot;requestId&quot;: &quot;65e8f88f-a4f1-4919-9e77-3a064bb8cb11&quot;,&#xd;
    &quot;cardholderName&quot;: &quot;FIRSTNAME LASTNAME&quot;,&#xd;
    &quot;expiryMonth&quot;: &quot;12&quot;,&#xd;
    &quot;expiryYear&quot;: &quot;20&quot;,&#xd;
    &quot;pan&quot;: &quot;4193265000000990&quot;,&#xd;
    &quot;nonce&quot;: &quot;9c023092&quot;,&#xd;
    &quot;ips&quot;: &quot;V&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">pushprovisioning-${serverVer}/createInAppProvisioningData</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;); </stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">//def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())
/*
if (response.stepUpMethods[1].identifier != &quot;1&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Failure response identifier &apos;&quot; + response.stepUpMethods[1].identifier + &quot;&apos;&quot;);
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">identifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.stepUpMethods[0].identifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Ping" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ping" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">fasttack-visa-api3-client/health</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">200000</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String status = &quot;\&quot;status\&quot;:\&quot;UP\&quot;&quot;;
String response = SampleResult.getResponseDataAsString();
int countStatusResponse = StringUtils.countMatches(response, status); 

if (countStatusResponse != 6) {
	Failure = true;
	FailureMessage = &quot;Failure response (&quot; + status + &quot;) = &quot; + countStatusResponse;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Card Metadata Update Notification" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CARD_METADATA_UPDATED (VTS - cardMetadataUpdateNotification: SUCCESS)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;taskId&quot;: &quot;9af4cd31-da70-4e1f-b337-cb7f5346f4e7&quot;,&#xd;
  &quot;tokenRefId&quot;: &quot;DNITHE002018070214930026&quot;,&#xd;
  &quot;statusCode&quot;: &quot;SUCCESS&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE002018070214930026/notification?eventType=CARD_METADATA_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CARD_METADATA_UPDATED (VTS - cardMetadataUpdateNotification: SUCCESS.2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;01f6aa8c-8be0-478a-9f45-8d4452effd26&quot;,&#xd;
  &quot;taskId&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
  &quot;tokenRefId&quot;: &quot;DNITHE002018070214930026&quot;,&#xd;
  &quot;statusCode&quot;: &quot;SUCCESS&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE002018070214930026/notification?eventType=CARD_METADATA_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CARD_METADATA_UPDATED (VTS - cardMetadataUpdateNotification: SUCCESS.3)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokenRefId&quot;: &quot;DNITHE002018070214930026&quot;,&#xd;
  &quot;statusCode&quot;: &quot;SUCCESS&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE002018070214930026/notification?eventType=CARD_METADATA_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
//vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CARD_METADATA_UPDATED (VTS - cardMetadataUpdateNotification: errorCode=VSE40003)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;errorCode&quot;: &quot;VSE40003&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE002018070214930026/notification?eventType=CARD_METADATA_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CARD_METADATA_UPDATED (VTS - cardMetadataUpdateNotification: errorCode=VSE40007)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;errorCode&quot;: &quot;VSE40007&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/visa-api3-server-${serverVer}/v2/tokenRequestors/40010030273/tokens/DNITHE002018070214930026/notification?eventType=CARD_METADATA_UPDATED</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;requestID&quot;,&quot;${__RandomString(32, abcdefghijklmnopqrstuvwxyz0123456789)}&quot;);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CARD_METADATA_UPDATED (CARD_METADATA_UPDATED) &lt;" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;TOKEN_STATUS_UPDATED&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.token_status_updated</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">Object history = vars.getObject(&quot;msg_history.token_status_updated&quot;).get(0);

String tokenRefId = &quot;DNITHE000${tokenReferenceID}&quot;;
String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);

boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(tokenRefId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);
if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found tokenRefId `&quot; + tokenRefId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CARD_METADATA_UPDATED &lt; token_info" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DNITHE000${tokenReferenceID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenRefId = token.get(&quot;token_ref_id&quot;);
boolean equalTokenRefId = tokenRefId.equals(&quot;DNITHE000${tokenReferenceID}&quot;);
if (!equalTokenRefId) {
	Failure = true;
	FailureMessage = &quot;&apos;token_ref_id&apos;: &quot; + tokenRefId;
}

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;I&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate==null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is empty&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: visa-api3-server.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/visa-api3-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group (local-test)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="count" elementType="Argument">
              <stringProp name="Argument.name">count</stringProp>
              <stringProp name="Argument.value">${__P(start_count,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
            <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
          </CriticalSectionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="--------------" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (props.get(&quot;count&quot;) == null){
	props.put(&quot;count&quot;, Long.parseLong(vars.get(&quot;count&quot;)));
}

n = props.get(&quot;count&quot;) + 1;
vars.put(&quot;count&quot;, String.valueOf(n));
props.put(&quot;count&quot;, n);

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createEmployee - ${count}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;:&quot;firstName-${count}&quot;,&#xd;
	&quot;lastName&quot;:&quot;lastName-${count}&quot;,&#xd;
	&quot;emailId&quot;:&quot;emailId-${count}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/v1/employees</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">/*
if (props.get(&quot;count&quot;) == null){
//	props.put(&quot;count&quot;, Long.parseLong(vars.get(&quot;count&quot;)));
	props.put(&quot;count&quot;, 1);
}
*/
n = props.get(&quot;count&quot;) + 1;
//vars.put(&quot;count&quot;, String.valueOf(n));
vars.put(&quot;count&quot;, 2);
props.put(&quot;count&quot;, 3);
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
