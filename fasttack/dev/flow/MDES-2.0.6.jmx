<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="serverUrl" elementType="Argument">
            <stringProp name="Argument.name">serverUrl</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logDir" elementType="Argument">
            <stringProp name="Argument.name">logDir</stringProp>
            <stringProp name="Argument.value">~/tools/wildfly-10.1.0/standalone/log/fasttack</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverVer" elementType="Argument">
            <stringProp name="Argument.name">serverVer</stringProp>
            <stringProp name="Argument.value">1.6.0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MDES completed flow: AS - DAC - NSA" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">30</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="correlationID" elementType="Argument">
              <stringProp name="Argument.name">correlationID</stringProp>
              <stringProp name="Argument.value">${__P(start_correlationID,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="PostgreSQL Connection Configuration" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery"></stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">ft_al</stringProp>
            <stringProp name="dbUrl">jdbc:postgresql://192.168.1.115:5432/ft_al</stringProp>
            <stringProp name="driver">org.postgresql.Driver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">ft</stringProp>
            <stringProp name="poolMax">0</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">ft</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="correlationID" elementType="Argument">
                <stringProp name="Argument.name">correlationID</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="false">
            <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
          </CriticalSectionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">n = Long.parseLong(props.get(&quot;correlationID&quot;)) + 1;
props.put(&quot;correlationID&quot;,String.valueOf(n));
vars.put(&quot;correlationID&quot;,String.valueOf(n)); 
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="clear: token_info, cardholder_verification_method" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">--DELETE FROM cardholder_verification_method WHERE token_ref_id=&apos;NotYetAssigned-D${correlationID}&apos;;
--DELETE FROM token_info WHERE token_ref_id=&apos;NotYetAssigned-D${correlationID}&apos;;
--DELETE FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Authorize Service" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (... + CVV2)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quotquot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;748254E104B40751545F53A11ACFFEDB50580B7E7ED77DC05E41981A60E8013825CCED44843B4B2956460B25E64EA7B7A05B195E6C5526FC00011383544C44162F3F0E5426217A25B957B294EEC121E17CFF958097BF9BB476DB13CB8EF97A6922640436EC8EAB7485241D3EF49F9CC1CD76ADB1B3C4533430B56C3D8D08777EFF7CB9ACDFF757622B4A5FF976501A5AC2741B82E50911637D24D07FBCD92FDFF4150115223DC3F61AA03A3C0206A5493746E6FE1D2E9B52AEA36B9F309856D36E3116B5CE20351BDA4368B46D5ACA01F9C69170A97661C30434C362EB2E2DBF906A2A86B76F89241C50480A244B57970D0621F77F0CA9F0153D525A7032F085&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;4C768B2A9585B5E3AB619175BCC95182&quot;&#xd;
    },&#xd;
    &quot;panUniqueReference&quot;: &quot;FWSPMC000000000159f71f703d2141efaf04dd26803f922b&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;accountIdHash&quot;: &quot;5ae9c9890b326bd23bfa9db9672298ae3b10a9388e56ec17a001e191f24572aa&quot;,&#xd;
  &quot;activeTokenCount&quot;: &quot;0&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (... + CVV2) Forbidden" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quotquot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;748254E104B40751545F53A11ACFFEDB50580B7E7ED77DC05E41981A60E8013825CCED44843B4B2956460B25E64EA7B7A05B195E6C5526FC00011383544C44162F3F0E5426217A25B957B294EEC121E17CFF958097BF9BB476DB13CB8EF97A6922640436EC8EAB7485241D3EF49F9CC1CD76ADB1B3C4533430B56C3D8D08777EFF7CB9ACDFF757622B4A5FF976501A5AC2741B82E50911637D24D07FBCD92FDFF4150115223DC3F61AA03A3C0206A5493746E6FE1D2E9B52AEA36B9F309856D36E3116B5CE20351BDA4368B46D5ACA01F9C69170A97661C30434C362EB2E2DBF906A2A86B76F89241C50480A244B57970D0621F77F0CA9F0153D525A7032F085&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;4C768B2A9585B5E3AB619175BCC95182&quot;&#xd;
    },&#xd;
    &quot;panUniqueReference&quot;: &quot;FWSPMC000000000159f71f703d2141efaf04dd26803f922b&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50180879286&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;accountIdHash&quot;: &quot;5ae9c9890b326bd23bfa9db9672298ae3b10a9388e56ec17a001e191f24572aa&quot;,&#xd;
  &quot;activeTokenCount&quot;: &quot;0&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (... + CVV2 + &apos;O&apos;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quot;3D213BDFD458E7E185CC3D72C8DDB8FFB27322D94AAC4701389392FFEC311EF64C0DDC4868871CE8C9B4DDE85F11392DA3C4EFC72E4A1D6B3DDAE070EF8AD974202AD95AA8F9A183D19C4566B05A72146222EEB1D5B347B34E80787E4EFAB74815F0939DEA3BF915B4840A486CB9E4160D2693CADA888DE1AC237D7A8E1AF76F6F8779E996A20C519F04EBD87C2C489676BD2AE2A98E255C0D177607C571EDB4F8D6B889CA2194739AC719F225829B80714706BA885C8C55A1CF943AEB1561C00928F88E48191A927D63936FA44B0C9CDE740182DDF622351C27AC872206300D65344F1322CCD5F7DBEE29C89019747F59CF37DFD85CDCE34B9B27288729896C8C5F5CA171889871D4048CA8FD5AC09C509422786B59F51EDC1CA69837D5231307E5100FF92C9C5ABA1DBBCF1A543C37FE4D6975AB54159CF76BC421E3A8B849BE5ED505E1C05530FAE447B9398FF639E1BC872443A5F4C661987645158F5AE81E1E3A9DCFC2A37C2E05060242A0AC29B59C676D19C1E43D45F362C95F064D38B80D4F437739F7BF6A6225210A7324C9BDBCD723DC63DA14235EE94D093BCE27494B587A86CFAEA5141320A23F86AB0BC92191FADAC4B244F3A618D74D3F7BB229E89EB8D701FD276F493805A3C59E046BEF93C4EE5A8859EF6D6C6E7727CEB211F01875B326654F59DACAE35FDDE6B042F52D93CE171A307147AA6DFD9666C779289B980CA7DE98866E2B441133EDA5B0D9F9FD15677B3D3204B46998C48DFAD0DAE9295E1B43E14D56C6D3BA7FE211DE9B9931B252332AC009C930DBFCE4F4D7777770C8F8CFD6CFD5DFAA2B664A784ED2ADADECBFE67D825A5019169233C93EC3DCF21F92FA0C7C09AD9A5B75767D3B1AD0F20E1E5F1BC68D6EB11FEFDF1B1D4F7538203BD28CA99967B7BCB84D820E7F9E4CDB092E50BA725DC6D590ADDD020ABBB7D51456A8918E8AA91B949DD356F53D93AFF5E66DAD05B9558B2D4DC0E2F350F2C0D2A4DF9E01581FCF7EDF80A033181C24A896F0DB2074C83183341DBB7EA0C8F2CBBEA8EDF37CA45ED161487E688BF81B23F77B795BECD02347406C24BA86F97DBEBDCA1B641745A1C0F5F57D176876C7C94C799585893F6E65587C2C15B9F4EC221DAAD64E868030DEA28FDF876C559D12C21EE544296B356C35A70952FA7817F7075D5B3E1DE48B06E9857011286639D10F19F7C0A511D63643B1911334C5041888EB02A538C9280974D437DAF536EB689C5F2B02E9434DF9874546C5AA887FEA37486FC35361A62CCFCD710475D0E0C77DB1543DA47648130142F1510697EA96BD363692856F20AD69CC708FC34CFBA5569569843FFDC83993F543D02FDD74448BAA0E096EF6F07D582E3A4B47E6952437BE471BE76E575FE7A8F9EE18013F1A8665F49275FB34BC5319122E12DC441809F2CEE28F38C58379F3&quot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;67971c3f825da2739d9bacf6d22514aa74e170cc517f27cedc7613bf32e3ea85&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;A47B3EBDD5A295D249186D8C9C0FC41836BA0EEF55283C651635DA6339058E56026C72180EB892FEDEE57A419AE2243AA2CB25836281159E9CAB8B08FFCD866F391E9BF979D59B27C8182BBCEF33FB9A62B88E8E1B70502D7FA9D009EFE166F607E880081C7C7C940E455F65C07A852A54BE838D61AE2BDC83138CD87AF7A95D562210B79DE7221046E1CEC65CA618DD7AD38FD11B7C0C1103E233E6EF546A17BF3F085D7F767D1AC9C8FFB1174643894626265F8F726B9BF6F22B62C83F54ADDA2057FAF9EA1DA84A36E7432694F75DB3EEC714533F3AC0D6CC6D8997271FE64F8CA0BC2310B973F243D451988C30E67579B05E528DF6F82743D5D1760603DF&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;6417ED607802E4243B58ED2A5C15F262&quot;&#xd;
    },&#xd;
    &quot;panUniqueReference&quot;: &quot;FWSPMC000000000159f71f703d2141efaf04dd26803f922b&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;accountIdHash&quot;: &quot;5ae9c9890b326bd23bfa9db9672298ae3b10a9388e56ec17a001e191f24572aa&quot;,&#xd;
  &quot;activeTokenCount&quot;: &quot;0&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (... + CVV2 + &apos;K&apos;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quot;C84D8F4AA1581304DCEBD3BE666F04EAB25146A2C3E9A2D852BE23AD8BD186EEE641F189AA805EDB789607B60CB8A752661C26A4AF7D2C43403B1A2F8BBE909D2EB75592559A920EE2B7E4BAD10D53D75DF291DBAB9D55625B765A7AB5D2C4FD24305D121AF2B54B37F6764891F23BA5B615ED8C85BA679770A19F310760F46B50AED55D7F19785171078485BB1FF1BE525F6C4F232E452BA2DF73868004CF52CFA080D074E4B869C1703B081D2A4383CAF048BE4C265E5C10E2698D06D02DD313289506A71E77BCBE6A0D9A3C5E01BF0C7C99D139B8198F678899FFF7DBC46D4319A1DE3A95E184E3689E2BA53D7CEF26AEBF56FDD6DCA4E7C69A41B3593FCA8C1654B77BAD94FF49070E921A0B2E9DAA80FCDDF18EB3B898DF8A0C16145F466C7080B91CBCA2E7CDBC24FD1F51F8F7A267203CF48CCC1245BE7C83967713EFCB227EF1E86AB716C3AFF42C07DFC8B6D3FC31D095FF839E4595C3E88EC956897EE33CCDFF61D577260A2F810DE79E4C37E39E12960E8F38B12DA03649B209E25526000DE642A224AA19978EE77EAD9A7E50D49CC71D7CAB6E77C4614F6F101508805398A149E4E901AB7732C044826535CE55B4745760A1B3AE70457CF47F5AFAA702A3827B9F0F11CCB5E5CEA39FE17133A968D77AD0D62C86E4B7951DE67BDE6A7FA23BF7EAECC13A8C3F61F956B1C38A4C664E0A297333BF575F6E66A149CF5671C196A58F62043E4A8F4AFC70FE2E60D7F1D712AE0C5979D2D0C445394AFB109CFB90C2FF9B823D88EE28CE910F902A19270D52D6B80BBF85067D08EEB29FC47638579A34ADB8972D58238D5EDFF069348D96E293B433E5DF314425757EE8544189D3F07D293BA0E97DB1F69DBEBE122776FF51786910A256B0B0597B331B501AEF0664030043D0837A01C489C7F9DDE1B524929F1BC37406F7EE0D3282C5376FD320BE0D9B8C68EDA3FA5DAF36E2BB679F7ADB5356230821088E588F8DC8B49B3EFE63D64E45A1D08095D516165BFF40720366AB1FEE2FFD1FACEB0E77647850D22741B332EA97FC550800D467AC699BAB3B1923547F2FC5A954771C995E9B501C3B9C35F024BF2085ADC007F799AC41B7B70F89E7CB74D4BD900D03A298697A7F821C96D7949B77B3EF5A1A3F2460184092F1B875478738CCD287CEA6006CF19001194C2DE344AF4F2469D2C52BF7939E5CCA41F31E6466D8744DB8CB120F377DF00248E4219D43A393277545ED03936BB8D72A5EB49AB4AD42FBAA2CE741E7998F185A3667D6B0B4EB010032E6515C998FBB81614F05F3305DDF61CAD8E5BAED8D338BC201C41166844AA32DCAC6A95D4BA06F0E9667FFB8F6F80F9E8D223A0060BCE7566292BD45505173499B450CED8802AC2EEF61A2040077347CCA3AEEA13A4493CB0F49D4A4F2F2DAE45C5C6BA7787E247537EADCF7E0D99F9E&quot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;67971c3f825da2739d9bacf6d22514aa74e170cc517f27cedc7613bf32e3ea85&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;1BF3A886A450BFC509C9B4651F22A41F7108EF4A2AB98DD29DDE1A04051FDDEC446E80DC44A813B1FF2881A8BE7DCD76B036B392ED800D82EF0F0957A9258305ACBAA1DD2BCA883FF275C714431FEC206712459F85318FB7B784861C0B339BABAD89401576C7C0AC082F98869EA1696652D7582D42841B840C7BEF6CCE0DD5A1EE6B30CADDF77F798919808117D232D8D74E6EE1094E53A446508B1F4325F67705E811E74D2D5A40F19EEF71D929927B5EE5D0D89D3A01DD23427F8D7E666873CE6531063C13200E8BE32D60C791E79231BD183B2D81FA3CBA50680626B5D44DE91504A1C10ED721493DA2F74B9B74B08A19D36666C96D0292B3D6D38EB84F38&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;097DB0E12024C79FED15FDBFA776D64D&quot;&#xd;
    },&#xd;
    &quot;panUniqueReference&quot;: &quot;FWSPMC000000000159f71f703d2141efaf04dd26803f922b&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;accountIdHash&quot;: &quot;5ae9c9890b326bd23bfa9db9672298ae3b10a9388e56ec17a001e191f24572aa&quot;,&#xd;
  &quot;activeTokenCount&quot;: &quot;0&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (... + CVV2 + &apos;K&apos; - paymentAppInstanceId)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quot;C84D8F4AA1581304DCEBD3BE666F04EAB25146A2C3E9A2D852BE23AD8BD186EEE641F189AA805EDB789607B60CB8A752661C26A4AF7D2C43403B1A2F8BBE909D2EB75592559A920EE2B7E4BAD10D53D75DF291DBAB9D55625B765A7AB5D2C4FD24305D121AF2B54B37F6764891F23BA5B615ED8C85BA679770A19F310760F46B50AED55D7F19785171078485BB1FF1BE525F6C4F232E452BA2DF73868004CF52CFA080D074E4B869C1703B081D2A4383CAF048BE4C265E5C10E2698D06D02DD313289506A71E77BCBE6A0D9A3C5E01BF0C7C99D139B8198F678899FFF7DBC46D4319A1DE3A95E184E3689E2BA53D7CEF26AEBF56FDD6DCA4E7C69A41B3593FCA8C1654B77BAD94FF49070E921A0B2E9DAA80FCDDF18EB3B898DF8A0C16145F466C7080B91CBCA2E7CDBC24FD1F51F8F7A267203CF48CCC1245BE7C83967713EFCB227EF1E86AB716C3AFF42C07DFC8B6D3FC31D095FF839E4595C3E88EC956897EE33CCDFF61D577260A2F810DE79E4C37E39E12960E8F38B12DA03649B209E25526000DE642A224AA19978EE77EAD9A7E50D49CC71D7CAB6E77C4614F6F101508805398A149E4E901AB7732C044826535CE55B4745760A1B3AE70457CF47F5AFAA702A3827B9F0F11CCB5E5CEA39FE17133A968D77AD0D62C86E4B7951DE67BDE6A7FA23BF7EAECC13A8C3F61F956B1C38A4C664E0A297333BF575F6E66A149CF5671C196A58F62043E4A8F4AFC70FE2E60D7F1D712AE0C5979D2D0C445394AFB109CFB90C2FF9B823D88EE28CE910F902A19270D52D6B80BBF85067D08EEB29FC47638579A34ADB8972D58238D5EDFF069348D96E293B433E5DF314425757EE8544189D3F07D293BA0E97DB1F69DBEBE122776FF51786910A256B0B0597B331B501AEF0664030043D0837A01C489C7F9DDE1B524929F1BC37406F7EE0D3282C5376FD320BE0D9B8C68EDA3FA5DAF36E2BB679F7ADB5356230821088E588F8DC8B49B3EFE63D64E45A1D08095D516165BFF40720366AB1FEE2FFD1FACEB0E77647850D22741B332EA97FC550800D467AC699BAB3B1923547F2FC5A954771C995E9B501C3B9C35F024BF2085ADC007F799AC41B7B70F89E7CB74D4BD900D03A298697A7F821C96D7949B77B3EF5A1A3F2460184092F1B875478738CCD287CEA6006CF19001194C2DE344AF4F2469D2C52BF7939E5CCA41F31E6466D8744DB8CB120F377DF00248E4219D43A393277545ED03936BB8D72A5EB49AB4AD42FBAA2CE741E7998F185A3667D6B0B4EB010032E6515C998FBB81614F05F3305DDF61CAD8E5BAED8D338BC201C41166844AA32DCAC6A95D4BA06F0E9667FFB8F6F80F9E8D223A0060BCE7566292BD45505173499B450CED8802AC2EEF61A2040077347CCA3AEEA13A4493CB0F49D4A4F2F2DAE45C5C6BA7787E247537EADCF7E0D99F9E&quot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;67971c3f825da2739d9bacf6d22514aa74e170cc517f27cedc7613bf32e3ea85&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;1BF3A886A450BFC509C9B4651F22A41F7108EF4A2AB98DD29DDE1A04051FDDEC446E80DC44A813B1FF2881A8BE7DCD76B036B392ED800D82EF0F0957A9258305ACBAA1DD2BCA883FF275C714431FEC206712459F85318FB7B784861C0B339BABAD89401576C7C0AC082F98869EA1696652D7582D42841B840C7BEF6CCE0DD5A1EE6B30CADDF77F798919808117D232D8D74E6EE1094E53A446508B1F4325F67705E811E74D2D5A40F19EEF71D929927B5EE5D0D89D3A01DD23427F8D7E666873CE6531063C13200E8BE32D60C791E79231BD183B2D81FA3CBA50680626B5D44DE91504A1C10ED721493DA2F74B9B74B08A19D36666C96D0292B3D6D38EB84F38&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;097DB0E12024C79FED15FDBFA776D64D&quot;&#xd;
    },&#xd;
    &quot;panUniqueReference&quot;: &quot;FWSPMC000000000159f71f703d2141efaf04dd26803f922b&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;accountIdHash&quot;: &quot;5ae9c9890b326bd23bfa9db9672298ae3b10a9388e56ec17a001e191f24572aa&quot;,&#xd;
  &quot;activeTokenCount&quot;: &quot;0&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (... + CVV2 + &apos;M&apos;)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quotquot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;67971c3f825da2739d9bacf6d22514aa74e170cc517f27cedc7613bf32e3ea85&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;25BD355954DA53242114CC237EE32734ACFDDDBF7495D503EDABC6A1FD8B2B6E9A56436D76FE10CB03B22FABA50682903A4FFC29F2FB7E975F94FF2DFBEE747B44CFB472412AC78F484B6AF640CFE82D2E0B821B235F45CA0ABD1CBA2EB8F686874500CB643BE2FBBAE9F95953F15ED557760648C45BD356CBC860AD648D9A0B0E5E805F23B34109E157C49EC089D67296EADEA195AB8EF91476274E97364BEF88A2BBE5BB951273437D7E2FD134D9E8DF92D662D74D1D642325E46AF79BD6B250E9D15881B4FDC14048DBC360A4123EB294FA9948F4A2C901E1E7A62321876AA8E482577A6C61AA052B64584A79608FAEB2731E77EE0A894EE8410E21478802&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;496C7746D6F3F06D44DA4103566AD03F&quot;&#xd;
    },&#xd;
    &quot;panUniqueReference&quot;: &quot;FWSPMC000000000159f71f703d2141efaf04dd26803f922b&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;accountIdHash&quot;: &quot;5ae9c9890b326bd23bfa9db9672298ae3b10a9388e56ec17a001e191f24572aa&quot;,&#xd;
  &quot;activeTokenCount&quot;: &quot;0&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (... – CVV2)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quotquot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;4D4D2F39783A19F3B9E44211DBD420FD7083F7D13D7424A2AC37987018F830EC96417679D6FE56E137C5A5FCD1A29E8E795F96F59941FC518BC716ACF91D44D7033F81DC78000998D36DDD162F8788CFB528036ACA0E1CBFCDA799DA08917CDEB1F754B605381D6BC9A19F657E07E9BAC40D7F23D311AA352239C9A0D4A0460B214FC11B3379F1C071DB8E3A19F04EF085BF69430FA519E362CFA5C83204055E7B5014774E73BBACD6C944282503E58C7599369A70BDE90E0230D462DCFCC561091F56CC4974A0F8FEA1C9ACCD020808E26F499A4FD2A1B80CA604A7924AF55161E2482BEFBA30101C71C33D3D6D8E3D43E300EBF6C3AA7017D3EE1FF0E2CED7&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;4CBD591CF67502DBCAEEEC090EBF26AD&quot;&#xd;
    },&#xd;
    &quot;panUniqueReference&quot;: &quot;FWSPMC000000000159f71f703d2141efaf04dd26803f922b&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;accountIdHash&quot;: &quot;5ae9c9890b326bd23bfa9db9672298ae3b10a9388e56ec17a001e191f24572aa&quot;,&#xd;
  &quot;activeTokenCount&quot;: &quot;0&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (+paymentAppInstanceId)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;327&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;storageTechnology&quot;: &quot;SERVER&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;,&#xd;
      &quot;ECOMMERCE&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &#xd;
  },&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;,&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;panUniqueReference&quot;: &quot;FM4MMC0000173160da5276647cea41bf981e3a67f1d058a4&quot;,&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quotquot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;4D4D2F39783A19F3B9E44211DBD420FD7083F7D13D7424A2AC37987018F830EC96417679D6FE56E137C5A5FCD1A29E8E795F96F59941FC518BC716ACF91D44D7033F81DC78000998D36DDD162F8788CFB528036ACA0E1CBFCDA799DA08917CDEB1F754B605381D6BC9A19F657E07E9BAC40D7F23D311AA352239C9A0D4A0460B214FC11B3379F1C071DB8E3A19F04EF085BF69430FA519E362CFA5C83204055E7B5014774E73BBACD6C944282503E58C7599369A70BDE90E0230D462DCFCC561091F56CC4974A0F8FEA1C9ACCD020808E26F499A4FD2A1B80CA604A7924AF55161E2482BEFBA30101C71C33D3D6D8E3D43E300EBF6C3AA7017D3EE1FF0E2CED7&quot;,&#xd;
      &quot;iv&quot;: &quot;4CBD591CF67502DBCAEEEC090EBF26AD&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (–paymentAppInstanceId)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;327&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;storageTechnology&quot;: &quot;SERVER&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;,&#xd;
      &quot;ECOMMERCE&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &#xd;
  },&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;,&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;panUniqueReference&quot;: &quot;FM4MMC0000173160da5276647cea41bf981e3a67f1d058a4&quot;,&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quot;5194D07309FA479AB73936A16A22C348BC74D8294632936FE5EC087E422087D20960A5FF3D330A6FF8FB12823A8FA901C2A7870F08924FF7E7D8741C5F801FDDFFA065C7A745F1741B280D04908805087969A9AE2646BD98010D147711FAA65607AA23F5C85967CCD4B30F33AA378CED4E44F5CFB9A59842E18B23D178304214D5EB79459D7A93CA052CA7485DCD22358B42E4553AC001FA27D10C81CCD7C5A3B10C102E2C1AA0FB5F658245829AA3D5B1964EE1BA44B9B1D28B7BE9ACDB94BC0E63E0CF2240ADCD412604C2F23AAC771B4DE7A07E92BB193AEF1FC9E0164B836E884B7FE62C72F769C1C27F5303738B4698345E50C5CDAEC2C198A2A052D184F523718124DE57CED4D82853FCF11914F0BC65883D87DC5077C7269C519E86CF86AC8BB94E678CD18630A197D102CC8F7A502D20E5C5725BA25CE144A0D9A4B9722206DAFD3AA2B56E8CC00D4D0A735B407BA197A9BE5CD34A8BF8E1B3E27A1F33040F34AA85D49FF036030A1E9F579C81CC9120FC22167415EFA254E8B3A3992CB4FBCB41C27B87BF046D228771EE5B99BB3CE543C057EC1DCD28760865D90129F729965380F218F69B188D4D89D72735834EB361B7280C63B7308A8EFBB2DE6E89AD65B2D8D61703AA44E2B450AAA99FE12BEFEA6A1D92D68DEAA942974E57CE22D8A71F41BC7431A7D3FA662FF298A934902A8D89E69128A90E277833BB0E30E91E1605DEFE037A71B9BDD99392BB419305949AF17534017E28E19790ADBB04506ACA6D7CEEF602FE292376A4411804C6386155B6084C96F2BCF900051CCBD3EF12F023BAE1B29B01734C3FFD6139B86116464B9BD19804B41404D410C7E9794842C927CD011937B883049B67C9C5AED55B4B010AD8925178787F381C778D2000C0466C85B90183EB76D4B17E178A355E69EEF2D8BCF08650DBAAF87C48871B5BF9327FE9B11F6A058CA0B85CE24F70D3AE46A8B93ACF3B58DDA2688C9FE5FE27BC9862B5050C9276AD17AAEFDB3E009863C8A820B90F4FE20D6CB37BEA5909613499AF4591383615A59A5027D217EAC24B4A3AC3B48E1EDDCE7A853BCB4B4EC2F8D7426DD1AEFCE4287404C539F95B9CF80B632684DD2952F53152352FA232D3F77A542F9B0ED32083A961715FA5C9AD1FA84679B0F6119184F91815CCD52C07722DC3A528F4A9F3B3E7A3A9D179E4EBAE1E31D4847369765A93958C23FE&quot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;4D4D2F39783A19F3B9E44211DBD420FD7083F7D13D7424A2AC37987018F830EC96417679D6FE56E137C5A5FCD1A29E8E795F96F59941FC518BC716ACF91D44D7033F81DC78000998D36DDD162F8788CFB528036ACA0E1CBFCDA799DA08917CDEB1F754B605381D6BC9A19F657E07E9BAC40D7F23D311AA352239C9A0D4A0460B214FC11B3379F1C071DB8E3A19F04EF085BF69430FA519E362CFA5C83204055E7B5014774E73BBACD6C944282503E58C7599369A70BDE90E0230D462DCFCC561091F56CC4974A0F8FEA1C9ACCD020808E26F499A4FD2A1B80CA604A7924AF55161E2482BEFBA30101C71C33D3D6D8E3D43E300EBF6C3AA7017D3EE1FF0E2CED7&quot;,&#xd;
      &quot;iv&quot;: &quot;4CBD591CF67502DBCAEEEC090EBF26AD&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (not found productId)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;0189226461&quot;,&#xd;
  &quot;accountIdHash&quot;: &quot;6B86B273FF34FCE19D6B804EFF5A3F5747ADA4EAA22F1D49C01E52DDB7875B4D&quot;,&#xd;
  &quot;mobileNumberSuffix&quot;: &quot;1234&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;osName&quot;: &quot;IOS&quot;,&#xd;
    &quot;deviceName&quot;: &quot;ABCD Device&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1000.00&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;5&quot;,&#xd;
    &quot;accountScore&quot;: &quot;5&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW_SINCE_LAUNCH&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;activeTokenCount&quot;: &quot;0&quot;,&#xd;
  &quot;tokenType&quot;: &quot;EMBEDDED_SE&quot;,&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;67971c3f825da2739d9bacf6d22514aa74e170cc517f27cedc7613bf32e3ea85&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;3c54b44d49585067c94cfbf357ba03604108e780b75c7f5c070efdac1cb9eb5a2790576b5735eb1ad779057699a009dd293bf34e59fe5e6d8fd97e630cd88a2e882a2cbb406e43034251b60d581946708e5377c16851844b7179b490c943d268343b1b05342362454c9e43414c69aff54cef92fa7608ca07dda1554e2fc39a3aced6e3668593e4bb51225dce9c16f2794558c3cdcdd5ca4da46996d5e7106c39e30ea8cf62c8346fa6dbeb50ddbb36daf1b68f41411fbd9c3b498587f14c02315f5f8dabadbe510cd34c2da257e564d3acb0298564113b41477a9f946bf50929d28a699668c25dd0fef55014223ceb5bf81ee226cf2fc65dc39f97e47568fbd5&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;234d2699e4781e02608502157568dce0&quot;,&#xd;
      &quot;encryptedData&quot;: &quot;712e99c043f56514c0e37c5d2d8b01c52e19e9c7f39f2d8f392877f1bf27b07722c339591c19121d367504c63707c77f97cf9102ff2c8b1ca60c21ac7015c1eb286a1d5172ef440871b65a2ccf01dc4457fb0bb2e22863d670371f7a377efec65c1bfea4b889a4abe9d31f29fbe7bad96afaa75090f6c3b0fc6925442229a0acec2fc1b3f2e163817bd63261a5dd05e1f3921910c3282c573c8ced8df23adfb8eb899ce3ae8417f59798360907d6c871bbd0fc18dff56435fbf37b6290371fe75aa02b000c3f9ae0fc237fad2cbcaab95a71b4580e1409f3522f8eac9fac5703842cce2f0bbef470e4a05b3742e39081f874bc3a109583333c8bdd05bce91e92a2d74267936234c8075271d26fd3420999369df4545d6d5af3dcda2317e8da1246c28c2d36e7e4680a1382f36bb1f366471cf257cec7dee99c13b6b308e04057476b92a09fbacba811ce290405021f1e782904d6abcfa75e588be60e5bf6c9e0ac2cabaa5f8df840f154185e7483c6b9692ffa3dbceb47bd7549332ec469ec4852f73dda9ac95700c3af1017047a5716&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (walletProviderDeviceScore = 1)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;0458470422003&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;osVersion&quot;: &quot;4.4&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;DEVICE_MEMORY&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;osName&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Test Phone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;activeTokenCount&quot;: &quot;1&quot;,&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;,&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;panUniqueReference&quot;: &quot;FTC1MC0000173160fa8d35b3f99944a88473034283d09617&quot;,&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quot;4D9995353B1299B7773AD4380F7A769066DED821300B8F013BA0D5CEEFADA1BBA28C93866928D7A1D80E3137DAB7DA909C5DECBB19128D6A941A533931053F06F8766BFB0391BFC61645BC83674E6098AC6C35D16601C154B295C695FC78876A77A5B7A4DC99E53C3C7E86382120EB7B1F895C7900ED3DB577C367695FC753EC551D8A82C95D24A4210B0E4F02664E69E9B97D78A8E7EC98DFE6C4C441F7D3234B3FDDE763AE50B4BE3D449BF52E5DCD2B7949D921530519DDC6F7CA087FD5CB9480BEE51BD377F554A53684ACC37965A43F61B64305B4111BE7980E1F3260CB6FF6E5092E47BDE3BFA20AAC32D75BB2DABB04826593723A6098488E49B7AFE2898B37A0D9932607B5645BFFE8327B1DAC8716D2E7D717A8DD68057B966C8E18A67E2927EF8070C50A78DC7938F2911DEA0F4FDCDBFA8816B04F0B56D3859E880FFDBF90F1C6113BBA7580BB4F4B7E7479A491B69395866BB135484822A072DA1E2EA4B932E6E367800B739449F82983D75C42DABF02AADC48B070EC97C7D5C808704BF4D79D1FAEBA5771EB8C00C1EF1AAFB26D60E4E981E8CBF569ACE2CA176004BBC68C2EA7B5D21E2F856C7F498C8ABB62B54FF189B552FE56FBE417E6C14544099302E662647453571DC04E53411A35D26E57033C7E0BB32FDD7382C12ACC416ABF1C6F1C3B8FBA232C35D75F51ABEFE6267D20D9CF6DCF67792ECA741AFD6037C7ABA77F557FE293266A6D34A4550E3A7F90F91FBA06926FC1683E86194082E7A05E0113DA85B4D46B1BE3DDDF3D92AE893414928258D5A904D8C4FECBB5905154A01B4CD6CAA314735A79912E1165E9F1318E7C57D3820B8F4AE42855D6445DBE6B51A14781DEF73F9E1A3354C43337D7BE78E17D638544CA6E773067DB05B443046FB0419F06DB35F82ED96CABF8F59F98F2EA11EBDFB50B2A2488BEFD117A8B54C01A2C456D1F62E0E70203F76F9F97EBBCCBC946FE3CC93EBEF246392BD3F12A234984061ABAD3AD76781CA2C6A5974F47869F5F222EDD1E538D6FBAC35BDCD8B91D5BEE9687B5EFDB16471AFEC9FBB4DAD6FD348EF3AD0D184B4B55A55CBC5A4A51AF1BDA3390B6D1AFD9721037EAC1A436EEDEBD4714353348C394A8428519C5281D4EDEBF519798C0E177018D028385DFFFF1CEA670037CAF6985166CF573F16A48E4D623B648A9542E4581B91A3C7F18BAD4EB4BF4B152052F&quot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;0F6ECEC8743427FA7AD01A3BC3EA6A7B9CF6993D48FF6775578C23874A38D392C40987DA5BC0013C6C959354B6D719DA33A40866A76C6C11ACD4D95D39E0CB54EA79F33EEA9E348051DC2DA9C12E8B0019ACB9986CB8F1C0B1B003E83A5306FAADD4F084781ABD9A55D2A35596122BCDF98486987B0500310C0A8DCFD964B73E6F18F5A0F63453CF43A2DECFE3E9A5BBFA3F25B4C4AC5AFF2E9974E0A44563187D462E0C6C6F2F08C34100DD6A99FF6C0EC5743C3CFA6949B12AED9CAC739540F01E7DA9BE7AC24C86E025D4294E045A224F26C49A30D9ECD9A2094D181FF1070AE45A4BD6325103B106FD41414988CAE9E6D0E9A49697CE29DEF224E8D599F5&quot;,&#xd;
      &quot;iv&quot;: &quot;1485C6F615563B8E77A3EAD2AED156C6&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (NullPointerException-)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50100000001&quot;,&#xd;
  &quot;walletId&quot;: &quot;220&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;0458470422003&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;osVersion&quot;: &quot;4.4&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;DEVICE_MEMORY&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;osName&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Test Phone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;activeTokenCount&quot;: &quot;1&quot;,&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;,&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;panUniqueReference&quot;: &quot;FTC1MC0000173160fa8d35b3f99944a88473034283d09617&quot;,&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quot;C27AAAAC68893881EAE3D9FB3B7D2BEC075A3420CCB2DF8F4E01AFC50F7EBFC7DFCDE352ECEF285F1D7E4C89DE293BB475E9BDD0F03228419A7711983BBB2A0D5ADE5FE11553CDE27B53D84AB26BBE103E60DF16B01336044EED54CF2F6D39A80C62161ED0815519445A06A2E5471024C5E6DF6A61A40951C4A7D93ABC29D3EDDAA80010C3D59FE6FB2C908AC2F36EE7D5ED142BB26D25ED8153DC8F21E7DB84D3D05A2DD363A55DAC38B1AAA5976BDE6C2A63422BA7970ABA93CEE53144ED6AD9ED7EBF788E87AA081154679C5F669CEEF7E84F6EF8E2B06D2721F039C75DFBB758D9F8F328578C3EB6045C1A686910E162F8DC7A0D206F2EF3FA649EB13CB80761286E3417D0248EDCB5D0262C09E7363A6946852496DA986463BA18B2A609185E021B2D5948EF94222E9E6C5234FAB7037C03644080F046672A94E8AA17C889CC478C2E156BE8FC360C91B0B0C3E4EA1FA731749B5D706403E07EDB5FF4D7299A6D9A61A4C8B5AF6A799A887A928E2CD2057875A194C571C1E9BA9CF14B40EC6CA0241546C59D082D42D535E2711F3638754D8F4F3C59BBDAF5EC6BC7D075515D8DCA9CB098BF442013EAFC0928A73D20E20060F96F23D7FBF1C1B3CE1DA42894D12C25D61B17741C1C3E55A05803CA8BFEB5EFD727F0BDAD521A10AD5AE233095D58E9467DEE2A3A5EBF82D6C72CF84366F8375380442CF33EE0B1790BCF79653ACEC28DBAF822341F8CCACE08403D651BA73FA89B3DC4EBD2870A63087C88591F83FFE1B3DFD36F82C5A44C110B286A5EC783BC0A3411AA9661E9BDA91B1333DAFEAC5E51345A0DD9E07A5CA451ABBB2CBF96854F29F48A89CB03944D2A90D32FC6D59C58571BDC12A88D779DB9E64C012F3A83B769344FA6101C745EF34DF7B52BCBB53F1951D18633681206855134AEE97E3211EC6F6DF525E770AF355291C5B54B01AFD7AA2E8D8920AE5481EE65D9E818508A6ED36D296D82A46EC145A18324FB94E0E77C15E97FBCE550FCB53923AF5FC200E1F4F5798DD8D6226996171AF47229EEA6BCF52CDDB7897DC7E0695CF7846F7F3C5BB8380ABFBF5CF679F7BEFB674B0077B3B5DD6CC14DF74B777FA5DB46C1B108C78E6848DFBEBE7BC5977D8F0A700C3EB46CA5079D22622D992B5A19C99BB935D8FA5637DF80FC15EC8FA1C269E9E6B1BE937F15EB24D8B4128513D087EDDC7CECFA72586469EEA0855A9838A12BFE13206E594C93991A5275FFADE5EB703D154EFCD49183589470&quot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;748254E104B40751545F53A11ACFFEDB50580B7E7ED77DC05E41981A60E8013825CCED44843B4B2956460B25E64EA7B7A05B195E6C5526FC00011383544C44162F3F0E5426217A25B957B294EEC121E17CFF958097BF9BB476DB13CB8EF97A6922640436EC8EAB7485241D3EF49F9CC1CD76ADB1B3C4533430B56C3D8D08777EFF7CB9ACDFF757622B4A5FF976501A5AC2741B82E50911637D24D07FBCD92FDFF4150115223DC3F61AA03A3C0206A5493746E6FE1D2E9B52AEA36B9F309856D36E3116B5CE20351BDA4368B46D5ACA01F9C69170A97661C30434C362EB2E2DBF906A2A86B76F89241C50480A244B57970D0621F77F0CA9F0153D525A7032F085&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;4C768B2A9585B5E3AB619175BCC95182&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authorizeService (NullPointerException?)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50100000001&quot;,&#xd;
  &quot;walletId&quot;: &quot;220&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;0458470422003&quot;,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;osVersion&quot;: &quot;4.4&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;DEVICE_MEMORY&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;osName&quot;: &quot;ANDROID&quot;,&#xd;
    &quot;deviceName&quot;: &quot;Test Phone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;activeTokenCount&quot;: &quot;1&quot;,&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;,&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;panUniqueReference&quot;: &quot;FTC1MC0000173160fa8d35b3f99944a88473034283d09617&quot;,&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quot;3ca5e3eca159936b49386f2853e667832fb4a9e01ce54ca7b2a5b68b8019e92bf0a189015632a686b23e465de9c4f32fc0390750dcc35b4b55046ce1b3b946d648929a2c51ce9c3290ce468cafec308e8d7605b48273d101f633020bd707f8afdb4ce36bf3111554e6f12d4dbf1d920b5ad422f0e3b7e8b27f0cc44056138ec44c7efaea4b996a5be7aff346344583f83977eca9cf59962a48960de85dd13afdb1704d6021a5be463ff42d977b4d9e7248491353f5aa7dd3f3597727ac5d9c560b3cddc2d0acb049e8d60da1d91128c380ba56d47ebfc8c0d88298aa5be251b75e59eb0a7dfbd8723fc9fd64531c5c205e64d3face966f5a613364188aa6555c0016a95b4d887603d752f486f1dbfed26618b398531bc2621864a3a503cede2949be95ad836ad08a264288e67f2a8e2ad86e7c7ef78192451ffc822158c35cb96736237ac288890cf6e5fdfa93b1c51ce627bd376f377e06f1f7b7c8746078136888599b235e98aaa4cdea821f9b65226e5a205c892dd6a74f1e0502f938d464e69c6ee1b6e60d28906c31c7e07aa399&quot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;283d6b489d1ccf75d044dc57608b5ac8bc3eb1951321137c783791743ec38d3f&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;46a1fa6b1a116690da31d845c31beadc4d66454babd7169d94f531a43495ad0be67fb6b5d18e47373de756856d75f70d9485dcba654e11015251cac16fd3d0870c69102ed3fb76f005fe6c83700aeb5d3f5b7c1e5619457a9444b491fdc4050c6148f61967521ee148296cde4dbdda8e17e310938e7a03b7b26faa87d918a50c7531dedaf0dcd16242699797c93f8ca44da4fa84b64214bd2c75a80d2736cdd702304e79a54436525c347b310ae6d26ecb52e55164002677ffc1402cc5616f5130a1007514a13609cffb2b9c31e0e5f138809136eea06256d74deb2d5e59c485f51e89e2bc56ddbf3d663fb470ec98ded931098e16261c2a883df9ad7d53b0ee&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;caf72ed062447f9a921be1a6db41c1da&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/authorizeService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.responseId != &quot;${requestID}&quot; ) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
}
return;
}


if (response.decision == &quot;DECLINED&quot;) {

	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Something is wrong. The decision is *****DECLINED*****&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="authorizeService &lt; cardholder_verification_method" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM cardholder_verification_method WHERE token_ref_id=&apos;NotYetAssigned-D${correlationID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">cardholder_verification_method</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="authorizeService (CONFIRM_PROVISIONING) &lt;" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;CONFIRM_PROVISIONING&apos; ORDER BY id DESC LIMIT 1;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.confirm_provisioning</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String requestId = vars.get(&quot;requestID&quot;);
Object history = vars.getObject(&quot;msg_history.confirm_provisioning&quot;).get(0);

String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(requestId);
boolean equalHistoryMsgRawOutSoapXml = historyMsgRawOut.contains(&quot;code&lt;/name&gt;&lt;value&gt;0&lt;/value&gt;&lt;/code&quot;);
boolean equalHistoryMsgRawOutRestJson = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found requestID `&quot; + requestId + &quot;`&quot;;
} else {
	boolean equalInDeviceName = historyMsgRawIn.contains(&quot;\&quot;deviceName\&quot;:&quot;);
	if (!equalInDeviceName) {
		Failure = true;
		FailureMessage = &quot;&apos;deviceName&apos;: &quot; + &quot;`&quot; + historyMsgRawIn + &quot;`&quot;;
	}
	if (!equalHistoryMsgRawOutSoapXml &amp;&amp; !equalHistoryMsgRawOutRestJson) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="authorizeService (AVS1) &lt;" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;AVS1&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.avs1</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String requestId = vars.get(&quot;requestID&quot;);
Object history = vars.getObject(&quot;msg_history.avs1&quot;).get(0);

String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(requestId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&lt;/name&gt;&lt;value&gt;000&lt;/value&gt;&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found requestID `&quot; + requestId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="authorizeService &lt; token_info" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;NotYetAssigned-D${correlationID}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int cvmSize = vars.getObject(&quot;cardholder_verification_method&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || cvmSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows &apos;cardholder_verification_method&apos;: &quot; + cvmSize;
}

int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object cvm = vars.getObject(&quot;cardholder_verification_method&quot;).get(0);
Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenRefId = token.get(&quot;token_ref_id&quot;);
boolean equalTokenRefId = tokenRefId.equals(&quot;NotYetAssigned-D${correlationID}&quot;);
if (!equalTokenRefId) {
	Failure = true;
	FailureMessage = &quot;&apos;token_ref_id&apos;: &quot; + tokenRefId;
}

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;I&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus + &quot;ms.&quot;;
}

String cvmPanInternalID = cvm.get(&quot;pan_internal_id&quot;);
String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
boolean equalTokenPanInternalID = tokenPanInternalID.equals(cvmPanInternalID);
if (!equalTokenPanInternalID) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: &quot; + cvmPanInternalID + &quot; = &quot; + tokenPanInternalID;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate!=null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is not empty&quot;;
}

Date tokenDigitizeDate = token.get(&quot;digitize_date&quot;);
if (tokenDigitizeDate==null) {
	Failure = true;
	FailureMessage = &quot;&apos;digitize_date&apos;: is empty&quot;;
} else {
	long timeTokenDigitizeDate = tokenDigitizeDate.getTime();
	long timeNowDiff = new Date().getTime() - 1000;
	boolean equalTokenDigitizeDate = timeNowDiff &lt;= timeTokenDigitizeDate;
	if (!equalTokenDigitizeDate) {
		Failure = true;
		FailureMessage = &quot;&apos;digitize_date&apos;: &quot; + (new Date().getTime() - timeTokenDigitizeDate);
	}	
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: mdes-server.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/mdes-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: issuer-host-sv-client.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/issuer-host-sv-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Deliver Activation Code" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deliverActivationCode" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokenUniqueReference&quot;: &quot;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&quot;,&#xd;
  &quot;correlationId&quot;: &quot;D${correlationID}&quot;,&#xd;
  &quot;activationCode&quot;: &quot;172426&quot;,&#xd;
  &quot;expirationDateTime&quot;: &quot;2018-01-15T12:09:01.123Z&quot;,&#xd;
  &quot;activationMethod&quot;: {&#xd;
    &quot;type&quot;: &quot;TEXT_TO_CARDHOLDER_NUMBER&quot;,&#xd;
    &quot;value&quot;: &quot;*9999&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/deliverActivationCode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
	return;
}}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deliverActivationCode  (correlationId=D100000000001)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokenUniqueReference&quot;: &quot;DTC1MC0000171740bf9605c539fe4c41834100000000001&quot;,&#xd;
  &quot;correlationId&quot;: &quot;D100000000001&quot;,&#xd;
  &quot;activationCode&quot;: &quot;172426&quot;,&#xd;
  &quot;expirationDateTime&quot;: &quot;2018-01-15T12:09:01.123Z&quot;,&#xd;
  &quot;activationMethod&quot;: {&#xd;
    &quot;type&quot;: &quot;TEXT_TO_CARDHOLDER_NUMBER&quot;,&#xd;
    &quot;value&quot;: &quot;*9999&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/deliverActivationCode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
	return;
}}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="deliverActivationCode  (paymentAppInstanceId = off)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokenUniqueReference&quot;: &quot;DM4MMC000017316057e17f98d8ba4e7f99d29f450c694bbc&quot;,&#xd;
  &quot;correlationId&quot;: &quot;D${correlationID}&quot;,&#xd;
  &quot;activationCode&quot;: &quot;123245&quot;,&#xd;
  &quot;expirationDateTime&quot;: &quot;2019-04-22T13:54:29.000Z&quot;,&#xd;
  &quot;activationMethod&quot;: {&#xd;
    &quot;type&quot;: &quot;TEXT_TO_CARDHOLDER_NUMBER&quot;,&#xd;
    &quot;value&quot;: &quot;38X-XXX-XX3342&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-1.3.2/deliverActivationCode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}


if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Unknown error occured&quot;);
	return;
}}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deliverActivationCode (SEND_OTP) &lt;" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;SEND_OTP&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.send_otp</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String requestId = vars.get(&quot;requestID&quot;);
Object history = vars.getObject(&quot;msg_history.send_otp&quot;).get(0);

String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(requestId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found requestID `&quot; + requestId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="deliverActivationCode &lt; token_info" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;I&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

String tokenPanSource = token.get(&quot;pan_source&quot;);
if (tokenPanSource==null) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_source&apos;: is empty&quot;;
}

String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
if (tokenPanInternalID==null) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: is empty&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: mdes-server.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/mdes-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Notify Service Activated" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notifyServiceActivated" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quotquot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;B72A5C212CE14DC122BB95D9B9D80F0FC8CD8F10C42B7B7B6001609184C33DFB8A7F19E40FE9C3F469D795013ADE82ADAC3C23364ED8CD21B2A8750F77388F9D05A79BE4D0080172D33899C9439271ADE61053196853572D248B61FBF3E47326601B45E5E538300D9273EE45391FA6568165B2098D8B6CD0F4F7A8453E554F7DF37F7D341D06B02713059218F07CAC69A5037E7676478DBEFC461C6C4C9DA80AF904505CF017635825C477BF34E29030C077BFC9ACFAB686EBD6B6BB1476802E40079A62B9D6BD38DB9F6917703C7641B0B67D409B4A88EB55B06DF71D6B211D8879452CF4A1056F789940C4A8E3D08205C305A788F3FB215F5B309B39379E1E&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;B106A8D0D6476541949751B05FCFD4CE&quot;&#xd;
    },&#xd;
    &quot;tokenUniqueReference&quot;: &quot;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&quot;,&#xd;
    &quot;panUniqueReference&quot;: &quot;FTC1MC0000171740e6ad4d1863304ca383c2af840bc89b78&quot;&#xd;
  },&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;: &quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;104&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;tokenType&quot;: &quot;EMBEDDED_SE&quot;,&#xd;
  &quot;secureElementId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;accountPanSuffix&quot;: &quot;3579&quot;,&#xd;
  &quot;serviceRequestDateTime&quot;: &quot;2018-11-20T16:57:04.231Z&quot;,&#xd;
  &quot;termsAndConditionsAssetId&quot;: &quot;d781f02e-28a5-4ab1-b1de-2aa39896f725&quot;,&#xd;
  &quot;termsAndConditionsAcceptedTimestamp&quot;: &quot;2018-11-20T16:57:13.321Z&quot;,&#xd;
  &quot;productConfigurationId&quot;: &quot;AlfaMDH&quot;,&#xd;
  &quot;consumerLanguage&quot;: &quot;ru&quot;,&#xd;
  &quot;decision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
  &quot;decisionMadeBy&quot;: &quot;AUTHORIZATION_REQUEST&quot;,&#xd;
  &quot;tokenActivatedDateTime&quot;: &quot;2018-11-20T16:57:51.123Z&quot;,&#xd;
  &quot;numberOfActivationAttempts&quot;: 1,&#xd;
  &quot;numberOfActiveTokens&quot;: 1,&#xd;
  &quot;tokenAssuranceLevel&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/notifyServiceActivated</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">30000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notifyServiceActivated  (–paymentAppInstanceId)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;storageTechnology&quot;: &quot;SERVER&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;,&#xd;
      &quot;ECOMMERCE&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;correlationId&quot;: &quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;327&quot;,&#xd;
  &quot;tokenType&quot;: &quot;CLOUD&quot;,&#xd;
  &quot;accountPanSuffix&quot;: &quot;0149&quot;,&#xd;
  &quot;serviceRequestDateTime&quot;: &quot;2019-04-22T05:56:34.000Z&quot;,&#xd;
  &quot;productConfigurationId&quot;: &quot;gold002&quot;,&#xd;
  &quot;consumerLanguage&quot;: &quot;en&quot;,&#xd;
  &quot;decision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
  &quot;decisionMadeBy&quot;: &quot;AUTHORIZATION_REQUEST&quot;,&#xd;
  &quot;tokenActivatedDateTime&quot;: &quot;2019-04-22T05:56:39.000Z&quot;,&#xd;
  &quot;numberOfActivationAttempts&quot;: 0,&#xd;
  &quot;tokenAssuranceLevel&quot;: 0,&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;tokenUniqueReference&quot;: &quot;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&quot;,&#xd;
    &quot;panUniqueReference&quot;: &quot;FM4MMC0000173160da5276647cea41bf981e3a67f1d058a4&quot;,&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
  &quot;encryptedData&quot; : &quot;48BD77AA5A832C1E1422FF029CD099529F4BCC78753A6D4A4AFD5BFFCF9FDD0AA7C9244593B28C1B3724F9BFF5C654ECEC43DF5B6A599B658F2D4DDCBB5E55011162493B540CA63FFFC2501A1E30643D08B073BF3E78E125E0A8DD8E933798549AC26C0507E605C29CE18DC6FE932D14459B2481D4C9D36D192690C0F3DEACC90B9F8A7170B77D7BCD023DEBCB12A652152F82154C63E6965BFDB4CA3B52D59FD18E0E676D5F6855E095146F150F0CAF70148DC620284611859A4508615222CFA68FB6A28BFBDCADF8D692C5688D5C4EF7929F1F74B7D38FD7DFEC2E27450C9F358D00AAD19FA6A5A410947ADA1215F54BB470140B3038A0F9517C8DA6E47BB1613C95A8DC57295E0161ED341F054054C92FA9402C57FF69D0FCE5DF07654C98985506724F02337D6152CD6BF4E212589CC6B7D283E119F2B311B9328DA5ED8FCB7FA0933BF59800CF561BF758086B4F974D4B2D8EC6C0CC72D0DD7801AB50F8E7C498363B9503B508CCA95DA71C5C2509CC4530A75D34379B8A514CF741041AE20D1DFC8A866B499E0370891533D7E60CA09E9DB29E37BE26160ADA4F664E90AC4D38F983F1DF3A4CF05FFBE1D7E686A851F42E6C4B540DAE4F157AA55B331E22B8A9B71E2B1BB836C5284FA44101601E5F221EB0407D6B9ADB9F73FC7F5919EC02EA9DB788E69EC46CD1FBB339F24FB800BA8FA329443BBFD55EF867B6870E5F85BD10A4E9749842D5A9F6B04CA28B3AAC2BF17891ED3ED888BB1AA48835A7047ECB6DD5A70AB9A329C7F83EAFF6A95D5796ED6BBDFAC5E8651578FA58E787ACC708E7E37E197F92B9EE8290DADFA510976D69F8A397760D7A6D24F4E09221CD2817FE1791839DAB985A4973B40A7C64676433E1A8AC20B469FA6161FF210F1699E7CE0557C896482EF9E5CA3C8FC9B6453982A99D250D516F548E8A173EF2338E1937F7BFFF1739EF335955A318D280D896D1BC855AACD6C4324986F3003376BB622F7F7653CC728CA3570757AA66D8FD8EB5BFAE26B49342E13FD343656B8044AD233BF901D56DA13869F3FA30D5A46ECFD38F5CEAE17C1F7FA3CB593E53A3D60A8AF1B5AAF5C801E80468C21B0DE348044C2569FDEA2E6B67EEEEBC915E7C74A19500927903AD1245719B8C7DD6540CB680BF9884799150242FAFE68CD100F5F94E9A68E5312399C02DC295944E9725FB6E48C4B8AEF19E494CD01859467EF6189B5EA871216027AE686B3B43BB6D0F3CE1F808D3F74E5502D6399127437B811D8DC0053C094D470677D7E2F9AFC1482744C4CD4EC21861B83F4AE10FD66BD17052E4DB9AAD9A1DFAF0CEBC0B342FE1FC679DA38B696993A1824034347C76AE6C15CDF472E46BC6FA3A06B419B3C78ABD16890C1E8FD2931395D5B2C3ACA305DC1E0C0A636600CA185EF595D547A774B95D64757202AC49EE3EFC090459&quot;,&#xd;
                &quot;publicKeyFingerprint&quot; : &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
                &quot;encryptedKey&quot; : &quot;3799C08F4E368140971C591E03F6AD03216B723EF84555C38E4513316823A250CD67F827EBB67E5BFBB3101266C33FE571BD9B6829C6780FDA1E7A15606DCCC2F97D07559BB365FA96132831E8451356849677F2D2749607CA54CB9D6D04688F995FFAF3128EF40737E3C92B3B55E7DD24893A73DC8E79FCC75893BDB631DD34A55C725884CC0F9A52697E861EBDFEA74559DF500F315BFE80B69D09D371ED3F0617865E6DD89C19BC40567C941D44A2521E9CDFF8A21A19CC0A0332FDB27DEAFFB68DFD82ECBBD73947AFC29099938AEBEE76962814C7A5AEAA12515F68BF2056CB0AD3F85B07E325E084A164E9F64E3188543006C41598F126676043446102&quot;,&#xd;
                &quot;iv&quot; : &quot;BEE017905682DA74412C2D7182FB90E8&quot;,&#xd;
                &quot;oaepHashingAlgorithm&quot; : &quot;SHA256&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/notifyServiceActivated</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notifyServiceActivated  (++paymentAppInstanceId)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quotquot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;B72A5C212CE14DC122BB95D9B9D80F0FC8CD8F10C42B7B7B6001609184C33DFB8A7F19E40FE9C3F469D795013ADE82ADAC3C23364ED8CD21B2A8750F77388F9D05A79BE4D0080172D33899C9439271ADE61053196853572D248B61FBF3E47326601B45E5E538300D9273EE45391FA6568165B2098D8B6CD0F4F7A8453E554F7DF37F7D341D06B02713059218F07CAC69A5037E7676478DBEFC461C6C4C9DA80AF904505CF017635825C477BF34E29030C077BFC9ACFAB686EBD6B6BB1476802E40079A62B9D6BD38DB9F6917703C7641B0B67D409B4A88EB55B06DF71D6B211D8879452CF4A1056F789940C4A8E3D08205C305A788F3FB215F5B309B39379E1E&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;B106A8D0D6476541949751B05FCFD4CE&quot;&#xd;
    },&#xd;
    &quot;tokenUniqueReference&quot;: &quot;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&quot;,&#xd;
    &quot;panUniqueReference&quot;: &quot;FTC1MC0000171740e6ad4d1863304ca383c2af840bc89b78&quot;&#xd;
  },&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;: &quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4521C&quot;,&#xd;
  &quot;tokenType&quot;: &quot;EMBEDDED_SE&quot;,&#xd;
  &quot;secureElementId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4521C&quot;,&#xd;
  &quot;accountPanSuffix&quot;: &quot;3579&quot;,&#xd;
  &quot;serviceRequestDateTime&quot;: &quot;2018-11-20T16:57:04.231Z&quot;,&#xd;
  &quot;termsAndConditionsAssetId&quot;: &quot;d781f02e-28a5-4ab1-b1de-2aa39896f725&quot;,&#xd;
  &quot;termsAndConditionsAcceptedTimestamp&quot;: &quot;2018-11-20T16:57:13.321Z&quot;,&#xd;
  &quot;productConfigurationId&quot;: &quot;AlfaMDH&quot;,&#xd;
  &quot;consumerLanguage&quot;: &quot;ru&quot;,&#xd;
  &quot;decision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
  &quot;decisionMadeBy&quot;: &quot;AUTHORIZATION_REQUEST&quot;,&#xd;
  &quot;tokenActivatedDateTime&quot;: &quot;2018-11-20T16:57:51.123Z&quot;,&#xd;
  &quot;numberOfActivationAttempts&quot;: 1,&#xd;
  &quot;numberOfActiveTokens&quot;: 1,&#xd;
  &quot;tokenAssuranceLevel&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/notifyServiceActivated</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notifyServiceActivated  ( tokenInfoService.getOptional( Id ) )" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quot;ED134C924DACD5A465470BF48DEF9E38FAFA04DA209712F854F9C5DECFF1EC4AA9D212B476F9FC86AAFD93C17088104446369D1E783B5E948EF6C31833A7ECC38A5B99445485655A6B3D62E0A488AA0992A21057D04551BEEA9BFD952B6EA810D0D8E93731C8FEB6E4F76BC2EDFCA82DD606A7187E1E80B7F0FC9BA9BF8AA30C263F71FC53064E849948EF76C0978F23D4A908536A562B9AEDF353C50D404EA2485C08B3025467E0A736F06CA9282B6A4B44714F3CFBEA4647C79D917108219389C32A8F9101F4C4FFC65F843C96BA7C22BC3ED9C2D7B452B96C6D22DDEA57F863FF0977EEE74F473CD212FEED8FC8D84197C7370280A2DBC88909D67E44BC8EF91CF6AEE65DC82A5CCE9697BF40352A443CAFD7D7ECD0CDA954717C9CD6B92E73A14692360A2DB12DFD0500A256C272F3B25726D9F8DD79B832C4CB2059C7E00BC3BBB6C3A258FB4760EAFAD64AD2B9F737E88F35DFC3539A09E513497904C3C8C6AB9E5401FDFAEC600E14371031490CA6E75565D216F1C223F40F1FF7C94EE3C2AB13BA8AE0931CE1E142F92295286DAC817B38BD38EAFBC3E60EAC37C16DB4F3FCC0655CCAA1CFA7A856E6F26B6B7C831CAD306287FB9130635E5651C4F7A4DF31050EC7A234E3611E91925783B80B6B0FE52870411CFCA4553C2E73554536D7913CB69D3592DBC4C0BC656C1693714154520DBB9A73E1D93B93EDB061B29ADFAAE16B0EF9E542E7D5A8AAF0EA8D56A101000DE2B8C545EC85C82DF72CBBFDC53431D37B29EB25DCFD2617F3E6A0B992FA46FF4CB2FD58481240D8046AF80C01DF502447FAFE09A7739B8208D1EC613308876737A2B1AE7F47C2158F72139C85F96D758A9BD4849448AA74644F1271092B579D32EE98635D6AE3BE0DD6BFEBBA64F24540F7B4264587704EC3F1E551AA8CEB5C04B28517F5F4B84C065C03EBC0B046F1A52DBA711409CA4856F084BE184C6A77768AC15882E8C470D3E97AD48EB8A49799CC47ADCFA620F3AFCDE17815B0288C10F26CFB90817BC942F3B8BB6CAEB945A126680D642DF2F1F2B2EAB1DE75CBBD79FA02B79CF2E5DB85EB145679E2299636A5E259E6BEB5B653BAC90E860442E28F4B5986EC111D229C5891FA0C20C78CD2B33670C950E3B4BC1F76308292676EF4C7A8CA08B1D63C12EFBD5782254B479D68D9849AB6781C7D6D1B8BB7B073790B94DD16079053588D835C6C4048497A8B731D3702B1FE0FDC05B885850C8A4F7E5B07367D260716E74B23D47E20BAA81D03D90E09181DE86F1296021310A23DF835F9BC2232034220660CF878D1A8449E3330590D68E9343EA7AD5DAAED99142F84CB315B2E2A50CEFB97991980B54FF7D7A22AC386437E8F4A79C2A0AEACFD715DC2F4D2D9BD3EC87F72AF6372B6E4DAE4291698DEDC20CAE2FE3DFF7FABDAA68AB38B90BC6EA2AC70DE&quot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;B72A5C212CE14DC122BB95D9B9D80F0FC8CD8F10C42B7B7B6001609184C33DFB8A7F19E40FE9C3F469D795013ADE82ADAC3C23364ED8CD21B2A8750F77388F9D05A79BE4D0080172D33899C9439271ADE61053196853572D248B61FBF3E47326601B45E5E538300D9273EE45391FA6568165B2098D8B6CD0F4F7A8453E554F7DF37F7D341D06B02713059218F07CAC69A5037E7676478DBEFC461C6C4C9DA80AF904505CF017635825C477BF34E29030C077BFC9ACFAB686EBD6B6BB1476802E40079A62B9D6BD38DB9F6917703C7641B0B67D409B4A88EB55B06DF71D6B211D8879452CF4A1056F789940C4A8E3D08205C305A788F3FB215F5B309B39379E1E&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;B106A8D0D6476541949751B05FCFD4CE&quot;&#xd;
    },&#xd;
    &quot;tokenUniqueReference&quot;: &quot;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&quot;,&#xd;
    &quot;panUniqueReference&quot;: &quot;FTC1MC0000171740e6ad4d1863304ca383c2af840bc89b78&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;: &quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;tokenType&quot;: &quot;EMBEDDED_SE&quot;,&#xd;
  &quot;secureElementId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;accountPanSuffix&quot;: &quot;3579&quot;,&#xd;
  &quot;serviceRequestDateTime&quot;: &quot;2018-11-20T16:57:04.231Z&quot;,&#xd;
  &quot;termsAndConditionsAssetId&quot;: &quot;d781f02e-28a5-4ab1-b1de-2aa39896f725&quot;,&#xd;
  &quot;termsAndConditionsAcceptedTimestamp&quot;: &quot;2018-11-20T16:57:13.321Z&quot;,&#xd;
  &quot;productConfigurationId&quot;: &quot;AlfaMDH&quot;,&#xd;
  &quot;consumerLanguage&quot;: &quot;ru&quot;,&#xd;
  &quot;decision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
  &quot;decisionMadeBy&quot;: &quot;AUTHORIZATION_REQUEST&quot;,&#xd;
  &quot;tokenActivatedDateTime&quot;: &quot;2018-11-20T16:57:51.123Z&quot;,&#xd;
  &quot;numberOfActivationAttempts&quot;: 1,&#xd;
  &quot;numberOfActiveTokens&quot;: 1,&#xd;
  &quot;tokenAssuranceLevel&quot;: 1,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;osName&quot;: &quot;IOS&quot;,&#xd;
    &quot;osVersion&quot;: &quot;7.0.0&quot;,&#xd;
    &quot;imei&quot;: &quot;XXXXXXXXXXXXXXX&quot;,&#xd;
    &quot;serialNumber&quot;: &quot;2846232387&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
    &quot;recommendationStandardVersion&quot;: &quot;1.0&quot;,&#xd;
    &quot;deviceScore&quot;: &quot;1&quot;,&#xd;
    &quot;accountScore&quot;: &quot;1&quot;,&#xd;
    &quot;recommendedDecision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
    &quot;recommendationReasons&quot;: [&#xd;
      &quot;ACCOUNT_TOO_NEW&quot;,&#xd;
      &quot;TOO_MANY_RECENT_ATTEMPTS&quot;,&#xd;
      &quot;OUTSIDE_HOME_TERRITORY&quot;&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/notifyServiceActivated</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notifyServiceActivated  ( tokenInfoService.getOptional( Id ) –walletProviderDecisioningInfo)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;services&quot;: [&#xd;
    &quot;DIGITIZATION&quot;&#xd;
  ],&#xd;
  &quot;fundingAccountInfo&quot;: {&#xd;
    &quot;encryptedPayload&quot;: {&#xd;
      &quot;encryptedData&quot;: &quotquot;,&#xd;
      &quot;publicKeyFingerprint&quot;: &quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;: &quot;B72A5C212CE14DC122BB95D9B9D80F0FC8CD8F10C42B7B7B6001609184C33DFB8A7F19E40FE9C3F469D795013ADE82ADAC3C23364ED8CD21B2A8750F77388F9D05A79BE4D0080172D33899C9439271ADE61053196853572D248B61FBF3E47326601B45E5E538300D9273EE45391FA6568165B2098D8B6CD0F4F7A8453E554F7DF37F7D341D06B02713059218F07CAC69A5037E7676478DBEFC461C6C4C9DA80AF904505CF017635825C477BF34E29030C077BFC9ACFAB686EBD6B6BB1476802E40079A62B9D6BD38DB9F6917703C7641B0B67D409B4A88EB55B06DF71D6B211D8879452CF4A1056F789940C4A8E3D08205C305A788F3FB215F5B309B39379E1E&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;: &quot;SHA256&quot;,&#xd;
      &quot;iv&quot;: &quot;B106A8D0D6476541949751B05FCFD4CE&quot;&#xd;
    },&#xd;
    &quot;tokenUniqueReference&quot;: &quot;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&quot;,&#xd;
    &quot;panUniqueReference&quot;: &quot;FTC1MC0000171740e6ad4d1863304ca383c2af840bc89b78&quot;&#xd;
  },&#xd;
  &quot;correlationId&quot;: &quot;D${correlationID}&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;50110030273&quot;,&#xd;
  &quot;walletId&quot;: &quot;103&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;tokenType&quot;: &quot;EMBEDDED_SE&quot;,&#xd;
  &quot;secureElementId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;accountPanSuffix&quot;: &quot;3579&quot;,&#xd;
  &quot;serviceRequestDateTime&quot;: &quot;2018-11-20T16:57:04.231Z&quot;,&#xd;
  &quot;termsAndConditionsAssetId&quot;: &quot;d781f02e-28a5-4ab1-b1de-2aa39896f725&quot;,&#xd;
  &quot;termsAndConditionsAcceptedTimestamp&quot;: &quot;2018-11-20T16:57:13.321Z&quot;,&#xd;
  &quot;productConfigurationId&quot;: &quot;AlfaMDH&quot;,&#xd;
  &quot;consumerLanguage&quot;: &quot;ru&quot;,&#xd;
  &quot;decision&quot;: &quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
  &quot;decisionMadeBy&quot;: &quot;AUTHORIZATION_REQUEST&quot;,&#xd;
  &quot;tokenActivatedDateTime&quot;: &quot;2018-11-20T16:57:51.123Z&quot;,&#xd;
  &quot;numberOfActivationAttempts&quot;: 1,&#xd;
  &quot;numberOfActiveTokens&quot;: 1,&#xd;
  &quot;tokenAssuranceLevel&quot;: 1,&#xd;
  &quot;deviceInfo&quot;: {&#xd;
    &quot;isoDeviceType&quot;: &quot;21&quot;,&#xd;
    &quot;formFactor&quot;: &quot;PHONE&quot;,&#xd;
    &quot;osName&quot;: &quot;IOS&quot;,&#xd;
    &quot;osVersion&quot;: &quot;7.0.0&quot;,&#xd;
    &quot;imei&quot;: &quot;XXXXXXXXXXXXXXX&quot;,&#xd;
    &quot;serialNumber&quot;: &quot;2846232387&quot;,&#xd;
    &quot;storageTechnology&quot;: &quot;SE&quot;,&#xd;
    &quot;paymentTypes&quot;: [&#xd;
      &quot;NFC&quot;,&#xd;
      &quot;DSRP&quot;&#xd;
    ],&#xd;
    &quot;deviceName&quot;: &quot;iPhone&quot;&#xd;
  },&#xd;
  &quot;walletProviderDecisioningInfo&quot;: {&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/notifyServiceActivated</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="notifyServiceActivated (CARD_TOKENIZED) &lt;" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;CARD_TOKENIZED&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.card_tokenized</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String requestId = vars.get(&quot;requestID&quot;);
Object history = vars.getObject(&quot;msg_history.card_tokenized&quot;).get(0);

String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(requestId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found requestID `&quot; + requestId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="notifyServiceActivated (SEND_NOTIFICATION_TO_CUSTOMER) &lt;" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;SEND_NOTIFICATION_TO_CUSTOMER&apos; ORDER BY id DESC LIMIT 1;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.send_notification_to_customer</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String requestId = vars.get(&quot;requestID&quot;);
Object history = vars.getObject(&quot;msg_history.send_notification_to_customer&quot;).get(0);

String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(requestId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found requestID `&quot; + requestId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="notifyServiceActivated &lt; token_info (old)" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;NotYetAssigned-D${correlationID}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info.old</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info.old&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || 0 &lt; tokenSize) {
	Failure = true;
	FailureMessage = &quot;Old token not delete: &quot; + tokenSize;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="notifyServiceActivated &lt; token_info (new)" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info.new</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info.new&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info.new&quot;).get(0);

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;A&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
if (tokenStatusUpdate==null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: is empty&quot;;
}

String tokenActiveTokenCount = token.get(&quot;active_token_count&quot;);
if (tokenActiveTokenCount==null) {
	Failure = true;
	FailureMessage = &quot;&apos;active_token_count&apos;: is empty&quot;;
}

String tokenTokenType = token.get(&quot;token_type&quot;);
if (tokenTokenType==null) {
	Failure = true;
	FailureMessage = &quot;&apos;token_type&apos;: is empty&quot;;
}

String tokenPanInternalGuid = token.get(&quot;pan_internal_guid&quot;);
if (tokenPanInternalGuid==null) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_guid&apos;: is empty&quot;;
}

boolean equalTokenPanInternalGuid = tokenPanInternalGuid.equals(&quot;CardID4&quot;);
if (!equalTokenPanInternalGuid) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_guid&apos;: &quot; + tokenPanInternalGuid;
}

String tokenPanInternalID = token.get(&quot;pan_internal_id&quot;);
boolean equalTokenPanInternalID = tokenPanInternalID.equals(&quot;CardID00000000000004&quot;);
if (!equalTokenPanInternalID) {
	Failure = true;
	FailureMessage = &quot;&apos;pan_internal_id&apos;: &quot; + tokenPanInternalID;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: mdes-server.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/mdes-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Notify Token Updated" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notifyTokenUpdated (DEACTIVATED)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokens&quot;: [&#xd;
    {&#xd;
      &quot;tokenUniqueReference&quot;: &quot;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&quot;,&#xd;
      &quot;status&quot;: &quot;DEACTIVATED&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;reasonCode&quot;: &quot;DELETED_FROM_CONSUMER_APP&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/notifyTokenUpdated</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="notifyTokenUpdated (DTC1MC0000171740bf9605c539fe4c418343322319=SUSPENDED)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokens&quot;: [&#xd;
    {&#xd;
      &quot;tokenUniqueReference&quot;: &quot;DTC1MC0000171740bf9605c539fe4c418343322319&quot;,&#xd;
      &quot;status&quot;: &quot;SUSPENDED&quot;,&#xd;
      &quot;suspendedBy&quot;: [&quot;ISSUER&quot;]&#xd;
    }&#xd;
  ],&#xd;
  &quot;reasonCode&quot;: &quot;DELETED_FROM_CONSUMER_APP&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/mdes-api2-server-${serverVer}/notifyTokenUpdated</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.responseId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.errorCode != null) {
if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
	return;
} else {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="notifyServiceActivated (TOKEN_STATUS_UPDATED) &lt;" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM msg_history WHERE msg_type=&apos;TOKEN_STATUS_UPDATED&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">msg_history.token_status_updated</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">String requestId = vars.get(&quot;requestID&quot;);
Object history = vars.getObject(&quot;msg_history.token_status_updated&quot;).get(0);

String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(requestId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found requestID `&quot; + requestId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="notifyTokenUpdated &lt; token_info" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;D&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

Date tokenStatusUpdate = token.get(&quot;token_status_update&quot;);
long timeTokenStatusUpdate = tokenStatusUpdate.getTime();
long timeNowDiff = new Date().getTime() - 3000;
boolean equalTokenStatusUpdate = timeNowDiff &lt;= timeTokenStatusUpdate;
if (!equalTokenStatusUpdate) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status_update&apos;: &quot; + (new Date().getTime() - timeTokenStatusUpdate) + &quot;ms.&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: mdes-server.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/mdes-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-client.log" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Search" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="token_info:  token_ref_id=DTC1MC0000171740bf9605c539fe4c418343322319" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">DELETE FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c418343322319&apos;;
INSERT INTO token_info (token_ref_id, tokenrequestor_id, pan_internal_id, pan_internal_guid, pan_ref_id, masked_pan, masked_token, token_expdate, lifecycle_trace_id, pan_source, active_token_count, token_type, token_status, digitize_date, token_status_update, customer_id, customer_phone, ips, client_wallet_account_id, bin, reminder_period, tokenization_path, wp_device_score, wp_account_score, wp_phonenumber_score, wp_reason_codes, clr_tokenization_standard_ver, deleted_from_app) VALUES (&apos;DTC1MC0000171740bf9605c539fe4c418343322319&apos;, &apos;50110030273&apos;, &apos;CardID00000000000004&apos;, &apos;CardID4&apos;, &apos;FTC1MC0000171740e6ad4d1863304ca383c2af840bc89b78&apos;, &apos;535557_9068&apos;, &apos;535562_0089&apos;, &apos;2016-02-29&apos;, null, &apos;O&apos;, &apos;1&apos;, &apos;S&apos;, &apos;A&apos;, &apos;2018-11-20 18:57:51.123000&apos;, &apos;2015-01-21 02:04:45.000000&apos;, &apos;C0000001&apos;, &apos;0631234567&apos;, &apos;M&apos;, &apos;&apos;, 535557, null, &apos;YELLOW&apos;, &apos;1&apos;, &apos;1&apos;, null, &apos;02,09,0E&apos;, &apos;1.0&apos;, null);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID00000000000004&lt;/panInternalId&gt;&#xd;
  &lt;panInternalGUID&gt;CardID4&lt;/panInternalGUID&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M by PAN)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&#xd;
&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;pan&gt;5555444433332222&lt;/pan&gt;&#xd;
  &lt;paymentAppInstanceId&gt;111111111111&lt;/paymentAppInstanceId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml;charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M = TokenUniqueReference) CardID00000000000004" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID00000000000004&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">20000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M = panInternalId=CardID3555 **)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID3555&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">20000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (V = panInternalId=CardID4005 **)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID4005&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;V&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">20000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (V = panInternalId=CardID444 *" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID444&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;V&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">20000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (V = panInternalId=AXvqBAifyEHk1 **)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;AXvqBAifyEHk1&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;V&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">20000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (V = tokenRefId=DNITHE000302000000000126 **)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;tokenRefId&gt;DNITHE000302000000000126&lt;/tokenRefId&gt;&#xd;
  &lt;tokenRequestorId&gt;40010030273&lt;/tokenRequestorId&gt;&#xd;
  &lt;ips&gt;V&lt;/ips&gt;&#xd;
  &lt;action&gt;Activate&lt;/action&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">20000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M = TokenUniqueReference) CardID4123" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID4123&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml;charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M = TokenUniqueReference) NotYetAssigned" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID13&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M = TokenUniqueReference) NotYetAssigned - Oracle" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID3556&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-1.3.4/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M = PaymentAppInstanceId CardID12)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID12&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-1.3.9/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M=PaymentAppInstanceId panInternalId=CardID00000000000004)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID00000000000004&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-1.3.9/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M=PaymentAppInstanceId panInternalId=CardID00000000000004 refreshDeletedFromIps=true)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID00000000000004&lt;/panInternalId&gt;&#xd;
  &lt;refreshDeletedFromIps&gt;true&lt;/refreshDeletedFromIps&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M=PaymentAppInstanceId panInternalId=12345 refreshDeletedFromIps=true) ???" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID00000000000004&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getTokenByWalletId (*_EXCEPTION)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;GetTokenByWalletIdResponse&gt;&#xd;
    &lt;cardAndToken&gt;&#xd;
        &lt;cardId/&gt;&#xd;
        &lt;cardGUID&gt;21790643&lt;/cardGUID&gt;&#xd;
        &lt;tokenReferenceId&gt;NotYetAssigned-D0000003321934&lt;/tokenReferenceId&gt;&#xd;
        &lt;panRefId/&gt;&#xd;
    &lt;/cardAndToken&gt;&#xd;
&lt;/GetTokenByWalletIdResponse&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/pushprovisioning-${serverVer}/getTokenByWalletId</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">30000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getTokenByWalletId (OK - xml)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;GetTokenByWalletIdRequest&gt;&#xd;
  &lt;requestID&gt;${requestID}&lt;/requestID&gt;&#xd;
  &lt;clientWalletAccountId&gt;041C426B5D3E80016326027385940040919A38F237E4520C&lt;/clientWalletAccountId&gt;&#xd;
  &lt;clientWalletProvider&gt;50110030273&lt;/clientWalletProvider&gt;&#xd;
&lt;/GetTokenByWalletIdRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/pushprovisioning-${serverVer}/getTokenByWalletId</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">/*
def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getTokenByWalletId (OK - json)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;clientWalletAccountId&quot;: &quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
  &quot;clientWalletProvider&quot;: &quot;50110030273&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/pushprovisioning-${serverVer}/getTokenByWalletId</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">/*
def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createInAppProvisioningData (OK - json)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
   &quot;pan&quot;: &quot;4567890123456789&quot;,&#xd;
   &quot;expiryMonth&quot;: &quot;12&quot;,&#xd;
   &quot;expiryYear&quot;: &quot;20&quot;,&#xd;
   &quot;cardholderName&quot;: &quot;FIRSTNAME LASTNAME&quot;,&#xd;
   &quot;ips&quot;: &quot;V&quot;,&#xd;
   &quot;nonce&quot;: &quot;9c023092&quot;,&#xd;
   &quot;nonceSignature&quot;: &quot;4082f883ae62d0700c283e225ee9d286713ef74456ba1f07376cf17d71bf0be013f926d486619394060ced56030f41f84df916eaab5504e456a8530dc9c821f6ed3e3af62b5d8f3e4a22ca2018670fee4e&quot;,&#xd;
   &quot;certificates&quot;: [&#xd;
      &quot;MIIEEzCCA7igAwIBAgIIEvD9KtxTuV0wCgYIKoZIzj0EAwIwgYExOzA5BgNVBAMMMlRlc3QgQXBw\nbGUgV29ybGR3aWRlIERldmVsb3BlcnMgUmVsYXRpb25zIENBIC0gRUNDMSAwHgYDVQQLDBdDZXJ0\naWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcN\nMTcwNTIwMDQxNTU3WhcNMTkwNjE5MDQxNTU3WjBtMTYwNAYDVQQDDC1lY2MtY3J5cHRvLXNlcnZp\nY2VzLWVuY2lwaGVybWVudF9VQzYtSW5NZW1vcnkxETAPBgNVBAsMCEFwcGxlUGF5MRMwEQYDVQQK\nDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABC4+XM9r\nmrBL56IvP6zP3nPIfocVU5SjSBVAiolsoYo3TaxmmvO/YiD8hjdn9K9HUHxbwiH8ShmHTa85tAdO\nPrijggIrMIICJzBPBggrBgEFBQcBAQRDMEEwPwYIKwYBBQUHMAGGM2h0dHA6Ly9vY3NwLXVhdC5j\nb3JwLmFwcGxlLmNvbS9vY3NwMDQtdGVzdHd3ZHJjYWVjYzAdBgNVHQ4EFgQUrS6jy340wu3uQ2hO\nJxEfzEkzOdAwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBTW1tVa5f/9wnw0w0PevWh2XDapvjCC\nAR0GA1UdIASCARQwggEQMIIBDAYJKoZIhvdjZAUBMIH+MIHDBggrBgEFBQcCAjCBtgyBs1JlbGlh\nbmNlIG9uIHRoaXMgY2VydGlmaWNhdGUgYnkgYW55IHBhcnR5IGFzc3VtZXMgYWNjZXB0YW5jZSBv\nZiB0aGUgdGhlbiBhcHBsaWNhYmxlIHN0YW5kYXJkIHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHVz\nZSwgY2VydGlmaWNhdGUgcG9saWN5IGFuZCBjZXJ0aWZpY2F0aW9uIHByYWN0aWNlIHN0YXRlbWVu\ndHMuMDYGCCsGAQUFBwIBFipodHRwOi8vd3d3LmFwcGxlLmNvbS9jZXJ0aWZpY2F0ZWF1dGhvcml0\neS8wQQYDVR0fBDowODA2oDSgMoYwaHR0cDovL2NybC11YXQuY29ycC5hcHBsZS5jb20vYXBwbGV3\nd2RyY2FlY2MuY3JsMA4GA1UdDwEB/wQEAwIDKDASBgkqhkiG92NkBicBAf8EAgUAMAoGCCqGSM49\nBAMCA0kAMEYCIQCMvUq2YUxY/RqTWE4FqsPTr9zGyilCunIU3FSobtep7gIhAN7Vdx3B0p7DTCqX\nHd05IPsZGLdIDG1NTxOk2Oj/N7GG&quot;,      &quot;MIIC5zCCAoygAwIBAgIIR1pCSszYnvcwCgYIKoZIzj0EAwIwZzEhMB8GA1UEAwwYVGVzdCBBcHBs\nZSBSb290IENBIC0gRUNDMSAwHgYDVQQLDBdDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UE\nCgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTQwMjA2MTYxODI5WhcNMjQwMjA0MTYxODI5\nWjCBgTE7MDkGA1UEAwwyVGVzdCBBcHBsZSBXb3JsZHdpZGUgRGV2ZWxvcGVycyBSZWxhdGlvbnMg\nQ0EgLSBFQ0MxIDAeBgNVBAsMF0NlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBs\nZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDzb9Lsna4XrUdRw\nIjl36m9hTGhxQrW5Ls3wYr07kaZ/5tMOEG5jOBeHtI+x8YHmkgp0Ry43nmZTik3vosay+6ajggEF\nMIIBATBUBggrBgEFBQcBAQRIMEYwRAYIKwYBBQUHMAGGOGh0dHA6Ly9vY3NwLXVhdC5jb3JwLmFw\ncGxlLmNvbS9vY3NwMDQtdGVzdGFwcGxlcm9vdGNhZWNjMB0GA1UdDgQWBBTW1tVa5f/9wnw0w0Pe\nvWh2XDapvjASBgNVHRMBAf8ECDAGAQH/AgEAMB8GA1UdIwQYMBaAFNJH4sU0ccYQjZPuBEMf4RsP\n4c0RMEUGA1UdHwQ+MDwwOqA4oDaGNGh0dHA6Ly9jcmwtdWF0LmNvcnAuYXBwbGUuY29tL3Rlc3Rh\ncHBsZXJvb3RjYWVjYy5jcmwwDgYDVR0PAQH/BAQDAgEGMAoGCCqGSM49BAMCA0kAMEYCIQCd4eDj\nSiTu55mDKWCaD7Tqe4hp86pJ1Fsw7SlPKmH+bQIhAJ5coaJ3uarz81Im19NGcrU45h1A8hNDTz55\nQPEHujS5&quot;&#xd;
      ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/pushprovisioning-${serverVer}/createInAppProvisioningData</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">/*
def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createInAppProvisioningData (TEST - PNO)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;pan&quot;: &quot;5501040100142966&quot;,&#xd;
  &quot;expiryMonth&quot;: &quot;07&quot;,&#xd;
  &quot;expiryYear&quot;: &quot;23&quot;,&#xd;
  &quot;cardholderName&quot;: &quot;MISHA TOROSYAN&quot;,&#xd;
  &quot;ips&quot;: &quot;M&quot;,&#xd;
  &quot;nonce&quot;: &quot;df92ae81&quot;,&#xd;
  &quot;nonceSignature&quot;: &quot;408186ba105f1078fb1377108e3045e5f4c9844badeeb9e3f1f2a936cf9db5ec1aec120c1bd051db8f2579a3060e37fa9c4436f905ae9488f2e6bd4c394f3f17b8f3c69f8897702b8f3dbfb760a1e267da&quot;,&#xd;
  &quot;certificates&quot;: [&#xd;
    &quot;MIID/TCCA6OgAwIBAgIIMKKNZA6F9o0wCgYIKoZIzj0EAwIwgYAxNDAyBgNVBAMMK0FwcGxlIFdvcmxkd2lkZSBEZXZlbG9wZXIgUmVsYXRpb25zIENBIC0gRzIxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzAeFw0yMDA2MDgxNzE5NDVaFw0yMjA3MDgxNzE5NDVaMGwxMjAwBgNVBAMMKWVjYy1jcnlwdG8tc2VydmljZXMtZW5jaXBoZXJtZW50X1VDNi1QUk9EMRQwEgYDVQQLDAtpT1MgU3lzdGVtczETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASzCVyQGX3syyW2aI6nyfNQe+vjjzjU4rLO0ZiWiVZZSmEzYfACFI8tuDFiDLv9XWrHEeX0/yNtGVjwAzpanWb/o4ICGDCCAhQwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBSEtoTMOoZichZZlOgao71I3zrfCzBHBggrBgEFBQcBAQQ7MDkwNwYIKwYBBQUHMAGGK2h0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDMtYXBwbGV3d2RyY2EyMDUwggEdBgNVHSAEggEUMIIBEDCCAQwGCSqGSIb3Y2QFATCB/jCBwwYIKwYBBQUHAgIwgbYMgbNSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRlIHBvbGljeSBhbmQgY2VydGlmaWNhdGlvbiBwcmFjdGljZSBzdGF0ZW1lbnRzLjA2BggrBgEFBQcCARYqaHR0cDovL3d3dy5hcHBsZS5jb20vY2VydGlmaWNhdGVhdXRob3JpdHkvMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwuYXBwbGUuY29tL2FwcGxld3dkcmNhMi5jcmwwHQYDVR0OBBYEFI5aYtQKaJCRpvI1Dgh+Ra4x2iCrMA4GA1UdDwEB/wQEAwIDKDASBgkqhkiG92NkBicBAf8EAgUAMAoGCCqGSM49BAMCA0gAMEUCIH+AC63c0F+OQwzxhwnqaND6LNZkAiHnxpdjddaeiTujAiEAhpVgo+we+5UvpPnc9fZmfRP8O3jSnTo3FZZ5TKpzjJU=&quot;,&#xd;
    &quot;MIIC9zCCAnygAwIBAgIIb+/Y9emjp+4wCgYIKoZIzj0EAwIwZzEbMBkGA1UEAwwSQXBwbGUgUm9vdCBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTQwNTA2MjM0MzI0WhcNMjkwNTA2MjM0MzI0WjCBgDE0MDIGA1UEAwwrQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ0EgLSBHMjEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE3fC3BkvP3XMEE8RDiQOTgPte9nStQmFSWAImUxnIYyIHCVJhysTZV+9tJmiLdJGMxPmAaCj8CWjwENrp0C7JGqOB9zCB9DBGBggrBgEFBQcBAQQ6MDgwNgYIKwYBBQUHMAGGKmh0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDQtYXBwbGVyb290Y2FnMzAdBgNVHQ4EFgQUhLaEzDqGYnIWWZToGqO9SN863wswDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBS7sN6hWDOImqSKmd6+veuv2sskqzA3BgNVHR8EMDAuMCygKqAohiZodHRwOi8vY3JsLmFwcGxlLmNvbS9hcHBsZXJvb3RjYWczLmNybDAOBgNVHQ8BAf8EBAMCAQYwEAYKKoZIhvdjZAYCDwQCBQAwCgYIKoZIzj0EAwIDaQAwZgIxANmxxzHGI/ZPTdDZR8V9GGkRh3En02it4Jtlmr5s3z9GppAJvm6hOyywUYlBPIfSvwIxAPxkUolLPF2/axzCiZgvcq61m6oaCyNUd1ToFUOixRLal1BzfF7QbrJcYlDXUfE6Wg==&quot;&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/pushprovisioning-${serverVer}/createInAppProvisioningData</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">/*
def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createOpaquePaymentCard (OK - json)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
   &quot;pan&quot;: &quot;4102321253015035&quot;,&#xd;
   &quot;expiryMonth&quot;: &quot;12&quot;,&#xd;
   &quot;expiryYear&quot;: &quot;20&quot;,&#xd;
   &quot;country&quot;: &quot;UA&quot;,&#xd;
   &quot;intent&quot;: &quot;PUSH_PROV_MOBILE&quot;,&#xd;
   &quot;clientWalletProvider&quot;: &quot;0010075001&quot;,&#xd;
   &quot;clientWalletAccountID&quot;: &quot;uljnYNEQh9Xr9DWN5G7jMCNj&quot;,&#xd;
   &quot;isIDnV&quot;: &quot;false&quot;,&#xd;
   &quot;cardholderName&quot;: &quot;ELENA PREKRASNAYA&quot;,&#xd;
   &quot;ips&quot;: &quot;V&quot;,&#xd;
   &quot;clientDeviceID&quot;: &quot;EbHhO8o5y5NP8V1IbUug15Cr&quot;,&#xd;
   &quot;clientAppID&quot;: &quot;ALFAMOBILE&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/pushprovisioning-${serverVer}/createOpaquePaymentCard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">/*
def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
*/</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (M=PaymentAppInstanceId panInternalId=CardID3556 refreshDeletedFromIps=false)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID3556&lt;/panInternalId&gt;&#xd;
  &lt;refreshDeletedFromIps&gt;false&lt;/refreshDeletedFromIps&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">30000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (V = Token Inquiry API)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;tokenRefId&gt;DNITHE000302000000000003&lt;/tokenRefId&gt;&#xd;
  &lt;tokenRequestorId&gt;40010030273&lt;/tokenRequestorId&gt;&#xd;
  &lt;ips&gt;V&lt;/ips&gt;&#xd;
  &lt;action&gt;Activate&lt;/action&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (V = Token Inquiry by PAN)  new" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;pan&gt;4244910080876491&lt;/pan&gt;&#xd;
  &lt;paymentAppInstanceId&gt;uGrOxzwW2ghVx1nuoC2Fnwko&lt;/paymentAppInstanceId&gt;&#xd;
  &lt;ips&gt;V&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (V = Token Inquiry by panInternalId=CardID4 ** OK)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID4&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;V&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">30000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (V = Token Inquiry by panInternalGUID=CardID00000000000004 **)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalGUID&gt;CardID00000000000004&lt;/panInternalGUID&gt;&#xd;
  &lt;ips&gt;V&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">30000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenInfo (V = Token Inquiry by panInternalId=CardID12)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID12&lt;/panInternalId&gt;&#xd;
  &lt;ips&gt;V&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">30000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tokenInfo &lt; token_history (DELETED_FROM_CONSUMER_APP ?)" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_history WHERE token_event_type=&apos;DELETED_FROM_CONSUMER_APP&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_history.delete_from_consumer_app</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">String requestId = vars.get(&quot;requestID&quot;);
Object history = vars.getObject(&quot;token_history.delete_from_consumer_app&quot;).get(0);

String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(requestId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found requestID `&quot; + requestId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tokenInfo &lt; token_info" enabled="false">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c418343322319&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;I&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

String tokenDeletedFromApp = token.get(&quot;deleted_from_app&quot;);
if (tokenDeletedFromApp!=&quot;true&quot;) {
	Failure = true;
	FailureMessage = &quot;&apos;deleted_from_app&apos;: &quot; + tokenDeletedFromApp;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-server.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: mdes-client.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/mdes-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Token Update" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenUpdate (M)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID4123&lt;/panInternalId&gt;&#xd;
  &lt;newAccountPan&gt;5666567899992222&lt;/newAccountPan&gt;&#xd;
  &lt;newPanInternalId&gt;CardID444&lt;/newPanInternalId&gt;&#xd;
  &lt;newExpiryMonth&gt;04&lt;/newExpiryMonth&gt;&#xd;
  &lt;newExpiryYear&gt;24&lt;/newExpiryYear&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;updateWalletProviderIndicator&gt;0&lt;/updateWalletProviderIndicator&gt;&#xd;
  &lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
  &lt;reasonCode&gt;Card update&lt;/reasonCode&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenUpdate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenUpdate (M – Incompatible fields)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID4123&lt;/panInternalId&gt;&#xd;
  &lt;oldAccountPan&gt;5666567899991111&lt;/oldAccountPan&gt;&#xd;
  &lt;newAccountPan&gt;5666567899991111&lt;/newAccountPan&gt;&#xd;
  &lt;newExpiryMonth&gt;12&lt;/newExpiryMonth&gt;&#xd;
  &lt;newExpiryYear&gt;22&lt;/newExpiryYear&gt;&#xd;
  &lt;newPanInternalId&gt;CardID444&lt;/newPanInternalId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;reasonCode&gt;C&lt;/reasonCode&gt;&#xd;
  &lt;updateWalletProviderIndicator&gt;1&lt;/updateWalletProviderIndicator&gt;&#xd;
  &lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenUpdate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenUpdate (M +oldAccountPan)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;TokenInfoRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;panInternalId&gt;CardID4123&lt;/panInternalId&gt;&#xd;
  &lt;oldAccountPan&gt;5666567899991111&lt;/oldAccountPan&gt;&#xd;
  &lt;newAccountPan&gt;5666567899992222&lt;/newAccountPan&gt;&#xd;
  &lt;newPanInternalId&gt;CardID444&lt;/newPanInternalId&gt;&#xd;
  &lt;newExpiryMonth&gt;04&lt;/newExpiryMonth&gt;&#xd;
  &lt;newExpiryYear&gt;24&lt;/newExpiryYear&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;updateWalletProviderIndicator&gt;0&lt;/updateWalletProviderIndicator&gt;&#xd;
  &lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
  &lt;reasonCode&gt;Card update&lt;/reasonCode&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;operator&lt;/userId&gt;&#xd;
    &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
&lt;/TokenInfoRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenUpdate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenUpdate (V) Unexpected error from a Visa Cryptographic encryptAndSign-3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokenRefId&quot;: null,&#xd;
  &quot;tokenRequestorId&quot;: null,&#xd;
  &quot;panInternalId&quot;: null,&#xd;
  &quot;panInternalGUID&quot;: &quot;F5228CD43D794521BCEF09D2AB68D68F&quot;,&#xd;
  &quot;oldAccountPan&quot;: null,&#xd;
  &quot;oldExpiryMonth&quot;: &quot;08&quot;,&#xd;
  &quot;oldExpiryYear&quot;: &quot;26&quot;,&#xd;
  &quot;newAccountPan&quot;: &quot;4567890123456789&quot;,&#xd;
  &quot;newPanInternalId&quot;: null,&#xd;
  &quot;newPanInternalGUID&quot;: &quot;F5228CD43D794521BCEF09D2AB68D68F&quot;,&#xd;
  &quot;newExpiryMonth&quot;: &quot;08&quot;,&#xd;
  &quot;newExpiryYear&quot;: &quot;26&quot;,&#xd;
  &quot;ips&quot;: &quot;V&quot;,&#xd;
  &quot;updateWalletProviderIndicator&quot;: &quot;0&quot;,&#xd;
  &quot;commentText&quot;: null,&#xd;
  &quot;reasonCode&quot;: &quot;ACCOUNT_UPDATE&quot;,&#xd;
  &quot;auditInfo&quot;: {&#xd;
    &quot;userId&quot;: &quot;app&quot;,&#xd;
    &quot;userName&quot;: &quot;sense superapp&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenUpdate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tokenUpdate &lt; token_history (DELETED_FROM_CONSUMER_APP ?)" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_history WHERE token_event_type=&apos;DELETED_FROM_CONSUMER_APP&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_history.delete_from_consumer_app</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">String requestId = vars.get(&quot;requestID&quot;);
Object history = vars.getObject(&quot;token_history.delete_from_consumer_app&quot;).get(0);

String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(requestId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found requestID `&quot; + requestId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tokenUpdate &lt; token_info" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c418343322319&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;I&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

String tokenDeletedFromApp = token.get(&quot;deleted_from_app&quot;);
if (tokenDeletedFromApp!=&quot;true&quot;) {
	Failure = true;
	FailureMessage = &quot;&apos;deleted_from_app&apos;: &quot; + tokenDeletedFromApp;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-server.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: mdes-client.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/mdes-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller for Token Lifecycle" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="token_info:  token_ref_id=DTC1MC0000171740bf9605c539fe4c418343322319" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">DELETE FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c418343322319&apos;;
INSERT INTO token_info (token_ref_id, tokenrequestor_id, pan_internal_id, pan_internal_guid, pan_ref_id, masked_pan, masked_token, token_expdate, lifecycle_trace_id, pan_source, active_token_count, token_type, token_status, digitize_date, token_status_update, customer_id, customer_phone, ips, client_wallet_account_id, bin, reminder_period, tokenization_path, wp_device_score, wp_account_score, wp_phonenumber_score, wp_reason_codes, clr_tokenization_standard_ver, deleted_from_app) VALUES (&apos;DTC1MC0000171740bf9605c539fe4c418343322319&apos;, &apos;50110030273&apos;, &apos;CardID00000000000004&apos;, &apos;CardID4&apos;, &apos;FTC1MC0000171740e6ad4d1863304ca383c2af840bc89b78&apos;, &apos;535557_9068&apos;, &apos;535562_0089&apos;, &apos;2016-02-29&apos;, null, &apos;O&apos;, &apos;1&apos;, &apos;S&apos;, &apos;A&apos;, &apos;2018-11-20 18:57:51.123000&apos;, &apos;2015-01-21 02:04:45.000000&apos;, &apos;C0000001&apos;, &apos;0631234567&apos;, &apos;M&apos;, &apos;&apos;, 535557, null, &apos;YELLOW&apos;, &apos;1&apos;, &apos;1&apos;, null, &apos;02,09,0E&apos;, &apos;1.0&apos;, null);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (panInternalGUID)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;panInternalGUID&gt;CardID4&lt;/panInternalGUID&gt;&#xd;
	&lt;ips&gt;M&lt;/ips&gt;&#xd;
	&lt;action&gt;Activate&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;C&lt;/reasonCode&gt;&#xd;
	&lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;operator&lt;/userId&gt;&#xd;
	        &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Activate by PAN - Ok)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;panInternalId&gt;CardID00000000000004&lt;/panInternalId&gt;&#xd;
	&lt;pan&gt;555555555555555557&lt;/pan&gt;&#xd;
     &lt;paymentAppInstanceId&gt;041C426B5D3E80016326027385940040919A38F237E4520C&lt;/paymentAppInstanceId&gt;&#xd;
	&lt;ips&gt;M&lt;/ips&gt;&#xd;
	&lt;action&gt;Activate&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;C&lt;/reasonCode&gt;&#xd;
	&lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;operator&lt;/userId&gt;&#xd;
	        &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Activate by PAN - MDES = Ok?)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;panInternalId&gt;CardID00000000000004&lt;/panInternalId&gt;&#xd;
     &lt;paymentAppInstanceId&gt;041C426B5D3E80016326027385940040919A38F237E4520C&lt;/paymentAppInstanceId&gt;&#xd;
	&lt;ips&gt;M&lt;/ips&gt;&#xd;
	&lt;action&gt;Activate&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;C&lt;/reasonCode&gt;&#xd;
	&lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;operator&lt;/userId&gt;&#xd;
	        &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">20000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Activate by tokenRefId - MDES / fail)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
  &lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
  &lt;tokenRefId&gt;NotYetAssigned-D${correlationID}&lt;/tokenRefId&gt;&#xd;
  &lt;tokenRequestorId&gt;50110030273&lt;/tokenRequestorId&gt;&#xd;
  &lt;ips&gt;M&lt;/ips&gt;&#xd;
  &lt;auditInfo&gt;&#xd;
    &lt;userId&gt;MAppUser&lt;/userId&gt;&#xd;
    &lt;userName&gt;Mobile Application User&lt;/userName&gt;&#xd;
  &lt;/auditInfo&gt;&#xd;
  &lt;refreshDeletedFromIps&gt;false&lt;/refreshDeletedFromIps&gt;&#xd;
  &lt;reasonCode&gt;A&lt;/reasonCode&gt;&#xd;
  &lt;commentText&gt;Activated via mobile application&lt;/commentText&gt;&#xd;
  &lt;action&gt;Activate&lt;/action&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Activate by PAN - VTS = Ok!)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;panInternalId&gt;CardID12&lt;/panInternalId&gt;&#xd;
     &lt;paymentAppInstanceId&gt;uGrOxzwW2ghVx1nuoC2Fnwko&lt;/paymentAppInstanceId&gt;&#xd;
	&lt;ips&gt;V&lt;/ips&gt;&#xd;
	&lt;action&gt;Activate&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;C&lt;/reasonCode&gt;&#xd;
	&lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;operator&lt;/userId&gt;&#xd;
	        &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">STAN</stringProp>
                    <stringProp name="Header.value">123</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Activate by tokenRefId - VTS)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;tokenRefId&gt;DNITHE000302000000000068&lt;/tokenRefId&gt;&#xd;
	&lt;tokenRequestorId&gt;40010030273&lt;/tokenRequestorId&gt;&#xd;
	&lt;ips&gt;V&lt;/ips&gt;&#xd;
	&lt;action&gt;Activate&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;C&lt;/reasonCode&gt;&#xd;
	&lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;operator&lt;/userId&gt;&#xd;
	        &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Activate by tokenRefId - VTS=DNITHE002018070214930026)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;tokenRefId&gt;DNITHE002018070214930026&lt;/tokenRefId&gt;&#xd;
	&lt;tokenRequestorId&gt;40010030273&lt;/tokenRequestorId&gt;&#xd;
	&lt;ips&gt;V&lt;/ips&gt;&#xd;
	&lt;action&gt;Activate&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;C&lt;/reasonCode&gt;&#xd;
	&lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;operator&lt;/userId&gt;&#xd;
	        &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Activate by  PAN - Err)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;panInternalId&gt;CardID00000000000004&lt;/panInternalId&gt;&#xd;
	&lt;pan&gt;555555555555555557&lt;/pan&gt;&#xd;
	&lt;ips&gt;M&lt;/ips&gt;&#xd;
	&lt;action&gt;Activate&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;C&lt;/reasonCode&gt;&#xd;
	&lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;operator&lt;/userId&gt;&#xd;
	        &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Deactivate)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;panInternalId&gt;CardID00000000000004&lt;/panInternalId&gt;&#xd;
	&lt;ips&gt;M&lt;/ips&gt;&#xd;
	&lt;action&gt;Deactivate&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;L&lt;/reasonCode&gt;&#xd;
	&lt;commentText&gt;bla bla bla&lt;/commentText&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;operator&lt;/userId&gt;&#xd;
	        &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Suspend - VTS)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;tokenRefId&gt;DNITHE000302000000000002&lt;/tokenRefId&gt;&#xd;
	&lt;tokenRequestorId&gt;40010030273&lt;/tokenRequestorId&gt;&#xd;
	&lt;panInternalId&gt;CardID4&lt;/panInternalId&gt;&#xd;
	&lt;ips&gt;V&lt;/ips&gt;&#xd;
	&lt;action&gt;Suspend&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;Issuer or cardholder confirmed no fraudulent token transactions&lt;/reasonCode&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;operator&lt;/userId&gt;&#xd;
	        &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Activate - VTS)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;tokenRefId&gt;DNITHE000302000000000002&lt;/tokenRefId&gt;&#xd;
	&lt;tokenRequestorId&gt;40010030273&lt;/tokenRequestorId&gt;&#xd;
	&lt;panInternalId&gt;CardID4&lt;/panInternalId&gt;&#xd;
	&lt;ips&gt;V&lt;/ips&gt;&#xd;
	&lt;action&gt;Activate&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;A&lt;/reasonCode&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;11358&lt;/userId&gt;&#xd;
	        &lt;userName&gt;WSTOKENFTISC&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Deactivate - MDES)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;tokenRefId&gt;DM4MMC000017316057e17f98d8ba4e7f99d29f450c694aaa&lt;/tokenRefId&gt;&#xd;
	&lt;tokenRequestorId&gt;50116989522&lt;/tokenRequestorId&gt;&#xd;
	&lt;panInternalId&gt;CardID4&lt;/panInternalId&gt;&#xd;
	&lt;ips&gt;M&lt;/ips&gt;&#xd;
	&lt;action&gt;Deactivate&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;Issuer or cardholder confirmed no fraudulent token transactions&lt;/reasonCode&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;operator&lt;/userId&gt;&#xd;
	        &lt;userName&gt;Testovenko&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Deactivate - VTS)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;BC316156-C4B6-2DDB-E053-06080A0A6091&quot;,&#xd;
  &quot;tokenRefId&quot;: &quot;DNITHE002018070214930026&quot;,&#xd;
  &quot;tokenRequestorId&quot;: &quot;40010030273&quot;,&#xd;
  &quot;panInternalId&quot;: &quot;953134&quot;,&#xd;
  &quot;panInternalGUID&quot;: null,&#xd;
  &quot;pan&quot;: null,&#xd;
  &quot;ips&quot;: &quot;V&quot;,&#xd;
  &quot;paymentAppInstanceId&quot;: &quot;GAy3o7UnO-WyOiPAooL1&quot;,&#xd;
  &quot;action&quot;: &quot;Deactivate&quot;,&#xd;
  &quot;reasonCode&quot;: &quot;Other&quot;,&#xd;
  &quot;commentText&quot;: null,&#xd;
  &quot;auditInfo&quot;: {&#xd;
    &quot;userId&quot;: &quot;11358&quot;,&#xd;
    &quot;userName&quot;: &quot;WSTOKENFTISC&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cardMetadataUpdate (1 VTS!)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokenRefId&quot;: &quot;DNITHE002018070214930026&quot;,&#xd;
  &quot;productConfigID&quot;: &quot;A1234749999&quot;,&#xd;
  &quot;ips&quot;: &quot;V&quot;,&#xd;
  &quot;reasonCode&quot;: &quot;Just update old PAN&quot;,&#xd;
  &quot;commentText&quot;: &quot;bla bla bla&quot;,&#xd;
  &quot;auditInfo&quot;: {&#xd;
    &quot;userId&quot;: &quot;operator&quot;,&#xd;
    &quot;userName&quot;: &quot;Testovenko&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/cardMetadataUpdate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cardMetadataUpdate (2 VTS!)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokenRefId&quot;: &quot;DNITHE002018070214930026&quot;,&#xd;
  &quot;productConfigID&quot;: &quot;${productConfigID}&quot;,&#xd;
  &quot;ips&quot;: &quot;V&quot;,&#xd;
  &quot;reasonCode&quot;: &quot;Just update old PAN&quot;,&#xd;
  &quot;commentText&quot;: &quot;bla bla bla&quot;,&#xd;
  &quot;auditInfo&quot;: {&#xd;
    &quot;userId&quot;: &quot;operator&quot;,&#xd;
    &quot;userName&quot;: &quot;Testovenko&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/cardMetadataUpdate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 
vars.put(&quot;productConfigID&quot;,&quot;${__RandomString(11, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}&quot;);
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cardMetadataUpdate (3 - Missing Required Field)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;ips&quot;: &quot;V&quot;,&#xd;
  &quot;reasonCode&quot;: &quot;Just update old PAN&quot;,&#xd;
  &quot;commentText&quot;: &quot;bla bla bla&quot;,&#xd;
  &quot;auditInfo&quot;: {&#xd;
    &quot;userId&quot;: &quot;operator&quot;,&#xd;
    &quot;userName&quot;: &quot;Testovenko&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/cardMetadataUpdate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cardMetadataUpdate (3 MDES!)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;: &quot;${requestID}&quot;,&#xd;
  &quot;tokenRefId&quot;: &quot;DTC2MC0000171740bf9605c539fe4c41834520eeb0719634&quot;,&#xd;
  &quot;productConfigID&quot;: &quot;A1234748888&quot;,&#xd;
  &quot;ips&quot;: &quot;M&quot;,&#xd;
  &quot;reasonCode&quot;: &quot;Just update old PAN&quot;,&#xd;
  &quot;commentText&quot;: &quot;bla bla bla&quot;,&#xd;
  &quot;auditInfo&quot;: {&#xd;
    &quot;userId&quot;: &quot;operator&quot;,&#xd;
    &quot;userName&quot;: &quot;Testovenko&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/cardMetadataUpdate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="tokenLifecycle (Resume - MDES)" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;TokenLifecycleRequest&gt;&#xd;
	&lt;requestId&gt;${requestID}&lt;/requestId&gt;&#xd;
	&lt;tokenRefId&gt;DM4MMC000017316057e17f98d8ba4e7f99d29f450c694aaa&lt;/tokenRefId&gt;&#xd;
	&lt;tokenRequestorId&gt;50116989522&lt;/tokenRequestorId&gt;&#xd;
	&lt;panInternalId&gt;CardID4&lt;/panInternalId&gt;&#xd;
	&lt;ips&gt;M&lt;/ips&gt;&#xd;
	&lt;paymentAppInstanceId&gt;041B06B3C635800152600114489364137E6A9EBF92FDBA18&lt;/paymentAppInstanceId&gt;&#xd;
	&lt;action&gt;Resume&lt;/action&gt;&#xd;
	&lt;reasonCode&gt;T&lt;/reasonCode&gt;&#xd;
	&lt;auditInfo&gt;&#xd;
	        &lt;userId&gt;11358&lt;/userId&gt;&#xd;
	        &lt;userName&gt;WSTOKENFTISC&lt;/userName&gt;&#xd;
	&lt;/auditInfo&gt;&#xd;
&lt;/TokenLifecycleRequest&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/bank-server-${serverVer}/tokenLifecycle</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;requestID&quot;,&quot;${__UUID()}&quot;); 

</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (&quot;${requestID}&quot; != response.requestId){
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;The responseID and requestID values not matched&quot;);
}

if (response.code != &quot;0&quot;) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
	return;
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tokenLifecycle &lt; token_history (DELETED_FROM_CONSUMER_APP ?)" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_history WHERE token_event_type=&apos;DELETED_FROM_CONSUMER_APP&apos; ORDER BY id DESC LIMIT 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_history.delete_from_consumer_app</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
                <stringProp name="BeanShellAssertion.query">String requestId = vars.get(&quot;requestID&quot;);
Object history = vars.getObject(&quot;token_history.delete_from_consumer_app&quot;).get(0);

String historyMsgRawIn = history.get(&quot;msg_raw_in&quot;);
String historyMsgRawOut = history.get(&quot;msg_raw_out&quot;);
boolean equalHistoryMsgRawIn = historyMsgRawIn.contains(requestId);
boolean equalHistoryMsgRawOut = historyMsgRawOut.contains(&quot;code&gt;0&lt;/code&quot;);

if (!equalHistoryMsgRawIn) {
	Failure = true;
	FailureMessage = &quot;&apos;msg_raw_in&apos;: not found requestID `&quot; + requestId + &quot;`&quot;;
} else {
	if (!equalHistoryMsgRawOut) {
		Failure = true;
		FailureMessage = &quot;&apos;error_code&apos;: &quot; + &quot;`&quot; + historyMsgRawOut + &quot;`&quot;;
	}
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="tokenLifecycle &lt; token_info" enabled="true">
              <stringProp name="dataSource">ft_al</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT * FROM token_info WHERE token_ref_id=&apos;DTC1MC0000171740bf9605c539fe4c418343322319&apos;;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">token_info</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">int tokenSize = vars.getObject(&quot;token_info&quot;).size();
if (!ResponseCode.equals(&quot;200&quot;) || tokenSize == 0) {
	Failure = true;
	FailureMessage = &quot;Count of rows: &quot; + tokenSize;
}

Object token = vars.getObject(&quot;token_info&quot;).get(0);

String tokenStatus = token.get(&quot;token_status&quot;);
boolean equalTokenStatus = tokenStatus.equals(&quot;I&quot;);
if (!equalTokenStatus) {
	Failure = true;
	FailureMessage = &quot;&apos;token_status&apos;: &quot; + tokenStatus;
}

String tokenDeletedFromApp = token.get(&quot;deleted_from_app&quot;);
if (tokenDeletedFromApp!=&quot;true&quot;) {
	Failure = true;
	FailureMessage = &quot;&apos;deleted_from_app&apos;: &quot; + tokenDeletedFromApp;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: bank-server.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/bank-server.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: core.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/core.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="less: mdes-client.log" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">less ${logDir}/mdes-client.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.commons.lang.StringUtils;

String requestId = vars.get(&quot;requestID&quot;);
String response = SampleResult.getResponseDataAsString();
int countStan = StringUtils.countMatches(response, &quot;STAN: &apos;&quot;);
int countStanResponse = StringUtils.countMatches(response, &quot;STAN: &apos;&quot; + requestId + &quot;&apos;&quot;);

if (countStan != countStanResponse) {
	Failure = true;
	FailureMessage = response;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller /services/confirmProvisioning" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="truncate: fasttack *.logs" enabled="false">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">/bin/bash</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">-c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="/bin/bash" elementType="Argument">
                    <stringProp name="Argument.name">/bin/bash</stringProp>
                    <stringProp name="Argument.value">truncate -s 0 ${logDir}/*.log</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="confirmProvisioning" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
&quot;services&quot;:[&#xd;
&quot;DIGITIZATION&quot;&#xd;
],&#xd;
&quot;cardAndToken&quot;:{&#xd;
      &quot;panUniqueReference&quot;:&quot;FTC1MC0000171740e6ad4d1863304ca383c2af840bc89b78&quot;,&#xd;
      &quot;tokenUniqueReference&quot;:&quot;DTC1MC0000171740bf9605c539fe4c41834${correlationID}&quot;,&#xd;
      &quot;publicKeyFingerprint&quot;:&quot;3e70356e5a17b769009bc099c2dcae4b6b82f482a3f59711715d683f7e6fd167&quot;,&#xd;
      &quot;encryptedKey&quot;:&quot;52d432625311c99571467f7d3b3bc9aae76e891bfa7e1a91b5bcb1e4926f66c7b8ff57cd19254dd3f7353d829892054a0a4bde550c19c9c893411519797cb05d28cdd24c4c76451e6c0c1f0b2933f0fafeea3119539a193b417cb37888cd404305f0cc137cb6ed5ff2813aa8fe1034fe2eb83d269551c848ede23183c5b577a7c531db418a7d1b5f9f39412553bf0501a51ee49ee10eb1d5ff03f4e755f3779c6d3aaaf3a82ccaeb2a87172a4311d0feed9a508ebe8ca57f83e01cbf468d0c7f6b2bc187cc018f2b2594fb893bb30933b9ed14c856ee0808101f2e492800adbbedcf06c78b42e58651c7a47a376c43088f566880122063be55859bcc4e41e481&quot;,&#xd;
      &quot;oaepHashingAlgorithm&quot;:&quot;SHA256&quot;,&#xd;
      &quot;iv&quot;:&quot;1911c7142309f8a02ba6e055c2724f0d&quot;,&#xd;
      &quot;encryptedData&quot;:&quot;093a3764cb328a7f2552e78de6f2383563090e2c13442a826c20aeebc513aead223f066d1a7e4d83052ca5cadc90250257e7d2d35138dd952260ed680b8572631e48c1123c57b8146c079a7a81b8f56ed37d38643e7bbbc49538f9d1d2d3cf223609215a832a374a1b9d3fc445cf07764f470e2e80e3161fd87e1ebb46185a0560a17d2af2b5d91f5993d22fa4340c518be2f834beb37801507a9e37c6bf85b44f51d161c74a660e568e9dc65c051bbc6bfc89af4120216ab466df42b422bd86f1d51fd1df0a4cce7b8a80ac1c3faa22dc8b1f66daad7fb97c19f5b656a494d852150205ac6659a1d5f8bc4e00b159d4fa977b92deba9dfa9d9bae662fcf4645fc5148f5f69af4b3facd92a9ecb2a320&quot;&#xd;
   },&#xd;
&quot;deviceInfo&quot;:{&#xd;
&quot;isoDeviceType&quot;:&quot;21&quot;,&#xd;
&quot;formFactor&quot;:&quot;PHONE&quot;,&#xd;
&quot;storageTechnology&quot;:&quot;SE&quot;,&#xd;
&quot;paymentTypes&quot;:[&#xd;
&quot;NFC&quot;,&#xd;
&quot;DSRP&quot;&#xd;
],&#xd;
&quot;deviceName&quot;:&quot;iPhone&quot;&#xd;
},&#xd;
&quot;correlationId&quot;:&quot;D${correlationID}&quot;,&#xd;
&quot;tokenRequestorId&quot;:&quot;50110030273&quot;,&#xd;
&quot;walletId&quot;:&quot;103&quot;,&#xd;
&quot;paymentAppInstanceId&quot;:&quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
&quot;tokenType&quot;:&quot;EMBEDDED_SE&quot;,&#xd;
&quot;secureElementId&quot;:&quot;041C426B5D3E80016326027385940040919A38F237E4520C&quot;,&#xd;
&quot;accountPanSuffix&quot;:&quot;3579&quot;,&#xd;
&quot;serviceRequestDateTime&quot;:&quot;2018-11-20T16:57:04.231Z&quot;,&#xd;
&quot;termsAndConditionsAssetId&quot;:&quot;d781f02e-28a5-4ab1-b1de-2aa39896f725&quot;,&#xd;
&quot;termsAndConditionsAcceptedTimestamp&quot;:&quot;2018-11-20T16:57:13.321Z&quot;,&#xd;
&quot;productConfigurationId&quot;:&quot;AlfaMDH&quot;,&#xd;
&quot;consumerLanguage&quot;:&quot;ru&quot;,&#xd;
&quot;decision&quot;:&quot;REQUIRE_ADDITIONAL_AUTHENTICATION&quot;,&#xd;
&quot;decisionMadeBy&quot;:&quot;AUTHORIZATION_REQUEST&quot;,&#xd;
&quot;tokenActivatedDateTime&quot;:&quot;2018-11-20T16:57:51.123Z&quot;,&#xd;
&quot;numberOfActivationAttempts&quot;:1,&#xd;
&quot;numberOfActiveTokens&quot;:1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8090</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/services/confirmProvisioning</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.errorCode != null) {
	if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
		AssertionResult.setFailure(true)
		AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
		return;
	} else {
		AssertionResult.setFailure(true)
		AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
		return;
	}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller /services/getTokenByWalletId" enabled="false">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getTokenByWalletId" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;requestId&quot;:&quot;${requestID}&quot;,&#xd;
  &quot;clientWalletAccountId&quot;: &quot;uGrOxzwW2ghVx1nuoC2Fnwko&quot;,&#xd;
  &quot;clientWalletProvider&quot;: &quot;40010030273&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/pushprovisioning-${serverVer}/getTokenByWalletId</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">10</stringProp>
              <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">10000</stringProp>
              </DurationAssertion>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def response =  new groovy.json.JsonSlurper().parse(prev.getResponseData())

if (response.errorCode != null) {
	if (response.errorCode == &quot;INTERNAL_SERVICE_FAILURE&quot;){
		AssertionResult.setFailure(true)
		AssertionResult.setFailureMessage(&quot;The internal error occured&quot;);
		return;
	} else {
		AssertionResult.setFailure(true)
		AssertionResult.setFailureMessage(&quot;Some other error occured&quot;);
		return;
	}
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
